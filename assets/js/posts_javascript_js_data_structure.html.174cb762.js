"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8050],{6262:(a,e)=>{e.A=(a,e)=>{const t=a.__vccOpts||a;for(const[a,r]of e)t[a]=r;return t}},8642:(a,e,t)=>{t.r(e),t.d(e,{comp:()=>p,data:()=>s});var r=t(641);const i={},p=(0,t(6262).A)(i,[["render",function(a,e){return(0,r.uX)(),(0,r.CE)("div",null,e[0]||(e[0]=[(0,r.Fv)('<h1 id="说说你了解的js数据结构" tabindex="-1"><a class="header-anchor" href="#说说你了解的js数据结构"><span>说说你了解的js数据结构？</span></a></h1><h2 id="什么是数据结构" tabindex="-1"><a class="header-anchor" href="#什么是数据结构"><span>什么是数据结构？</span></a></h2><p>数据结构是计算机存储、组织数据的方式。<br> 数据结构意味着接口或封装：一个数据结构可被视为两个函数之间的接口，或者是由数据类型联合组成的存储内容的访问方法封装。</p><p>我们每天的编码中都会用到数据结构<br> 数组是最简单的内存数据结构<br> 下面是常见的数据结构：</p><ol><li>数组（Array）</li><li>栈（Stack）</li><li>队列（Queue）</li><li>链表（Linked List）</li><li>字典</li><li>散列表（Hash table）</li><li>树（Tree）</li><li>图（Graph）</li><li>堆（Heap）</li></ol><h2 id="数组-array" tabindex="-1"><a class="header-anchor" href="#数组-array"><span>数组（Array）</span></a></h2><p>数组是最最基本的数据结构，很多语言都内置支持数组。<br> 数组是使用一块连续的内存空间保存数据，保存的数据的个数在分配内存的时候就是确定的。</p><p>在日常生活中，人们经常使用列表：待办事项列表、购物清单等。</p><p>而计算机程序也在使用列表，在下面的条件下，选择列表作为数据结构就显得尤为有用：<br> 数据结构较为简单<br> 不需要在一个长序列中查找元素，或者对其进行排序<br> 反之，如果数据结构非常复杂，列表的作用就没有那么大了。</p><h2 id="栈-stack" tabindex="-1"><a class="header-anchor" href="#栈-stack"><span>栈（Stack）</span></a></h2><p>栈是一种遵循后进先出（LIFO）原则的有序集合<br> 在栈里，新元素都接近栈顶，旧元素都接近栈底。<br> 每次加入新的元素和拿走元素都在顶部操作<br><img src="https://upload-images.jianshu.io/upload_images/13253432-ddcb884374470d2c?imageMogr2/auto-orient/strip|imageView2/2/format/webp" alt="" loading="lazy"></p><h2 id="队列-queue" tabindex="-1"><a class="header-anchor" href="#队列-queue"><span>队列（Queue）</span></a></h2><p>队列是遵循先进先出（FIFO，也称为先来先服务）原则的一组有序的项<br> 队列在尾部添加新元素，并从顶部移除元素<br> 最新添加的元素必须排在队列的末尾<br><img src="https://upload-images.jianshu.io/upload_images/13253432-55ad7c7db40d3796?imageMogr2/auto-orient/strip|imageView2/2/format/webp" alt="" loading="lazy"></p><h2 id="链表-linked-list" tabindex="-1"><a class="header-anchor" href="#链表-linked-list"><span>链表（Linked List）</span></a></h2><p>链表也是一种列表，已经设计了数组，为什么还需要链表呢？<br> JavaScript中数组的主要问题时，它们被实现成了对象，<br> 与其他语言（比如C++和Java）的数组相对，效率很低。<br> 如果你发现数组在实际使用时很慢，就可以考虑使用链表来代替它。</p><p>使用条件：<br> 链表几乎可以用在任何可以使用一维数组的情况中。<br> 如果需要随机访问，数组仍然是更好的选择。<br><img src="https://raw.githubusercontent.com/zoro-web/blog/master/img/lian.jpg" alt="" loading="lazy"></p><h2 id="字典" tabindex="-1"><a class="header-anchor" href="#字典"><span>字典</span></a></h2><p>字典是一种以键-值对存储数据的数据结构，js中的Object类就是以字典的形式设计的。JavaScript可以通过实现字典类，让这种字典类型的对象使用起来更加简单，字典可以实现对象拥有的常见功能，并相应拓展自己想要的功能，而对象在JavaScript编写中随处可见，所以字典的作用也异常明显了。</p><h2 id="散列表" tabindex="-1"><a class="header-anchor" href="#散列表"><span>散列表</span></a></h2><p>也称为哈希表，特点是在散列表上插入、删除和取用数据都非常快。<br> 为什么要设计这种数据结构呢？<br> 用数组或链表存储数据，如果想要找到其中一个数据，需要从头进行遍历，因为不知道这个数据存储到了数组的哪个位置。</p><p>散列表在JavaScript中可以基础数组去进行设计。<br> 数组的长度是预先设定的，所有元素根据和该元素对应的键，保存在数组的特定位置，这里的键和对象的键是类型的概念。<br> 使用散列表存储数组时，通过一个散列函数将键映射为一个数字，这个数字的范围是0到散列表的长度。</p><p>即使使用一个高效的散列函数，依然存在将两个键映射为同一个值得可能，这种现象叫做碰撞。常见碰撞的处理方法有：开链法和线性探测法（具体概念有兴趣的可以网上自信了解）<br> 使用条件：<br> 可以用于数据的插入、删除和取用，不适用于查找数据<br><img src="https://raw.githubusercontent.com/zoro-web/blog/master/img/微信图片_20170820211406.png" alt="" loading="lazy"></p>',22)]))}]]),s=JSON.parse('{"path":"/posts/javascript/js_data_structure.html","title":"说说你了解的js数据结构？","lang":"zh-CN","frontmatter":{"date":"2025-05-22T00:00:00.000Z","category":["javascript"],"tag":["面试题"],"description":"说说你了解的js数据结构？ 什么是数据结构？ 数据结构是计算机存储、组织数据的方式。 数据结构意味着接口或封装：一个数据结构可被视为两个函数之间的接口，或者是由数据类型联合组成的存储内容的访问方法封装。 我们每天的编码中都会用到数据结构 数组是最简单的内存数据结构 下面是常见的数据结构： 数组（Array） 栈（Stack） 队列（Queue） 链表（...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"说说你了解的js数据结构？\\",\\"image\\":[\\"https://upload-images.jianshu.io/upload_images/13253432-ddcb884374470d2c?imageMogr2/auto-orient/strip|imageView2/2/format/webp\\",\\"https://upload-images.jianshu.io/upload_images/13253432-55ad7c7db40d3796?imageMogr2/auto-orient/strip|imageView2/2/format/webp\\",\\"https://raw.githubusercontent.com/zoro-web/blog/master/img/lian.jpg\\",\\"https://raw.githubusercontent.com/zoro-web/blog/master/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170820211406.png\\"],\\"datePublished\\":\\"2025-05-22T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-22T09:22:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"一次元\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/javascript/js_data_structure.html"}],["meta",{"property":"og:site_name","content":"一次元"}],["meta",{"property":"og:title","content":"说说你了解的js数据结构？"}],["meta",{"property":"og:description","content":"说说你了解的js数据结构？ 什么是数据结构？ 数据结构是计算机存储、组织数据的方式。 数据结构意味着接口或封装：一个数据结构可被视为两个函数之间的接口，或者是由数据类型联合组成的存储内容的访问方法封装。 我们每天的编码中都会用到数据结构 数组是最简单的内存数据结构 下面是常见的数据结构： 数组（Array） 栈（Stack） 队列（Queue） 链表（..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://upload-images.jianshu.io/upload_images/13253432-ddcb884374470d2c?imageMogr2/auto-orient/strip|imageView2/2/format/webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-22T09:22:24.000Z"}],["meta",{"property":"article:tag","content":"面试题"}],["meta",{"property":"article:published_time","content":"2025-05-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-22T09:22:24.000Z"}]]},"git":{"createdTime":1747905744000,"updatedTime":1747905744000,"contributors":[{"name":"shenyuan","username":"shenyuan","email":"13618329369@163.com","commits":1,"url":"https://github.com/shenyuan"}]},"readingTime":{"minutes":3.55,"words":1064},"filePathRelative":"posts/javascript/js_data_structure.md","excerpt":"\\n<h2>什么是数据结构？</h2>\\n<p>数据结构是计算机存储、组织数据的方式。<br>\\n数据结构意味着接口或封装：一个数据结构可被视为两个函数之间的接口，或者是由数据类型联合组成的存储内容的访问方法封装。</p>\\n<p>我们每天的编码中都会用到数据结构<br>\\n数组是最简单的内存数据结构<br>\\n下面是常见的数据结构：</p>\\n<ol>\\n<li>数组（Array）</li>\\n<li>栈（Stack）</li>\\n<li>队列（Queue）</li>\\n<li>链表（Linked List）</li>\\n<li>字典</li>\\n<li>散列表（Hash table）</li>\\n<li>树（Tree）</li>\\n<li>图（Graph）</li>\\n<li>堆（Heap）</li>\\n</ol>","autoDesc":true}')}}]);