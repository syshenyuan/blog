"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7285],{3495:(e,t,i)=>{i.r(t),i.d(t,{comp:()=>n,data:()=>p});var a=i(641);const s={},n=(0,i(6262).A)(s,[["render",function(e,t){return(0,a.uX)(),(0,a.CE)("div",null,t[0]||(t[0]=[(0,a.Fv)('<h1 id="说说git-中-head、工作树和索引之间的区别" tabindex="-1"><a class="header-anchor" href="#说说git-中-head、工作树和索引之间的区别"><span>说说Git 中 HEAD、工作树和索引之间的区别？</span></a></h1><figure><img src="https://static.vue-js.com/2de056a0-fa40-11eb-991d-334fd31f0201.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="一、head" tabindex="-1"><a class="header-anchor" href="#一、head"><span>一、HEAD</span></a></h2><p>在<code>git</code>中，可以存在很多分支，其本质上是一个指向<code>commit</code>对象的可变指针，而<code>Head</code>是一个特别的指针，是一个指向你正在工作中的本地分支的指针</p><p>简单来讲，就是你现在在哪儿，HEAD 就指向哪儿</p><p>例如当前我们处于<code>master</code>分支，所以<code>HEAD</code>这个指针指向了<code>master</code>分支指针</p><figure><img src="https://static.vue-js.com/36cb0da0-fa40-11eb-991d-334fd31f0201.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后通过调用<code>git checkout test</code>切换到<code>test</code>分支，那么<code>HEAD</code>则指向<code>test</code>分支，如下图：</p><figure><img src="https://static.vue-js.com/3e86ba80-fa40-11eb-991d-334fd31f0201.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>但我们在<code>test</code>分支再一次<code>commit</code>信息的时候，<code>HEAD</code>指针仍然指向了<code>test</code>分支指针，而<code>test</code>分支指针已经指向了最新创建的提交，如下图：</p><figure><img src="https://static.vue-js.com/439839b0-fa66-11eb-991d-334fd31f0201.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这个<code>HEAD</code>存储的位置就在<code>.git/HEAD</code>目录中，查看信息可以看到<code>HEAD</code>指向了另一个文件</p><div class="language-cmd line-numbers-mode" data-highlighter="shiki" data-ext="cmd" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ cat .</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">git</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">HEAD</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ref: </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">refs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">heads</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">master</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ cat .</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">git</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">refs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">heads</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">master</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">7406a10efcc169bbab17827aeda189aa20376f7f</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个文件的内容是一串哈希码，而这个哈希码正是<code>master</code>分支上最新的提交所对应的哈希码</p><p>所以，当我们切换分支的时候，<code>HEAD</code>指针通常指向我们所在的分支，当我们在某个分支上创建新的提交时，分支指针总是会指向当前分支的最新提交</p><p>所以，HEAD指针 ——–&gt; 分支指针 ——–&gt; 最新提交</p><h2 id="二、工作树和索引" tabindex="-1"><a class="header-anchor" href="#二、工作树和索引"><span>二、工作树和索引</span></a></h2><p>在<code>Git</code>管理下，大家实际操作的目录被称为工作树，也就是工作区域</p><p>在数据库和工作树之间有索引，索引是为了向数据库提交作准备的区域，也被称为暂存区域</p><figure><img src="https://static.vue-js.com/46e5ac40-fa40-11eb-bc6f-3f06e1491664.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>Git</code>在执行提交的时候，不是直接将工作树的状态保存到数据库，而是将设置在中间索引区域的状态保存到数据库</p><p>因此，要提交文件，首先需要把文件加入到索引区域中。</p><p>所以，凭借中间的索引，可以避免工作树中不必要的文件提交，还可以将文件修改内容的一部分加入索引区域并提交</p><h2 id="三、区别" tabindex="-1"><a class="header-anchor" href="#三、区别"><span>三、区别</span></a></h2><p>从所在的位置来看：</p><ul><li><p>HEAD 指针通常指向我们所在的分支，当我们在某个分支上创建新的提交时，分支指针总是会指向当前分支的最新提交</p></li><li><p>工作树是查看和编辑的（源）文件的实际内容</p></li><li><p>索引是放置你想要提交给 git仓库文件的地方，如工作树的代码通过 git add 则添加到 git 索引中，通过git commit 则将索引区域的文件提交到 git 仓库中</p></li></ul><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献"><span>参考文献</span></a></h2><ul><li><a href="https://backlog.com/git-tutorial/cn/intro/intro1_4.html" target="_blank" rel="noopener noreferrer">https://backlog.com/git-tutorial/cn/intro/intro1_4.html</a></li><li><a href="https://juejin.cn/post/6844903598522908686" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/6844903598522908686</a></li><li><a href="https://www.zsythink.net/archives/3412" target="_blank" rel="noopener noreferrer">https://www.zsythink.net/archives/3412</a></li></ul>',28)]))}]]),p=JSON.parse('{"path":"/posts/git/HEAD_tree_index.html","title":"说说Git 中 HEAD、工作树和索引之间的区别？","lang":"zh-CN","frontmatter":{"date":"2025-05-22T00:00:00.000Z","category":"-git","tag":["面试题"],"description":"说说Git 中 HEAD、工作树和索引之间的区别？ 一、HEAD 在git中，可以存在很多分支，其本质上是一个指向commit对象的可变指针，而Head是一个特别的指针，是一个指向你正在工作中的本地分支的指针 简单来讲，就是你现在在哪儿，HEAD 就指向哪儿 例如当前我们处于master分支，所以HEAD这个指针指向了master分支指针 然后通过调用...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"说说Git 中 HEAD、工作树和索引之间的区别？\\",\\"image\\":[\\"https://static.vue-js.com/2de056a0-fa40-11eb-991d-334fd31f0201.png\\",\\"https://static.vue-js.com/36cb0da0-fa40-11eb-991d-334fd31f0201.png\\",\\"https://static.vue-js.com/3e86ba80-fa40-11eb-991d-334fd31f0201.png\\",\\"https://static.vue-js.com/439839b0-fa66-11eb-991d-334fd31f0201.png\\",\\"https://static.vue-js.com/46e5ac40-fa40-11eb-bc6f-3f06e1491664.png\\"],\\"datePublished\\":\\"2025-05-22T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-23T11:03:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"一次元\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/git/HEAD_tree_index.html"}],["meta",{"property":"og:site_name","content":"一次元"}],["meta",{"property":"og:title","content":"说说Git 中 HEAD、工作树和索引之间的区别？"}],["meta",{"property":"og:description","content":"说说Git 中 HEAD、工作树和索引之间的区别？ 一、HEAD 在git中，可以存在很多分支，其本质上是一个指向commit对象的可变指针，而Head是一个特别的指针，是一个指向你正在工作中的本地分支的指针 简单来讲，就是你现在在哪儿，HEAD 就指向哪儿 例如当前我们处于master分支，所以HEAD这个指针指向了master分支指针 然后通过调用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://static.vue-js.com/2de056a0-fa40-11eb-991d-334fd31f0201.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-23T11:03:34.000Z"}],["meta",{"property":"article:tag","content":"面试题"}],["meta",{"property":"article:published_time","content":"2025-05-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-23T11:03:34.000Z"}]]},"git":{"createdTime":1747998214000,"updatedTime":1747998214000,"contributors":[{"name":"shenyuan","username":"shenyuan","email":"13618329369@163.com","commits":1,"url":"https://github.com/shenyuan"}]},"readingTime":{"minutes":2.42,"words":725},"filePathRelative":"posts/git/HEAD_tree_index.md","excerpt":"\\n<figure><img src=\\"https://static.vue-js.com/2de056a0-fa40-11eb-991d-334fd31f0201.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<h2>一、HEAD</h2>\\n<p>在<code>git</code>中，可以存在很多分支，其本质上是一个指向<code>commit</code>对象的可变指针，而<code>Head</code>是一个特别的指针，是一个指向你正在工作中的本地分支的指针</p>\\n<p>简单来讲，就是你现在在哪儿，HEAD 就指向哪儿</p>","autoDesc":true}')},6262:(e,t)=>{t.A=(e,t)=>{const i=e.__vccOpts||e;for(const[e,a]of t)i[e]=a;return i}}}]);