"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3524],{1709:(e,i,t)=>{t.d(i,{l:()=>a});const a=JSON.parse('{"category":{"/":{"path":"/category/","map":{"使用指南":{"path":"/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/","indexes":[0,1,2,3,4]},"指南":{"path":"/category/%E6%8C%87%E5%8D%97/","indexes":[5]},"-NodeJS系列":{"path":"/category/-nodejs%E7%B3%BB%E5%88%97/","indexes":[6,7,8,9,10,11,12,13,14,15,16,17,18,19]},"-React系列":{"path":"/category/-react%E7%B3%BB%E5%88%97/","indexes":[20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51]},"算法与数据结构":{"path":"/category/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","indexes":[52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69]},"微信小程序":{"path":"/category/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/","indexes":[70,71,72,73,74,75,76,77]},"css":{"path":"/category/css/","indexes":[78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97]},"-设计模式":{"path":"/category/-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","indexes":[98,99,100,101,102,103]},"-es6系列":{"path":"/category/-es6%E7%B3%BB%E5%88%97/","indexes":[104,105,106,107,108,109,110]},"-git":{"path":"/category/-git/","indexes":[111,112,113,114,115,116,117,118,119]},"-HTTP系列":{"path":"/category/-http%E7%B3%BB%E5%88%97/","indexes":[120,121,122,123,124,125,126,127,128,129,130,131,132,133]},"javascript":{"path":"/category/javascript/","indexes":[134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168]},"-操作系统":{"path":"/category/-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/","indexes":[169,170,171,172,173,174,175]},"-TypeScript系列":{"path":"/category/-typescript%E7%B3%BB%E5%88%97/","indexes":[176,177,178,179,180,181,182,183,184,185,186,187]},"-vue系列":{"path":"/category/-vue%E7%B3%BB%E5%88%97/","indexes":[188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217]},"-vue3系列":{"path":"/category/-vue3%E7%B3%BB%E5%88%97/","indexes":[218,219,220,221,222,223]},"-webpack系列":{"path":"/category/-webpack%E7%B3%BB%E5%88%97/","indexes":[224,225,226,227,228,229,230,231,232,233]}}}},"tag":{"/":{"path":"/tag/","map":{"禁用":{"path":"/tag/%E7%A6%81%E7%94%A8/","indexes":[2]},"加密":{"path":"/tag/%E5%8A%A0%E5%AF%86/","indexes":[3]},"布局":{"path":"/tag/%E5%B8%83%E5%B1%80/","indexes":[5]},"Markdown":{"path":"/tag/markdown/","indexes":[4]},"页面配置":{"path":"/tag/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/","indexes":[0]},"使用指南":{"path":"/tag/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/","indexes":[0]},"面试题":{"path":"/tag/%E9%9D%A2%E8%AF%95%E9%A2%98/","indexes":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,167,168]}}}}}')},2878:(e,i,t)=>{t.d(i,{P:()=>a});const a={Baidu:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon baidu-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#2319DC"/><path fill="#FFF" d="M320 528c65-14 56-92 54-109-3-26-34-72-76-68-52 4-60 81-60 81-7 35 17 110 82 96m121-131c36 0 65-41 65-92 0-52-29-93-65-93s-65 41-65 93c0 51 29 92 65 92m155 7c48 6 79-46 86-85 6-38-25-84-59-91-35-8-77 46-81 82-5 44 6 87 54 94m191 65c0-19-15-75-73-75-57 0-65 53-65 91 0 35 3 85 75 84 71-2 63-81 63-100m-73 163s-74-57-118-119c-59-92-142-55-170-8s-72 76-78 84-90 53-71 135c18 83 83 81 83 81s49 5 104-7c56-13 104 3 104 3s131 43 166-41c36-84-20-128-20-128"/><path fill="#2319DC" d="M453 552v56h-45s-46 3-61 54c-6 35 4 55 6 59s17 29 53 37h85V553zm-1 172h-34s-24-1-31-29c-4-12 0-26 2-31 2-6 10-19 26-23h37zm60-111v107s2 27 39 37h98V613h-42v108h-40s-13-2-16-12v-97z"/></svg>',BiliBili:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon bilibili-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#1296db"/><path fill="#fff" d="M745.363 177.725a47 47 0 0 1 0 66.3L702.5 286.85h44A141 141 0 0 1 887 427.512v281.25a141 141 0 0 1-141 140.626H277.25A141 141 0 0 1 137 708.763v-281.25a141 141 0 0 1 141-141h43.725l-42.788-42.825a47 47 0 1 1 66.263-66.3l99.45 99.45c2.963 2.962 5.438 6.187 7.425 9.637h120.487c1.988-3.45 4.5-6.75 7.463-9.675l99.413-99.45a47 47 0 0 1 66.3 0zm1.012 203.25h-468.75a47 47 0 0 0-46.763 43.388l-.112 3.525v281.25c0 24.712 19.125 44.962 43.387 46.724l3.488.15h468.75a47 47 0 0 0 46.763-43.387l.112-3.487v-281.25c0-26-21-47-47-46.876zm-375 93.75c26 0 47 21 47 47v47a47 47 0 1 1-93.75 0V521.6c0-26 21-47 47-47zm281.25 0c26 0 47 21 47 47v47a47 47 0 1 1-93.75 0V521.6c0-26 21-47 47-47z"/></svg>',Bitbucket:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon bitbucket-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#205081"/><path fill="#fff" d="M512 191.32v.01-.01c-152.76 0-277.805 41.114-277.805 92.166 0 13.443 33.353 206.247 46.577 282.708 5.932 34.285 94.508 84.563 231.126 84.563l.102-.407v.407c137.484 0 225.26-50.278 231.192-84.578 13.23-76.457 46.592-269 46.592-282.698.005-51.047-125-92.165-277.784-92.165zm0 397.493c-48.771 0-88.31-39.545-88.31-88.31 0-48.772 39.539-88.306 88.31-88.306s88.31 39.534 88.31 88.31c0 48.766-39.539 88.306-88.31 88.306zm-.05-276.842c-98.256-.153-177.885-17.232-177.855-38.14.036-20.912 79.72-37.731 177.976-37.568 98.256.153 177.884 17.22 177.849 38.139 0 20.908-79.705 37.716-177.966 37.564z"/><path fill="#fff" d="M711.668 642.814c-4.227 0-7.608 2.994-7.608 2.994S635.65 699.987 512 699.987s-192.06-54.18-192.06-54.18-3.386-2.988-7.608-2.988c-5.04 0-9.827 3.391-9.827 10.871 0 .79.076 1.579.224 2.353 10.617 56.826 18.382 97.206 19.736 103.347 9.268 41.805 91.045 73.411 189.525 73.411 98.49 0 180.267-31.606 189.535-73.411 1.364-6.136 9.114-46.49 19.736-103.317.143-.779.224-1.578.224-2.368 0-7.485-4.786-10.881-9.827-10.881zM467.659 500.477a44 44 0 1 0 88.51 0 44 44 0 1 0-88.51 0z"/></svg>',Dingding:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon dingding-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#1C9DF7"/><path fill="#fff" d="M760.551 442c0 5-5 13-7.767 20.713-23.302 49.192-82.85 145-82.85 145l-18.124 31.069h85.44L576.727 853.758l36.247-145h-67.316l23.302-95.796c-18.124 5-41.426 10-67.316 18.124 0 0-36.247 20.712-101-38.837 0 0-44.015-38.836-18.124-49.192 10-5 54.37-10 88.029-13 44.014-5.179 72.494-10 72.494-10s-139.81 2.59-173.468-2.589c-33.658-5-75.083-59.549-82.85-108.741 0 0-12.946-25.89 28.48-13 44.013 13 222.66 49.192 222.66 49.192s-235.606-72.494-251.14-90.618c-15.535-18.123-46.604-95.796-41.426-145 0 0 2.59-13 13-7.767 0 0 173.469 80.261 292.566 121.686 119 41.426 222.66 64.727 209.715 119z"/></svg>',Discord:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon discord-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#2DAAE1"/><path fill="#fff" d="m422.935 240.147 5.851 8.052c-113.039 34.253-165.649 84.585-165.649 84.585s13.645-8.052 37.024-18.123c66.28-30.215 118.865-38.267 142.244-40.286 3.91 0 7.819-1.994 9.76-1.994 38.966-6.058 81.816-6.058 126.658-2.02 58.462 8.053 122.749 24.157 187.061 62.423 0 0-48.7-48.338-155.862-82.566l7.767-10.071h1.968c13.308.233 91.757 4.246 173.416 68.481 0 0 89.634 169.144 89.634 376.555 1.942-2.02-50.668 92.637-189.003 96.65 0 0-23.405-28.194-40.933-52.35 81.84-24.157 113.013-76.534 113.013-76.534a313.796 313.796 0 0 1-72.106 38.267c-31.172 14.11-60.403 22.162-89.633 28.22-60.404 12.066-114.955 8.027-161.74 0a636.81 636.81 0 0 1-91.576-28.22c-13.644-6.033-29.23-12.065-44.817-22.137-1.941-2.02-3.883-2.02-5.85-4.039-1.943 0-1.943-2.02-1.943-2.02-11.702-6.032-17.528-10.07-17.528-10.07s29.23 52.376 109.104 76.532c-19.47 24.157-40.907 54.371-40.907 54.371-138.36-4.039-190.97-98.67-190.97-98.67 0-207.41 89.633-376.555 89.633-376.555 89.634-70.5 175.384-68.481 175.384-68.481zm213.961 233.017c-35.315 0-65 34.512-65 78s29.412 78 65 78 65-34.512 65-78-29.412-78-65-78zm-233.016 0c-35.315 0-65 34.512-65 78s29.412 78 65 78 64.726-34.512 64.726-78-29.411-78-64.726-78z"/></svg>',Dribbble:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon dribbble-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#DC4373"/><path fill="#C13366" d="M716.668 302.752c-13.332 5.154-28.61 3.676-35.726-1.068-86.196-48.27-179.286-62.06-265.482-37.926C292.074 300.212 241.674 437.028 242 564.746c22.622 42.136 52.558 105.234 61.854 153.104l298.24 298.246c210.532-37.376 376.584-203.408 413.986-413.928L716.668 302.752z"/><path fill="#F0F1F1" d="M511.994 219.308c-161.592 0-293.058 131.31-293.058 292.696s131.466 292.684 293.058 292.684c161.598 0 293.07-131.292 293.07-292.684 0-161.386-131.472-292.696-293.07-292.696zm192.842 138.148c33.43 41.432 53.744 93.756 54.682 150.772-11.122-2.282-58.23-11.068-114.526-11.068-18.164 0-37.282.91-56.448 3.278a822.854 822.854 0 0 0-4.938-11.812c-4.972-11.692-10.326-23.29-15.874-34.72 86.642-35.696 128.436-85.238 137.104-96.45zm-192.842-92.33c62.446 0 119.528 23.2 163.126 61.412-6.902 9.416-44.332 56.202-127.876 87.768-38.67-70.688-80.996-129.22-91.07-142.812a247.13 247.13 0 0 1 55.82-6.368zm-106.352 23.99c8.536 11.758 50.928 70.918 90.592 141.036-106.448 27.982-200.976 29.806-223.79 29.806h-2.424c16.39-75.534 67.424-138.298 135.622-170.842zM264.402 512.39c0-2.038.034-4.076.1-6.102 1.48.018 3.666.018 6.5.018 30.726 0 137.382-2.538 247.288-35.154a828.402 828.402 0 0 1 18.928 39.526 232.24 232.24 0 0 0-8.234 2.482C405.236 553.126 337.216 658.936 326.75 676.232c-38.778-43.696-62.348-101.058-62.348-163.842zm247.592 247.246c-56.786 0-109.192-19.232-151.01-51.48 7.074-13.868 58.412-106.3 194.026-153.5a1.806 1.806 0 0 1 .272-.09c34.006 88.53 48.408 162.834 52.358 185.862-29.432 12.374-61.752 19.208-95.646 19.208zm140.236-43.584c-3.32-19.052-16.66-88.688-47.452-173.618 17.27-2.686 34.072-3.748 49.828-3.748 51.748 0 92.23 11.33 101.634 14.204-11.182 67.444-49.794 125.808-104.01 163.162z"/><path fill="#D1D1D1" d="M511.994 219.308c-.382 0-.758.028-1.142.028v45.804c.38 0 .758-.018 1.142-.018 62.446 0 119.528 23.2 163.126 61.412-6.902 9.416-44.332 56.202-127.876 87.768-12.14-22.194-24.642-43.188-36.392-61.968V473.29c2.476-.706 4.954-1.41 7.434-2.144a828.402 828.402 0 0 1 18.928 39.526c-2.776.796-5.514 1.592-8.234 2.478a323.314 323.314 0 0 0-18.128 6.52v53.228a418.976 418.976 0 0 1 44.428-18.332c34.006 88.53 48.408 162.834 52.358 185.862-29.428 12.374-61.746 19.208-95.646 19.208-.382 0-.758-.024-1.142-.024v45.05c.382 0 .758.028 1.142.028 161.598 0 293.07-131.292 293.07-292.684.002-161.388-131.47-292.698-293.068-292.698zm71.614 269.316c-4.972-11.692-10.326-23.29-15.874-34.72 86.64-35.696 128.434-85.236 137.102-96.45 33.43 41.432 53.748 93.756 54.682 150.77-11.122-2.282-58.23-11.068-114.522-11.068-18.164 0-37.282.914-56.448 3.278-1.624-3.932-3.24-7.852-4.94-11.81zm68.622 227.428c-3.32-19.052-16.66-88.688-47.452-173.618 17.27-2.686 34.072-3.748 49.828-3.748 51.748 0 92.23 11.33 101.634 14.204-11.182 67.444-49.794 125.808-104.01 163.162z"/></svg>',Email:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon email-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#1384FF"/><path fill="#fff" d="M270.077 286.233H751.99c32.933 0 59.86 24.855 60.274 55.51l-301.023 157L210.217 341.88c.207-30.723 26.927-55.717 59.86-55.717zm-59.929 115.714-.276 277.756c0 30.931 27.134 56.2 60.205 56.2H751.99c33.14 0 60.274-25.269 60.274-56.2V401.81L518.283 551.492a15.88 15.88 0 0 1-14.43 0L210.148 401.947z"/></svg>',Evernote:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon evernote-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#14cc45"/><path fill="#595757" d="M347.671 193.259v87.51h-87.51z"/><path fill="#595757" d="M788.047 323.645s3.65-77.491-73.84-103.02c0 0-89.479-12.867-151.41-11.91 0 0-8.595-53.23-103.33-53.23 0 0-89.556-1.244-89.892 70.526v61.671s2.848 14.991-27.833 14.991h-81.581s-34.28 5.282-34.28 72.934c0 0 3.133 120.082 41.322 200.24 0 0 9.398 34.667 58.228 46.577 0 0 95.822 25.477 123.991 21.722 0 0 58.228 22.137 62.008-111.874 0 0 3.755-19.935 6.266 11.392 0 0-1.89 68.948 57.607 72.702 0 0 45.723 12.557 73.892 10.045 0 0 37.568 2.15 37.568 64.158 0 0 13.152 71.665-34.435 71.665h-65.763s-18.149 4.428-18.149-21.877c0 0-4.997-21.878 26.305-21.878h15.534v-43.756h-43.082s-66.332-6.317-66.332 50.047v75.135s9.347 49.866 66.332 49.866h121.273s48.441.44 76.61-90.359c0-.078 48.52-182.323 22.991-435.767zM625.272 486.523c0-21.877 18.02-51.16 39.432-51.16s36.48 36.118 36.48 58.022c-28.79-7.897-45.827-9.606-75.912-6.862z"/></svg>',Facebook:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon facebook-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#3c599b"/><path fill="#fff" d="M353.357 400.378h68.151v-66.235c0-29.206.737-74.247 21.952-102.142 22.348-29.542 53.026-49.622 105.794-49.622 85.976 0 122.18 12.263 122.18 12.263L654.4 295.61s-28.407-8.213-54.903-8.213c-26.512 0-50.243 9.5-50.243 35.995v76.988h108.687L650.352 499H549.254v342.602H421.508V499h-68.15v-98.622z"/></svg>',Flipboard:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon flipboard-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#e12828"/><path fill="#fff" d="M263.487 261.893H445.92V809.17H263.487V261.893z"/><path fill="#fce9e9" d="M445.92 261.893h364.842v182.435H445.92V261.893z"/><path fill="#f6bebe" d="M445.92 444.328h182.435v182.435H445.92V444.328z"/></svg>',Gitee:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon gitee-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#C71D23"/><path fill="#fff" d="M772.953 454.723H480.17v.006a25.46 25.46 0 0 0-25.46 25.453l-.025 63.649a25.46 25.46 0 0 0 25.46 25.466l178.242-.007a25.46 25.46 0 0 1 25.459 25.46v12.73c0 42.18-34.198 76.378-76.378 76.378H365.583a25.46 25.46 0 0 1-25.46-25.46V416.533h-.006c0-42.18 34.192-76.378 76.378-76.378h356.388v-.013a25.46 25.46 0 0 0 25.46-25.446l.057-63.65h.013a25.46 25.46 0 0 0-25.46-25.471l-356.432.012c-105.453 0-190.946 85.493-190.946 190.946v356.433a25.46 25.46 0 0 0 25.46 25.46H626.56c94.913 0 171.852-76.94 171.852-171.852V480.182a25.46 25.46 0 0 0-25.46-25.46z"/></svg>',GitHub:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon github-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#171515"/><path fill="#fff" d="M509.423 146.442c-200.317 0-362.756 162.42-362.756 362.8 0 160.266 103.936 296.24 248.109 344.217 18.139 3.327 24.76-7.872 24.76-17.486 0-8.613-.313-31.427-.49-61.702-100.912 21.923-122.205-48.63-122.205-48.63-16.495-41.91-40.28-53.067-40.28-53.067-32.937-22.51 2.492-22.053 2.492-22.053 36.407 2.566 55.568 37.386 55.568 37.386 32.362 55.438 84.907 39.43 105.58 30.143 3.296-23.444 12.667-39.43 23.032-48.498-80.557-9.156-165.246-40.28-165.246-179.297 0-39.604 14.135-71.988 37.342-97.348-3.731-9.178-16.18-46.063 3.556-96.009 0 0 30.46-9.754 99.76 37.19 28.937-8.048 59.97-12.071 90.823-12.211 30.807.14 61.843 4.165 90.822 12.21 69.26-46.944 99.663-37.189 99.663-37.189 19.792 49.946 7.34 86.831 3.61 96.01 23.25 25.359 37.29 57.742 37.29 97.347 0 139.366-84.82 170.033-165.637 179.013 13.026 11.2 24.628 33.342 24.628 67.182 0 48.498-.445 87.627-.445 99.521 0 9.702 6.535 20.988 24.945 17.444 144.03-48.067 247.881-183.95 247.881-344.175 0-200.378-162.442-362.798-362.802-362.798z"/></svg>',Gitlab:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon gitlab-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#E8F0FF"/><path fill="#E24329" d="m512 808 110-340H402z"/><path fill="#FC6D26" d="M512 808 402 468H247z"/><path fill="#E24329" d="M247 468h155l-67-204c-4-11-19-11-22 0z"/><path fill="#FC6D26" d="m512 808 110-340h156z"/><path fill="#FCA326" d="m778 468 33 104c3 10-1 19-9 25L512 808z"/><path fill="#E24329" d="M778 468H622l68-204c3-11 18-11 21 0z"/><path fill="#FCA326" d="M512 808 222 597c-8-5-12-16-9-25l34-104z"/></svg>',Gmail:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon gmail-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#DB4437"/><path fill="#E67C73" d="M277.48 285.567h465.767v441.362H277.48V285.567z"/><path fill="#FFF" d="M282.543 285.567h-10.645c-25.962 0-47.122 21.808-47.122 48.705v343.952c0 26.897 21.08 48.705 47.122 48.705h24.976V407.954l213.49 169.95 213.489-169.95V726.93h24.975c26.04 0 47.123-21.809 47.123-48.705V334.272c0-26.897-21.134-48.705-47.123-48.705h-10.644L510.364 480.44 282.542 285.567z"/></svg>',Instagram:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon instagram-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#181818"/><path fill="#fff" d="M512 348.16c-88.222 0-163.84 71.417-163.84 163.84 0 88.222 71.417 163.84 163.84 163.84 88.222 0 163.84-71.417 163.84-163.84 0-88.222-75.618-163.84-163.84-163.84zm0 268.866c-58.814 0-105.026-46.212-105.026-105.026S453.186 406.974 512 406.974 617 453.186 617 512s-46.186 105-105 105zM680.041 306.15c-21 0-37.81 16.804-37.81 37.809s16.805 37.81 37.81 37.81 37.81-16.805 37.81-37.81-16.805-37.81-37.81-37.81z"/><path fill="#FFF" d="M659.036 196.923h-16.804c-50.413-4.2-210.051-4.2-260.464 0-96.623-4.2-180.644 71.418-184.845 168.041v16.804c-4.2 50.413-4.2 210.051 0 260.464-4.2 96.623 71.418 180.644 168.041 184.845h16.804c50.413 4.2 210.051 4.2 260.464 0 96.623 4.2 180.644-71.418 184.845-168.041V381.768c4.2-96.623-71.418-180.644-168.041-184.845zM759.86 696.845c-12.604 29.407-33.609 50.412-58.815 58.814-121.83 16.805-247.86 16.805-373.891 0-29.407-12.603-50.412-33.608-58.814-58.814-12.604-63.015-16.805-126-12.604-184.845-4.2-63.015 0-126 12.604-184.845 12.603-29.407 33.608-50.412 58.814-58.814 121.83-16.805 247.86-16.805 373.891 0 29.407 12.603 50.412 33.608 58.815 58.814 12.603 63.015 16.804 126 12.603 184.845 4.2 63.015 0 126-12.603 184.845z"/></svg>',Lark:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon lark-icon" viewBox="0 0 700 700"><path fill="#fdfdfd" d="M0 350C0 156.7 156.7 0 350 0s350 156.7 350 350-156.7 350-350 350S0 543.3 0 350Z"/><path fill="#326ffd" d="M94.683 255.472c-1.188.99-3.547 1.424-3.565 2.971-.892 77.877-1.647 155.803.853 233.645.135 4.185 3.811 7.709 6.987 10.437 8.041 6.906 16.845 13.026 26.179 18.048 15.915 8.564 32.118 16.959 49.299 22.567 22.582 7.37 45.902 12.712 69.402 16.176 16.45 2.425 33.243 1.892 49.863 1.404 85.699-2.518 170.495-42.242 226.974-107.047 13.128-15.062 24.349-31.701 35.801-48.072.482-.689-.29-1.655-.435-2.483-11.645 12.501-23.322 25.66-38.015 34.376-38.027 22.561-80.103 18.178-120.414 4.963-24.658-8.083-49.594-15.711-73.208-26.468-32.043-14.597-63.264-31.14-93.363-49.411-50.119-30.424-92.859-71.794-136.358-111.106Z"/><path fill="#00d5b8" d="M373.34 355.289c22.389-21.264 43.857-43.542 67.167-63.793 15.84-13.761 40.614-23.584 58.792-32.162-13.932-44.24-30.142-84.389-60.513-120.46-3.54-4.204-7.91-9.366-13.399-9.603-81.245-3.519-162.641-2.296-243.958-1.541-1.72.016-3.262 2.127-3.451 3.836-.209 1.893 1.026 3.902 2.457 5.159 21.134 18.566 43.735 35.416 64.865 53.985 52.859 46.45 91.839 105.023 128.04 164.579Z"/><path fill="#133c99" d="M302.636 406.089c63.531 28.909 161.471 77.441 225.923 24.345 10.473-8.628 22.415-16.393 29.694-27.844 19.077-30.011 31.761-63.645 48.432-95.056 8.019-15.112 17.249-23.738 28.765-36.905-17.982-10.513-43.141-16.899-63.455-18.431-44.467-3.354-94.982 6.952-129.899 36.91-29.717 25.495-55.957 54.804-84.849 81.23-16.051 14.681-36.135 24.874-54.611 35.751Z"/></svg>',Lines:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon lines-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#00C300"/><path fill="#fff" d="M861.44 469.76C861.44 313.28 704 186.08 512 186.08s-349.44 127.2-349.44 283.68C162.56 608 287 727.52 455 752c11.52 2.4 27 7.68 30.72 17.28a71.04 71.04 0 0 1 0 31.68l-5.28 29.76c0 8.64-7.2 34.56 30.24 19a1104 1104 0 0 0 274.56-202.56 251.52 251.52 0 0 0 75-175zM375.2 562.88h-69.12a17.76 17.76 0 0 1-18-18v-139.2a17.76 17.76 0 0 1 18-18 18 18 0 0 1 18 18v120.48h51a19 19 0 0 1 18 19 18 18 0 0 1-18 18zm72-18a18 18 0 1 1-36.48 0v-139.2a18 18 0 0 1 36.48 0zm167.04 0a18 18 0 0 1-12.48 17.28H596a18 18 0 0 1-14.4-7.2l-69.6-96v85.92a18 18 0 1 1-36.48 0v-139.2A18 18 0 0 1 488 388.16h5.76a18 18 0 0 1 14.4 7.2l71.52 96v-85.92a18 18 0 1 1 36.48 0zm112.32-87.84a18 18 0 0 1 18 18 17.76 17.76 0 0 1-18 18h-51v32.64h51a19 19 0 0 1 18 19 18 18 0 0 1-18 18H656a18 18 0 0 1-18-18v-139.2a18 18 0 0 1 18-18.28h69.12a18 18 0 0 1 18 18 18 18 0 0 1-18 19h-49.44v32.64zm0 0"/></svg>',Linkedin:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon linkedin-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#4376B1"/><path fill="#F1F2F2" d="M838.301 555.94v225.157h-130.54V571.03c0-52.746-18.847-88.766-66.112-88.766-36.069 0-57.496 24.25-66.959 47.732-3.436 8.391-4.322 20.045-4.322 31.814v219.277h-130.55s1.752-355.784 0-392.613h130.56v55.637c-.263.438-.633.867-.867 1.285h.866v-1.285c17.349-26.694 48.287-64.856 117.651-64.856 85.884 0 150.273 56.114 150.273 176.685zm-535.05-356.72c-44.655 0-73.87 29.314-73.87 67.826 0 37.695 28.368 67.855 72.157 67.855h.847c45.532 0 73.842-30.16 73.842-67.855-.866-38.512-28.31-67.825-72.975-67.825zM237.14 781.098h130.5V388.474h-130.5v392.623z"/></svg>',Pinterest:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon pinterest-icon" viewBox="0 0 1024 1024"><path fill="#fff" d="M512 1023.147c282.773 0 512-228.288 512-509.888 0-281.622-229.227-509.91-512-509.91S0 231.637 0 513.26c0 281.6 229.227 509.888 512 509.888z"/><path fill="#CA242D" d="M512 3.35C229.248 3.35 0 231.658 0 513.258c0 216.128 134.848 400.789 325.312 475.05-4.63-40.277-8.427-102.378 1.685-146.453 9.28-39.872 59.84-253.483 59.84-253.483s-15.168-30.634-15.168-75.541c0-70.933 41.302-123.797 92.715-123.797 43.819 0 64.896 32.725 64.896 71.765 0 43.627-27.819 109.099-42.56 169.963-12.224 50.773 25.707 92.33 75.84 92.33 91.03 0 160.981-95.68 160.981-233.344 0-122.133-88.064-207.317-214.058-207.317-145.814 0-231.36 108.693-231.36 221.163 0 43.648 16.853 90.645 37.93 116.245a15.19 15.19 0 0 1 3.371 14.699c-3.797 15.936-12.65 50.773-14.336 57.92-2.09 9.216-7.573 11.328-17.28 6.698-64.043-29.781-104.085-122.538-104.085-197.653 0-160.747 117.162-308.459 338.389-308.459 177.408 0 315.627 125.888 315.627 294.614 0 175.829-111.254 317.269-265.472 317.269-51.84 0-100.715-26.859-117.163-58.752l-32.021 121.28c-11.371 44.48-42.56 99.883-63.638 133.867A516.01 516.01 0 0 0 511.168 1024c282.752 0 512-228.31 512-509.91C1024 231.66 794.752 3.35 512 3.35z"/></svg>',Pocket:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon pocket-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#EE4056"/><path fill="#fff" d="M716.52 309.066c12.549 0 23.172 4.394 31.87 13.182 8.697 8.788 13.023 19.48 13.023 32.006v150.4c0 33.975-6.568 66.41-19.705 97.307-13.138 30.918-30.76 57.487-52.89 79.685-22.106 22.197-48.562 39.864-79.367 52.888-30.804 13.024-63.081 19.547-96.876 19.547a246.897 246.897 0 0 1-97.215-19.547c-30.805-13.046-57.306-30.668-79.504-52.888-22.198-22.198-39.865-48.767-53.003-79.663a246.311 246.311 0 0 1-19.728-97.33V354.255c0-12.321 4.44-22.945 13.319-31.847a43.489 43.489 0 0 1 31.87-13.341H716.52zM512.574 617.339c9.06 0 16.989-3.216 23.738-9.581l117.103-112.415a32.622 32.622 0 0 0 10.691-24.62c0-9.469-3.33-17.533-9.966-24.191a32.958 32.958 0 0 0-24.237-10.012c-9.06 0-16.988 3.171-23.737 9.56l-93.547 89.808-93.614-89.809a33.185 33.185 0 0 0-23.443-9.559c-9.468 0-17.532 3.33-24.19 9.967-6.66 6.682-9.967 14.722-9.967 24.236 0 9.83 3.443 18.03 10.419 24.599l117.33 112.413c6.342 6.342 14.179 9.56 23.466 9.56l-.046.044z"/></svg>',QQ:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon qq-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#5eaade"/><path fill="#fff" d="M805.25 585.542c-15-48.188-32.25-88.688-58.781-154.97 4.125-174.093-68.25-314.905-234.938-314.905-168.562 0-239.344 143.625-234.844 314.906-26.625 66.375-43.78 106.594-58.78 154.969-31.876 102.656-21.563 145.125-13.688 146.062 16.875 2.063 65.718-77.25 65.718-77.25 0 45.938 23.625 105.844 74.813 149.063-24.75 7.593-80.344 28.03-67.125 50.437 10.688 18.094 183.938 11.531 233.906 5.906 49.969 5.625 223.219 12.188 233.906-5.906 13.22-22.312-42.468-42.844-67.125-50.437 51.188-43.313 74.813-103.22 74.813-149.063 0 0 48.844 79.313 65.719 77.25 7.969-1.031 18.281-43.5-13.594-146.062z"/></svg>',Qzone:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon qzone-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#0985DD"/><path fill="#fff" d="M722.38 595.24c22.486-4.056 11.345-12.424 2.156-11.346-16.685 1.72-40.43 1.925-66.562 1.284l3.029 17.79a656.641 656.641 0 0 0 61.402-7.702l-.025-.026zm68.95-174.915a5.287 5.287 0 0 0-4.493-3.645L598.42 389.29l-84.326-170.628c-1.925-3.594-7.958-3.594-9.857 0L419.885 389.29l-188.417 27.39a5.338 5.338 0 0 0-4.466 3.645 5.493 5.493 0 0 0 1.488 5.57l136.36 132.92-32.088 187.519a5.263 5.263 0 0 0 2.13 5.39c1.695 1.284 3.851 1.463 5.776.385l168.651-88.407 168.524 88.638 2.567.642 3.209-1.079c1.72-1.283 2.566-3.208 2.13-5.34l-24.591-143.648c-27.21 2.156-54.37 3.183-76.42 3.183-77.267 0-135.075-3.645-135.948-3.645a16.48 16.48 0 0 1-14.785-11.757 16.247 16.247 0 0 1 5.981-17.764l155.431-113.05c-99.959-7.906-183.873-6.418-184.721-6.418-13.502.642-25.67-3.645.642-14.375 4.518-1.694 109.2-23.72 230.362-7.445 6.673.847 12.013 5.75 13.733 12.194a16.61 16.61 0 0 1-6.263 17.302L497.204 571.598c27.826 5.802 100.37 12.014 160.745 13.502l-4.519-26.312 136.308-132.97a5.338 5.338 0 0 0 1.54-5.544l.051.051z"/></svg>',Reddit:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon reddit-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#ff4501"/><path fill="#fff" d="M617.199 680.55c5.666 5.974 5.666 11.742 0 17.34-21.845 23.143-56.9 34.714-105.199 34.714s-83.354-11.571-105.199-34.714c-5.666-5.598-5.666-11.366 0-17.34a10.445 10.445 0 0 1 7.919-3.379c3.174 0 5.803 1.127 7.919 3.38 16.93 18.295 46.728 27.408 89.361 27.408 42.325 0 72.09-9.113 89.361-27.409a10.445 10.445 0 0 1 7.919-3.379c3.174 0 5.803 1.127 7.919 3.38zm-176.06-136.635c9.182 9.694 13.756 21.47 13.756 35.294 0 13.79-4.574 25.565-13.756 35.26a44.134 44.134 0 0 1-33.28 14.54c-13.073 0-24.234-4.847-33.587-14.54a49.015 49.015 0 0 1-13.995-35.26c0-14.2 4.642-26.147 13.995-35.84 9.353-9.728 20.514-14.575 33.587-14.575 13.04 0 24.132 5.051 33.28 15.12zm222.584 35.294c0 13.79-4.642 25.565-13.995 35.26a44.954 44.954 0 0 1-33.587 14.54c-13.04 0-24.132-4.847-33.28-14.54a49.493 49.493 0 0 1-13.756-35.26c0-13.824 4.574-25.669 13.756-35.567 9.148-9.9 20.24-14.848 33.28-14.848 13.073 0 24.234 4.847 33.587 14.575 9.353 9.693 13.995 21.64 13.995 35.84zM796.433 512c0-18.295-6.144-33.963-18.5-47.036a59.494 59.494 0 0 0-44.92-19.592c-17.647 0-32.768 6.724-45.465 20.138-45.841-33.587-100.66-51.507-164.455-53.725l33.314-158.482 105.746 25.19c0 13.825 4.573 25.6 13.755 35.295 9.148 9.694 20.241 14.54 33.314 14.54 13.04 0 24.235-4.915 33.553-14.813 9.353-9.899 13.995-21.743 13.995-35.567s-4.642-25.669-13.995-35.567a44.578 44.578 0 0 0-33.553-14.814c-19.046 0-33.143 9.318-42.325 27.99L550.06 228.112c-6.69-1.877-11.094 1.126-13.21 8.977l-36.488 174.695c-63.454 2.594-117.897 20.718-163.363 54.272a59.187 59.187 0 0 0-46.011-20.685c-17.613 0-32.598 6.52-44.92 19.592a66.082 66.082 0 0 0-18.5 47.036c0 13.073 3.243 25.02 9.762 35.84 6.52 10.82 15.258 19.046 26.18 24.644a152.303 152.303 0 0 0-3.174 31.335c0 53.009 24.678 98.372 74.035 136.09 49.323 37.682 108.715 56.524 178.176 56.524 69.769 0 129.365-18.842 178.688-56.525 49.357-37.717 74.001-83.08 74.001-136.09 0-11.946-1.229-22.561-3.686-31.914 10.581-5.598 19.046-13.722 25.395-24.337 6.315-10.65 9.49-22.528 9.49-35.567z"/></svg>',Rss:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon rss-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#FD9B00"/><path fill="#fff" d="M687.981 740.39c0-225.92-183.617-409.777-409.21-409.777v-97.205c279.353 0 506.617 227.506 506.617 506.98H687.98zm-74.841 0h-97.538c0-63.567-24.688-123.245-69.43-167.993-44.762-44.856-104.24-69.556-167.54-69.556v-97.176c184.44 0 334.508 150.046 334.508 334.725zM346.038 605.166c37.35 0 67.514 30.357 67.514 67.39 0 37.146-30.163 67.177-67.514 67.177-37.219 0-67.458-30.03-67.458-67.176 0-37.034 30.24-67.391 67.458-67.391z"/></svg>',Steam:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon steam-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="488" fill="#fff"/><path fill="#13227a" d="M1008 512c0 274-222.4 496-496.8 496-227.6 0-419.2-152.6-478-360.8l190.4 78.6c12.8 64.2 69.8 112.8 137.8 112.8 78.4 0 143.8-64.8 140.4-147l169-120.4c104.2 2.6 191.6-81.8 191.6-187 0-103.2-84-187-187.4-187s-187.4 84-187.4 187v2.4L369.2 558c-31-1.8-61.4 6.8-87 24.2L16 472.2C36.4 216.8 250.2 16 511.2 16 785.6 16 1008 238 1008 512zM327.4 768.6l-61-25.2a105.58 105.58 0 0 0 54.4 51.6c53.8 22.4 115.6-3.2 138-56.8 10.8-26 11-54.6.2-80.6-10.8-26-31-46.4-57-57.2-25.8-10.8-53.4-10.4-77.8-1.2l63 26c39.6 16.4 58.4 61.8 41.8 101.4-16.6 39.8-62 58.4-101.6 42zM675 508.8c-68.8 0-124.8-56-124.8-124.6s56-124.6 124.8-124.6 124.8 56 124.8 124.6S744 508.8 675 508.8zm.2-31.2c51.8 0 93.8-42 93.8-93.6 0-51.8-42-93.6-93.8-93.6s-93.8 42-93.8 93.6c.2 51.6 42.2 93.6 93.8 93.6z"/></svg>',Twitter:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon twitter-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512"/><path fill="#FFF" d="m560 473 186-216h-44L540 445 411 257H262l195 284-195 226h44l171-198 136 198h149zM322 290h68l312 445h-68z"/></svg>',Wechat:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon wechat-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#2AAE67"/><path fill="#FFF" d="M501 417c-14 0-25-12-25-26s11-26 25-26 26 12 26 26-12 26-26 26m-144 0c-15 0-26-12-26-26s11-26 26-26 25 12 25 26-11 26-25 26m72-150c-120 0-217 82-217 183 0 55 29 104 75 138a15 15 0 0 1 6 11l-1 5-9 37-2 5c0 4 4 8 8 8l4-2 47-27c4-3 8-4 12-4l6 1a255 255 0 0 0 83 10c-5-14-7-29-7-45 0-92 88-166 197-166h9c-16-87-103-154-211-154"/><path fill="#FFF" d="M692 561c-13 0-23-10-23-23 0-12 10-22 23-22 12 0 22 10 22 22 0 13-10 23-22 23m-121 0c-12 0-23-10-23-23 0-12 11-22 23-22s23 10 23 22c0 13-11 23-23 23m179 141c38-28 62-69 62-115 0-84-81-152-181-152s-180 68-180 152 80 152 180 152a212 212 0 0 0 65-9l9 3 40 23 3 1a6 6 0 0 0 6-6l-1-5-8-30v-4c0-4 2-8 5-10"/></svg>',Weibo:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon weibo-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#D52C2B"/><path fill="#D52C2B" d="M256 601c0 68 91 124 203 124 113 0 203-56 203-124s-90-123-203-123c-112 0-203 55-203 123"/><path fill="#FFF" d="M464 715c-99 9-185-35-191-98-7-64 68-123 168-133 99-10 185 34 191 98 7 64-69 123-168 133m199-212c-9-2-15-4-10-15 9-23 10-44 0-58-19-27-73-26-134-1 0 0-19 8-14-7 9-29 8-54-7-68-33-33-121 1-196 75-57 55-90 114-90 165 0 97 127 156 252 156 163 0 271-93 271-167 0-44-38-69-72-80m108-177c-39-43-98-59-151-48-13 3-20 14-18 27 3 12 15 19 27 17 39-8 80 3 108 34 27 29 36 70 24 108a22 22 0 0 0 14 28c12 4 25-3 29-14 18-53 5-112-33-152"/><path fill="#FFF" d="M711 379a78 78 0 0 0-74-23c-11 2-17 12-15 22v1c2 10 12 17 23 15a38 38 0 0 1 36 11c10 10 12 24 8 36a19 19 0 0 0 13 25c10 3 21-3 25-13a74 74 0 0 0-16-74M470 599c-4 6-12 9-18 6-6-2-7-8-4-14s11-9 17-6c6 2 8 8 5 14m-32 40a38 38 0 0 1-46 15c-15-7-20-25-10-39 10-15 29-21 45-15 15 7 20 24 11 39m36-106c-47-12-101 11-121 52-21 41-1 87 47 102 49 16 108-8 128-53 20-44-5-89-54-101"/></svg>',Whatsapp:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon whatsapp-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#31B84C"/><path fill="#fff" d="m192.021 832 45.227-164.33a315.413 315.413 0 0 1-42.539-158.529C194.731 334.251 337.707 192 513.344 192c84.587-.213 165.76 33.28 225.387 93.013A314.453 314.453 0 0 1 832 509.376c-.085 174.848-143.04 317.141-318.656 317.141h-.15a319.61 319.61 0 0 1-152.277-38.613L192 832h.021zm241.686-455.467c-6.443-15.445-13.014-13.354-17.92-13.61-4.63-.214-9.942-.256-15.254-.256a29.227 29.227 0 0 0-21.226 9.898c-7.296 7.958-27.84 27.136-27.84 66.134s28.501 76.672 32.49 81.962c3.968 5.291 56.15 85.334 136 119.638 19.008 8.17 33.814 13.056 45.398 16.704 19.072 6.037 36.437 5.184 50.133 3.157 15.296-2.283 47.125-19.2 53.76-37.675 6.613-18.56 6.613-34.389 4.65-37.717-1.983-3.264-7.295-5.27-15.274-9.237-7.957-3.947-47.125-23.126-54.4-25.771-7.296-2.667-12.587-3.968-17.92 3.947-5.312 7.936-20.565 25.792-25.195 31.061-4.65 5.312-9.301 5.973-17.258 2.005-7.979-3.968-33.622-12.33-64-39.338-23.68-20.992-39.68-46.955-44.331-54.912-4.65-7.915-.47-12.203 3.52-16.15 3.563-3.541 7.936-9.258 11.904-13.866 3.99-4.651 5.333-7.958 7.979-13.227 2.645-5.29 1.322-9.92-.64-13.888-2.006-3.968-17.92-42.987-24.555-58.859h-.021z"/></svg>',Youtube:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon youtube-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#DD1829"/><path fill="#fff" d="M800.305 372.2c-12.805-42.429-22.873-65.942-65.303-71.064 0 0-113.644-5.761-226.64-5.761-111.716 0-222.797 5.761-222.797 5.761-44.992 5.122-55.7 29.915-67.223 71.065 0 0-11.524 65.527-11.524 131.886 0 68.066 11.524 137.008 11.524 137.008 8.963 39.87 27.354 65.943 67.223 71.065 0 0 123.292 7.682 240.724 7.682 106.78 0 208.714-7.682 208.714-7.682 39.87-7.682 53.78-28.635 65.303-71.065 0 0 11.523-63.022 11.523-128.045 0-69.288-11.524-140.85-11.524-140.85zM448.82 619.97V393.33l174.781 113.32L448.82 619.97z"/></svg>',Zhihu:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon zhihu-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#006CE2"/><path fill="#fff" d="M513.65 491.261H411.551c1.615-16.154 5.815-60.095 5.815-84.973 0-24.88-.323-60.742-.323-60.742h102.744V329.39c0-21.647-9.37-31.34-17.124-31.34h-178.67s5.169-17.77 10.015-36.186c4.846-18.417 15.832-44.264 15.832-44.264-63.003 4.2-67.958 50.941-81.743 92.729-13.787 41.785-24.556 62.356-44.586 107.912 27.786 0 55.249-13.57 66.879-32.309 11.631-18.74 16.908-40.71 16.908-40.71h62.035v59.019c0 21.107-3.878 87.45-3.878 87.45H254.742c-19.386 0-29.724 48.894-29.724 48.894h133.76c-8.4 75.82-26.493 106.191-51.91 152.716-25.418 46.525-92.728 99.406-92.728 99.406 41.033 11.63 86.589-3.555 105.974-21.972 19.386-18.417 35.863-49.756 47.817-72.838 11.954-23.081 21.972-65.124 21.972-65.124L498.462 766.86s4.846-24.233 6.461-39.418c1.616-15.186-.755-26.385-4.63-35.433-3.878-9.046-15.509-21.54-31.018-39.634-15.507-18.094-48.034-52.879-48.034-52.879s-15.832 11.63-28.108 21.001c9.046-21.97 16.262-79.695 16.262-79.695h122.343v-20.249c.003-17.66-7.319-29.29-18.089-29.29zm287.337-200.747h-234.35a4.308 4.308 0 0 0-4.309 4.308v435.099a4.308 4.308 0 0 0 4.308 4.308h40.226l14.7 50.402 81.096-50.402h98.328a4.308 4.308 0 0 0 4.308-4.308v-435.1a4.308 4.308 0 0 0-4.308-4.308zM755.97 684.47h-52.343l-61.548 39.095-10.823-39.095h-18.738V338.116H755.97v346.355z"/></svg>'}},3429:(e,i,t)=>{t.d(i,{B:()=>Y});var a={};t.r(a),t.d(a,{default:()=>m});var s={};t.r(s);var n={};t.r(n);var l={};t.r(l);var p={};t.r(p),t.d(p,{default:()=>b});var c={};t.r(c),t.d(c,{default:()=>B});var o={};t.r(o);var d={};t.r(d);var r={};t.r(r),t.d(r,{default:()=>S});var h={};t.r(h),t.d(h,{default:()=>P});var g={};t.r(g),t.d(g,{default:()=>U});var k=t(5579);const m={enhance:({app:e})=>{e.component("GitContributors",k.B)}};var u=t(3349),f=t(1781),y=t(9212);const b={enhance:({app:e})=>{e.component("CodeTabs",f.S),e.component("Tabs",y.t)}};var v=t(2996),x=t(3027);const B={enhance:({app:e})=>{e.component("CodeDemo",v.A),e.component("MdDemo",x.A)}};var A=t(2417),F=t(671),w=t(7059),E=t(6899),T=t(7786),C=t(641),j=t(9221);const S={enhance:({app:e})=>{(0,E.L)("VPIcon")||e.component("VPIcon",(e=>(0,C.h)(j.G,{type:"iconify",prefix:"fa6-solid:",...e})))},setup:()=>{(0,T.r9V)("https://cdn.jsdelivr.net/npm/iconify-icon@2")}};var _=t(2472),z=t(4764),D=t(596),R=t(8831);t(2771);const P={enhance:({app:e})=>{(0,z.L)("Badge")||e.component("Badge",D.A),(0,z.L)("VPCard")||e.component("VPCard",R.A)},setup:()=>{},rootComponents:[]};var M=t(6358),H=t(4324),V=t(1594),J=t(5461),N=t(4128),O=t(1646),L=t(7238),q=t(8465),I=t(2331),G=t(1109),W=(t(2461),t(91));t(7374),t(6829),t(6828),t(3248),(0,q.M_)((e=>{const i=e.title,t=e.index??!0,a=e.icon;return t?{title:i,content:a?()=>[(0,C.h)((0,C.g2)("VPIcon"),{icon:a,sizing:"both"}),i]:null,order:e.order,index:e.index}:null}));const U={enhance:({app:e,router:i})=>{const{scrollBehavior:t}=i.options;i.options.scrollBehavior=async(...e)=>(await N.s.wait(),t(...e)),(0,O.i)(e),e.component("BloggerInfo",I.n),e.component("SocialMedias",I.k),e.component("GlobalEncrypt",W.J),e.component("LocalEncrypt",W.n)},setup:()=>{(0,O.s)(),(0,O.a)(),(0,G.su)()},layouts:{Layout:L.L,NotFound:L.N,Blog:I.B}},Y=[a,s,n,l,u,p,c,o,d,A,F,w,r,_,h,M,H,V,J,g].map((e=>e.default)).filter(Boolean)},3781:(e,i,t)=>{t.d(i,{U:()=>a});const a=JSON.parse('{"article":{"/":{"path":"/article/","indexes":[0,234,235,236,237,238,239,240,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,241,1,2,3,5,4,167,168]}},"star":{"/":{"path":"/star/","indexes":[0]}},"timeline":{"/":{"path":"/timeline/","indexes":[234,235,236,237,238,239,240,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,241,1,2,3,5,4,167,168,0]}}}')},4776:(e,i,t)=>{t.d(i,{M:()=>a});const a=JSON.parse('["/demo/page.html","/demo/","/demo/disable.html","/demo/encrypt.html","/demo/markdown.html","/demo/layout.html","/posts/NodeJS/Buffer.html","/posts/NodeJS/EventEmitter.html","/posts/NodeJS/Stream.html","/posts/NodeJS/event_loop.html","/posts/NodeJS/file_upload.html","/posts/NodeJS/fs.html","/posts/NodeJS/global.html","/posts/NodeJS/jwt.html","/posts/NodeJS/middleware.html","/posts/NodeJS/nodejs.html","/posts/NodeJS/paging.html","/posts/NodeJS/performance.html","/posts/NodeJS/process.html","/posts/NodeJS/require_order.html","/posts/React/Binding%20events.html","/posts/React/Building%20components.html","/posts/React/Fiber.html","/posts/React/High%20order%20components.html","/posts/React/Improve%20performance.html","/posts/React/JSX%20to%20DOM.html","/posts/React/React%20Hooks.html","/posts/React/React%20Router%20model.html","/posts/React/React%20Router.html","/posts/React/React%20refs.html","/posts/React/React.html","/posts/React/Real%20DOM_Virtual%20DOM.html","/posts/React/Redux%20Middleware.html","/posts/React/SyntheticEvent.html","/posts/React/animation.html","/posts/React/capture%20error.html","/posts/React/class_function%20component.html","/posts/React/communication.html","/posts/React/controlled_Uncontrolled.html","/posts/React/diff.html","/posts/React/how%20to%20use%20redux.html","/posts/React/immutable.html","/posts/React/import%20css.html","/posts/React/improve_render.html","/posts/React/key.html","/posts/React/life%20cycle.html","/posts/React/render.html","/posts/React/server%20side%20rendering.html","/posts/React/setState.html","/posts/React/state_props.html","/posts/React/summary.html","/posts/React/super()_super(props).html","/posts/algorithm/Algorithm.html","/posts/algorithm/BinarySearch.html","/posts/algorithm/Heap.html","/posts/algorithm/Linked%20List.html","/posts/algorithm/bubbleSort.html","/posts/algorithm/design1.html","/posts/algorithm/design2.html","/posts/algorithm/graph.html","/posts/algorithm/insertionSort.html","/posts/algorithm/mergeSort.html","/posts/algorithm/quickSort.html","/posts/algorithm/selectionSort.html","/posts/algorithm/set.html","/posts/algorithm/sort.html","/posts/algorithm/stack_queue.html","/posts/algorithm/structure.html","/posts/algorithm/time_space.html","/posts/algorithm/tree.html","/posts/applet/WebView_jscore.html","/posts/applet/applet.html","/posts/applet/lifecycle.html","/posts/applet/login.html","/posts/applet/navigate.html","/posts/applet/optimization.html","/posts/applet/publish.html","/posts/applet/requestPayment.html","/posts/css/BFC.html","/posts/css/animation.html","/posts/css/box.html","/posts/css/center.html","/posts/css/column_layout.html","/posts/css/css3_features.html","/posts/css/css_performance.html","/posts/css/dp_px_dpr_ppi.html","/posts/css/em_px_rem_vh_vw.html","/posts/css/flexbox.html","/posts/css/grid.html","/posts/css/hide_attributes.html","/posts/css/layout_painting.html","/posts/css/less_12px.html","/posts/css/responsive_layout.html","/posts/css/sass_less_stylus.html","/posts/css/selector.html","/posts/css/single_multi_line.html","/posts/css/triangle.html","/posts/css/visual_scrolling.html","/posts/design/Factory%20%20Pattern.html","/posts/design/Observer%20%20Pattern.html","/posts/design/Proxy%20Pattern.html","/posts/design/Singleton%20Pattern.html","/posts/design/Strategy%20Pattern.html","/posts/design/design.html","/posts/es6/array.html","/posts/es6/decorator.html","/posts/es6/generator.html","/posts/es6/module.html","/posts/es6/proxy.html","/posts/es6/set_map.html","/posts/es6/var_let_const.html","/posts/git/Git.html","/posts/git/HEAD_tree_index.html","/posts/git/Version%20control.html","/posts/git/command.html","/posts/git/conflict.html","/posts/git/fork_clone_branch.html","/posts/git/git%20rebase_%20git%20merge.html","/posts/git/git%20reset_%20git%20revert.html","/posts/git/git%20stash.html","/posts/http/1.0_1.1_2.0.html","/posts/http/CDN.html","/posts/http/DNS.html","/posts/http/GET_POST.html","/posts/http/HTTPS.html","/posts/http/HTTP_HTTPS.html","/posts/http/OSI.html","/posts/http/TCP_IP.html","/posts/http/UDP_TCP.html","/posts/http/WebSocket.html","/posts/http/after_url.html","/posts/http/handshakes_waves.html","/posts/http/headers.html","/posts/http/status.html","/posts/javascript/%20____.html","/posts/javascript/BOM.html","/posts/javascript/Dom.html","/posts/javascript/ajax.html","/posts/javascript/bind_call_apply.html","/posts/javascript/cache.html","/posts/javascript/closure.html","/posts/javascript/context_stack.html","/posts/javascript/continue_to_upload.html","/posts/javascript/copy.html","/posts/javascript/debounce_throttle.html","/posts/javascript/event_Model.html","/posts/javascript/event_agent.html","/posts/javascript/event_loop.html","/posts/javascript/function_cache.html","/posts/javascript/functional_programming.html","/posts/javascript/inherit.html","/posts/javascript/js_data_structure.html","/posts/javascript/loss_accuracy.html","/posts/javascript/memory_leak.html","/posts/javascript/new.html","/posts/javascript/prototype.html","/posts/javascript/pull_up_loading_pull_down_refresh.html","/posts/javascript/regexp.html","/posts/javascript/scope.html","/posts/javascript/security.html","/posts/javascript/single_sign.html","/posts/javascript/string_api.html","/posts/javascript/tail_recursion.html","/posts/javascript/this.html","/posts/javascript/type_conversion.html","/posts/javascript/typeof_instanceof.html","/posts/javascript/visible.html","/posts/javascript/array_api.html","/posts/javascript/data_type.html","/posts/linux/file.html","/posts/linux/linux%20users.html","/posts/linux/linux.html","/posts/linux/redirect_pipe.html","/posts/linux/shell.html","/posts/linux/thread_process.html","/posts/linux/vim.html","/posts/typescript/class.html","/posts/typescript/data_type.html","/posts/typescript/decorator.html","/posts/typescript/enum.html","/posts/typescript/function.html","/posts/typescript/generic.html","/posts/typescript/high%20type.html","/posts/typescript/interface.html","/posts/typescript/namespace_module.html","/posts/typescript/react.html","/posts/typescript/typescript_javascript.html","/posts/typescript/vue.html","/posts/vue/404.html","/posts/vue/axios.html","/posts/vue/axiosCode.html","/posts/vue/communication.html","/posts/vue/components_plugin.html","/posts/vue/cors.html","/posts/vue/data.html","/posts/vue/data_object_add_attrs.html","/posts/vue/diff.html","/posts/vue/directive.html","/posts/vue/error.html","/posts/vue/filter.html","/posts/vue/first_page_time.html","/posts/vue/if_for.html","/posts/vue/keepalive.html","/posts/vue/key.html","/posts/vue/mixin.html","/posts/vue/modifier.html","/posts/vue/new_vue.html","/posts/vue/nexttick.html","/posts/vue/observable.html","/posts/vue/permission.html","/posts/vue/show_if.html","/posts/vue/slot.html","/posts/vue/spa.html","/posts/vue/ssr.html","/posts/vue/structure.html","/posts/vue/vnode.html","/posts/vue/vue.html","/posts/vue/vue3_vue2.html","/posts/vue3/composition.html","/posts/vue3/goal.html","/posts/vue3/modal_component.html","/posts/vue3/performance.html","/posts/vue3/proxy.html","/posts/vue3/treeshaking.html","/posts/webpack/HMR.html","/posts/webpack/Loader.html","/posts/webpack/Loader_Plugin.html","/posts/webpack/Plugin.html","/posts/webpack/Rollup_Parcel_snowpack_Vite.html","/posts/webpack/build_process.html","/posts/webpack/improve_build.html","/posts/webpack/performance.html","/posts/webpack/proxy.html","/posts/webpack/webpack.html","/posts/React/redux.html","/posts/es6/function.html","/posts/es6/object.html","/posts/es6/promise.html","/posts/git/git%20pull%20_git%20fetch.html","/posts/vue/bind.html","/posts/vue/lifecycle.html","/intro.html"]')},4923:(e,i,t)=>{},6653:(e,i,t)=>{t.d(i,{K:()=>a});const a=JSON.parse('{"encrypt":{"config":{"/demo/encrypt.html":{"tokens":["$2b$10$1E8KLF57/g7X33yXV5YbM.THH48qtYwSho2HYRY/xfZVvE.awK3ji"],"hint":"Password: 1234"}}},"author":{"name":"一次元","url":"https://mister-hope.com"},"logo":"https://theme-hope-assets.vuejs.press/logo.svg","repo":"vuepress-theme-hope/vuepress-theme-hope","docsDir":"src","footer":"默认页脚","displayFooter":true,"blog":{"description":"一个前端开发者","intro":"/intro.html","medias":{"Baidu":"https://example.com","BiliBili":"https://example.com","Bitbucket":"https://example.com","Dingding":"https://example.com","Discord":"https://example.com","Dribbble":"https://example.com","Email":"mailto:info@example.com","Evernote":"https://example.com","Facebook":"https://example.com","Flipboard":"https://example.com","Gitee":"https://example.com","GitHub":"https://example.com","Gitlab":"https://example.com","Gmail":"mailto:info@example.com","Instagram":"https://example.com","Lark":"https://example.com","Lines":"https://example.com","Linkedin":"https://example.com","Pinterest":"https://example.com","Pocket":"https://example.com","QQ":"https://example.com","Qzone":"https://example.com","Reddit":"https://example.com","Rss":"https://example.com","Steam":"https://example.com","Twitter":"https://example.com","Wechat":"https://example.com","Weibo":"https://example.com","Whatsapp":"https://example.com","Youtube":"https://example.com","Zhihu":"https://example.com","VuePressThemeHope":{"icon":"https://theme-hope-assets.vuejs.press/logo.svg","link":"https://theme-hope.vuejs.press"}}},"locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","contributors":"贡献者","editLink":"在 GitHub 上编辑此页","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"encryptLocales":{"iconLabel":"文章已加密","placeholder":"输入密码","remember":"记住密码","errorHint":"请输入正确的密码"},"routerLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家"},"navbar":["/",{"text":"博文","icon":"pen-to-square","prefix":"/posts/","children":[{"text":"Javascript系列","icon":"pen-to-square","prefix":"javascript/","children":[{"link":"data_type","text":"1、说说JavaScript中的数据类型？存储上的差别？"},{"link":"array_api","text":"2、数组的常用方法有哪些？"},{"link":"string_api","text":"3、JavaScript字符串的常用方法有哪些？"},{"link":"type_conversion","text":"4、谈谈 JavaScript 中的类型转换机制"},{"link":"== _===","text":"5、== 和 ===区别，分别在什么情况使用"},{"link":"copy","text":"6、深拷贝浅拷贝的区别？如何实现一个深拷贝？"},{"link":"closure","text":"7、说说你对闭包的理解？闭包使用场景"},{"link":"scope","text":"8、说说你对作用域链的理解"},{"link":"prototype","text":"9、JavaScript原型，原型链 ? 有什么特点？"},{"link":"inherit","text":"10、Javascript如何实现继承？"},{"link":"this","text":"11、谈谈this对象的理解"},{"link":"context_stack","text":"12、JavaScript中执行上下文和执行栈是什么？"},{"link":"event_Model","text":"13、说说JavaScript中的事件模型"},{"link":"typeof_instanceof","text":"14、typeof 与 instanceof 区别"},{"link":"event_agent","text":"15、解释下什么是事件代理？应用场景？"},{"link":"new","text":"16、说说new操作符具体干了什么？"},{"link":"ajax","text":"17、ajax原理是什么？如何实现？"},{"link":"bind_call_apply","text":"18、bind、call、apply 区别？如何实现一个bind?"},{"link":"regexp","text":"19、说说你对正则表达式的理解？应用场景？"},{"link":"event_loop","text":"20、说说你对事件循环的理解"},{"link":"Dom","text":"21、DOM常见的操作有哪些？"},{"link":"BOM","text":"22、说说你对BOM的理解，常见的BOM对象你了解哪些？"},{"link":"tail_recursion","text":"23、举例说明你对尾递归的理解，有哪些应用场景"},{"link":"memory_leak","text":"24、说说 JavaScript 中内存泄漏的几种情况？"},{"link":"cache","text":"25、Javascript本地存储的方式有哪些？区别及应用场景？"},{"link":"functional_programming","text":"26、说说你对函数式编程的理解？优缺点？"},{"link":"function_cache","text":"27、Javascript中如何实现函数缓存？函数缓存有哪些应用场景？"},{"link":"loss_accuracy","text":"28、说说 Javascript 数字精度丢失的问题，如何解决？"},{"link":"debounce_throttle","text":"29、什么是防抖和节流？有什么区别？如何实现？"},{"link":"visible","text":"30、如何判断一个元素是否在可视区域中？"},{"link":"continue_to_upload","text":"31、大文件上传如何做断点续传？"},{"link":"pull_up_loading_pull_down_refresh","text":"32、如何实现上拉加载，下拉刷新？"},{"link":"single_sign","text":"33、什么是单点登录？如何实现？"},{"link":"security","text":"34、web常见的攻击方式有哪些？如何防御？"}]},{"text":"Vue面试题","icon":"pen-to-square","prefix":"vue/","children":[{"link":"vue","text":"说说你对vue的理解?"},{"link":"spa","text":"说说你对SPA（单页应用）的理解?"},{"link":"show_if","text":"Vue中的v-show和v-if怎么理解？"},{"link":"new_vue","text":"Vue实例挂载的过程中发生了什么?"},{"link":"lifecycle","text":"说说你对Vue生命周期的理解?"},{"link":"if_for","text":"为什么Vue中的v-if和v-for不建议一起用?"},{"link":"first_page_time","text":"SPA（单页应用）首屏加载速度慢怎么解决？"},{"link":"data","text":"为什么data属性是一个函数而不是一个对象？"},{"link":"data_object_add_attrs","text":"Vue中给对象添加新属性界面不刷新?"},{"link":"components_plugin","text":"Vue中组件和插件有什么区别？"},{"link":"communication","text":"Vue组件间通信方式都有哪些?"},{"link":"bind","text":"说说你对双向绑定的理解?"},{"link":"nexttick","text":"说说你对nexttick的理解?"},{"link":"mixin","text":"说说你对vue的mixin的理解，有什么应用场景？"},{"link":"slot","text":"说说你对slot的理解？slot使用场景有哪些？"},{"link":"observable","text":"Vue.observable你有了解过吗？说说看"},{"link":"key","text":"你知道vue中key的原理吗？说说你对它的理解？"},{"link":"keepalive","text":"怎么缓存当前的组件？缓存后怎么更新？说说你对keep-alive的理解是什么？"},{"link":"modifier","text":"Vue常用的修饰符有哪些？有什么应用场景？"},{"link":"directive","text":"你有写过自定义指令吗？自定义指令的应用场景有哪些？"},{"link":"filter","text":"Vue中的过滤器了解吗？过滤器的应用场景有哪些？"},{"link":"vnode","text":"什么是虚拟DOM？如何实现一个虚拟DOM？说说你的思路"},{"link":"diff","text":"你了解vue的diff算法吗？说说看"},{"link":"axios","text":"Vue项目中有封装过axios吗？主要是封装哪方面的？"},{"link":"axiosCode","text":"你了解axios的原理吗？有看过它的源码吗？"},{"link":"ssr","text":"SSR解决了什么问题？有做过SSR吗？你是怎么做的？"},{"link":"structure","text":"说下你的vue项目的目录结构，如果是大型项目你该怎么划分结构和划分组件呢？"},{"link":"permission","text":"vue要做权限管理该怎么做？如果控制到按钮级别的权限怎么做？"},{"link":"cors","text":"Vue项目中你是如何解决跨域的呢？"},{"link":"404","text":"vue项目本地开发完成后部署到服务器后报404是什么原因呢？"},{"link":"error","text":"你是怎么处理vue项目中的错误的？"},{"link":"vue3_vue2","text":"Vue3有了解过吗？能说说跟Vue2的区别吗？"}]},{"text":"Vue3系列","icon":"pen-to-square","prefix":"vue3/","children":[{"link":"goal","text":"Vue3.0的设计目标是什么？做了哪些优化?"},{"link":"performance","text":"Vue3.0 性能提升主要是通过哪几方面体现的？"},{"link":"proxy","text":"Vue3.0里为什么要用 Proxy API 替代 defineProperty API ？"},{"link":"composition","text":"Vue3.0 所采用的 Composition Api 与 Vue2.x 使用的 Options Api 有什么不同？"},{"link":"treeshaking","text":"说说Vue 3.0中Treeshaking特性？举例说明一下？"},{"link":"modal_component","text":"用Vue3.0 写过组件吗？如果想实现一个 Modal你会怎么设计？"}]},{"text":"ES6系列","icon":"pen-to-square","prefix":"es6/","children":[{"link":"var_let_const","text":"说说var、let、const之间的区别"},{"link":"array","text":"ES6中数组新增了哪些扩展?"},{"link":"object","text":"ES6中对象新增了哪些扩展?"},{"link":"function","text":"ES6中函数新增了哪些扩展?"},{"link":"set_map","text":"ES6中新增的Set、Map两种数据结构怎么理解?"},{"link":"promise","text":"你是怎么理解ES6中 Promise的？使用场景？"},{"link":"generator","text":"怎么理解ES6中 Generator的？使用场景？"},{"link":"proxy","text":"你是怎么理解ES6中Proxy的？使用场景?"},{"link":"module","text":"你是怎么理解ES6中Module的？使用场景？"},{"link":"decorator","text":"你是怎么理解ES6中 Decorator 的？使用场景？"}]},{"text":"CSS系列","icon":"pen-to-square","prefix":"css/","children":[{"link":"box","text":"说说你对盒子模型的理解？"},{"link":"selector","text":"css选择器有哪些？优先级？哪些属性可以继承？"},{"link":"em_px_rem_vh_vw","text":"说说em/px/rem/vh/vw区别？"},{"link":"dp_px_dpr_ppi","text":"说说设备像素、css像素、设备独立像素、dpr、ppi 之间的区别？"},{"link":"hide_attributes","text":"css中，有哪些方式可以隐藏页面元素？区别？"},{"link":"BFC","text":"谈谈你对BFC的理解？"},{"link":"center","text":"元素水平垂直居中的方法有哪些？如果元素不定宽高呢？"},{"link":"column_layout","text":"如何实现两栏布局，右侧自适应？三栏布局中间自适应呢？"},{"link":"flexbox","text":"说说flexbox（弹性盒布局模型）,以及适用场景？"},{"link":"grid","text":"介绍一下grid网格布局"},{"link":"css3_features","text":"CSS3新增了哪些新特性？"},{"link":"animation","text":"css3动画有哪些？"},{"link":"layout_painting","text":"怎么理解回流跟重绘？什么场景下会触发？"},{"link":"responsive_layout","text":"什么是响应式设计？响应式设计的基本原理是什么？如何做？"},{"link":"css_performance","text":"如果要做优化，CSS提高性能的方法有哪些？"},{"link":"single_multi_line","text":"如何实现单行／多行文本溢出的省略样式？"},{"link":"visual_scrolling","text":"如何使用css完成视差滚动效果？"},{"link":"triangle","text":"CSS如何画一个三角形？原理是什么？"},{"link":"less_12px","text":"让Chrome支持小于12px 的文字方式有哪些？区别？"},{"link":"sass_less_stylus","text":"说说对Css预编语言的理解？有哪些区别？"}]},{"text":"React系列","icon":"pen-to-square","prefix":"React/","children":[{"link":"React","text":"说说对React的理解？有哪些特性？"},{"link":"Real DOM_Virtual DOM","text":"说说 Real DOM和 Virtual DOM 的区别？优缺点？"},{"link":"life cycle","text":"说说 React 生命周期有哪些不同阶段？每个阶段对应的方法是？"},{"link":"state_props","text":"state 和 props有什么区别？"},{"link":"super()_super(props)","text":"super()和super(props)有什么区别？"},{"link":"setState","text":"说说 React中的setState执行机制"},{"link":"SyntheticEvent","text":"说说React的事件机制？"},{"link":"Binding events","text":"React事件绑定的方式有哪些？区别？"},{"link":"Building components","text":"React构建组件的方式有哪些？区别？"},{"link":"communication","text":"React中组件之间如何通信？"},{"link":"key","text":"React中的key有什么作用？"},{"link":"React refs","text":"说说对React refs 的理解？应用场景？"},{"link":"class_function component","text":"说说对React中类组件和函数组件的理解？有什么区别？"},{"link":"controlled_Uncontrolled","text":"说说对受控组件和非受控组件的理解？应用场景？"},{"link":"High order components","text":"说说对高阶组件的理解？应用场景？"},{"link":"React Hooks","text":"说说对React Hooks的理解？解决了什么问题？"},{"link":"import css","text":"说说react中引入css的方式有哪几种？区别？"},{"link":"animation","text":"在react中组件间过渡动画如何实现？"},{"link":"redux","text":"说说你对Redux的理解？其工作原理？"},{"link":"Redux Middleware","text":"说说对Redux中间件的理解？常用的中间件有哪些？实现原理？"},{"link":"how to use redux","text":"你在React项目中是如何使用Redux的? 项目结构是如何划分的？"},{"link":"React Router","text":"说说你对React Router的理解？常用的Router组件有哪些？"},{"link":"React Router model","text":"说说React Router有几种模式？实现原理？？"},{"link":"immutable","text":"说说你对immutable的理解？如何应用在react项目中？"},{"link":"render","text":"说说React render方法的原理？在什么时候会被触发？"},{"link":"improve_render","text":"说说你是如何提高组件的渲染效率的？在React中如何避免不必要的render？"},{"link":"diff","text":"说说React diff的原理是什么？"},{"link":"Fiber","text":"说说对Fiber架构的理解？解决了什么问题？"},{"link":"JSX to DOM","text":"说说React Jsx转换成真实DOM过程？"},{"link":"Improve performance","text":"说说 React 性能优化的手段有哪些？"},{"link":"capture error","text":"说说你在React项目是如何捕获错误的？"},{"link":"server side rendering","text":"说说React服务端渲染怎么做？原理是什么？"},{"link":"summary","text":"说说你在使用React 过程中遇到的常见问题？如何解决?"}]},{"text":"TypeScript系列","icon":"pen-to-square","prefix":"typescript/","children":[{"link":"typescript_javascript","text":"说说你对 TypeScript 的理解？与 JavaScript 的区别？"},{"link":"data_type","text":"说说 typescript 的数据类型有哪些？"},{"link":"enum","text":"说说你对 TypeScript 中枚举类型的理解？应用场景？"},{"link":"interface","text":"说说你对 TypeScript 中接口的理解？应用场景？"},{"link":"class","text":"说说你对 TypeScript 中类的理解？应用场景？"},{"link":"function","text":"说说你对 TypeScript 中函数的理解？与 JavaScript 函数的区别？"},{"link":"generic","text":"说说你对 TypeScript 中泛型的理解？应用场景？"},{"link":"high type","text":"说说你对 TypeScript 中高级类型的理解？有哪些？"},{"link":"decorator","text":"说说你对 TypeScript 装饰器的理解？应用场景？"},{"link":"namespace_module","text":"说说对 TypeScript 中命名空间与模块的理解？区别？"},{"link":"react","text":"说说如何在 React 项目中应用 TypeScript？"},{"link":"vue","text":"说说如何在Vue项目中应用TypeScript？"}]},{"text":"Webpack系列","icon":"pen-to-square","prefix":"webpack/","children":[{"link":"webpack","text":"说说你对webpack的理解？解决了什么问题？"},{"link":"build_process","text":"说说webpack的构建流程?"},{"link":"Loader","text":"说说webpack中常见的Loader？解决了什么问题？"},{"link":"Plugin","text":"说说webpack中常见的Plugin？解决了什么问题？"},{"link":"Loader_Plugin","text":"说说Loader和Plugin的区别？编写Loader，Plugin的思路？"},{"link":"HMR","text":"说说webpack的热更新是如何做到的？原理是什么？"},{"link":"proxy","text":"说说webpack proxy工作原理？为什么能解决跨域?"},{"link":"performance","text":"说说如何借助webpack来优化前端性能？"},{"link":"improve_build","text":"如何提高webpack的构建速度？"},{"link":"Rollup_Parcel_snowpack_Vite","text":"与webpack类似的工具还有哪些？区别？"}]},{"text":"HTTP系列","icon":"pen-to-square","prefix":"http/","children":[{"link":"HTTP_HTTPS","text":"什么是HTTP? HTTP 和 HTTPS 的区别?"},{"link":"HTTPS","text":"为什么说HTTPS比HTTP安全? HTTPS是如何保证安全的？"},{"link":"UDP_TCP","text":"如何理解UDP 和 TCP? 区别? 应用场景?"},{"link":"OSI","text":"如何理解OSI七层模型?"},{"link":"TCP_IP","text":"如何理解TCP/IP协议?"},{"link":"DNS","text":"DNS协议 是什么？说说DNS 完整的查询过程?"},{"link":"CDN","text":"如何理解CDN？说说实现原理？"},{"link":"1.0_1.1_2.0","text":"说说 HTTP1.0/1.1/2.0 的区别?"},{"link":"status","text":"说说 HTTP 常见的状态码有哪些，适用场景？"},{"link":"GET_POST","text":"说一下 GET 和 POST 的区别？"},{"link":"headers","text":"说说 HTTP 常见的请求头有哪些? 作用？"},{"link":"after_url","text":"说说地址栏输入 URL 敲下回车后发生了什么？"},{"link":"handshakes_waves","text":"说说TCP为什么需要三次握手和四次挥手？"},{"link":"WebSocket","text":"说说对WebSocket的理解？应用场景？"}]},{"text":"NodeJS系列","icon":"pen-to-square","prefix":"NodeJS/","children":[{"link":"nodejs","text":"说说你对 Node.js 的理解？优缺点？应用场景？"},{"link":"global","text":"说说 Node.js 有哪些全局对象？"},{"link":"process","text":"说说对 Node 中的 process 的理解？有哪些常用方法？"},{"link":"fs","text":"说说对 Node 中的 fs模块的理解? 有哪些常用方法"},{"link":"Buffer","text":"说说对 Node 中的 Buffer 的理解？应用场景？"},{"link":"Stream","text":"说说对 Node 中的 Stream 的理解？应用场景？"},{"link":"EventEmitter","text":"说说Node中的EventEmitter? 如何实现一个EventEmitter?"},{"link":"event_loop","text":"说说对 Nodejs 中的事件循环机制理解?"},{"link":"require_order","text":"说说 Node 文件查找的优先级以及 Require 方法的文件查找策略?"},{"link":"middleware","text":"说说对中间件概念的理解，如何封装 node 中间件？"},{"link":"jwt","text":"如何实现jwt鉴权机制？说说你的思路"},{"link":"file_upload","text":"如何实现文件上传？说说你的思路"},{"link":"paging","text":"如果让你来设计一个分页功能, 你会怎么设计? 前后端如何交互?"},{"link":"performance","text":"Node性能如何进行监控以及优化？"}]},{"text":"GIT版本控制系列","icon":"pen-to-square","prefix":"git/","children":[{"link":"Version control","text":"说说你对版本管理的理解？常用的版本管理工具有哪些？"},{"link":"Git","text":"说说你对Git的理解？"},{"link":"fork_clone_branch","text":"说说Git中 fork, clone,branch这三个概念，有什么区别?"},{"link":"command","text":"说说Git常用的命令有哪些？"},{"link":"HEAD_tree_index","text":"说说Git 中 HEAD、工作树和索引之间的区别？"},{"link":"git pull _git fetch","text":"说说对git pull 和 git fetch 的理解？有什么区别？"},{"link":"git stash","text":"说说你对git stash 的理解？应用场景？"},{"link":"git rebase_ git merge","text":"说说你对git rebase 和 git merge的理解？区别？"},{"link":"conflict","text":"说说 git 发生冲突的场景？如何解决？"},{"link":"git reset_ git revert","text":"说说你对git reset 和 git revert 的理解？区别？"}]},{"text":"操作系统系列","icon":"pen-to-square","prefix":"linux/","children":[{"link":"linux","text":"说说你对操作系统的理解？核心概念有哪些？"},{"link":"thread_process","text":"说说什么是进程？什么是线程？区别？"},{"link":"file","text":"说说 linux系统下 文件操作常用的命令有哪些？"},{"link":"vim","text":"说说 linux 系统下 文本编辑常用的命令有哪些？"},{"link":"linux users","text":"说说你对 linux 用户管理的理解？相关的命令有哪些？"},{"link":"redirect_pipe","text":"说说你对输入输出重定向和管道的理解？应用场景？"},{"link":"shell","text":"说说你对 shell 的理解？常见的命令？"}]},{"text":"算法与数据结构系列","icon":"pen-to-square","prefix":"algorithm/","children":[{"link":"Algorithm","text":"说说你对算法的理解？应用场景？"},{"link":"time_space","text":"说说你对算法中时间复杂度，空间复杂度的理解？如何计算？"},{"link":"structure","text":"说说你对数据结构的理解？有哪些？区别？"},{"link":"stack_queue","text":"说说你对栈、队列的理解？应用场景？"},{"link":"Linked List","text":"说说你对链表的理解？常见的操作有哪些？"},{"link":"set","text":"说说你对集合的理解？常见的操作有哪些？"},{"link":"tree","text":"说说你对树的理解？相关的操作有哪些？"},{"link":"Heap","text":"说说你对堆的理解？如何实现？应用场景？"},{"link":"graph","text":"说说你对图的理解？相关操作有哪些？"},{"link":"sort","text":"说说常见的排序算法有哪些？区别？"},{"link":"bubbleSort","text":"说说你对冒泡排序的理解？如何实现？应用场景？"},{"link":"selectionSort","text":"说说你对选择排序的理解？如何实现？应用场景？"},{"link":"insertionSort","text":"说说你对插入排序的理解？如何实现？应用场景？"},{"link":"mergeSort","text":"说说你对归并排序的理解？如何实现？应用场景？"},{"link":"quickSort","text":"说说你对快速排序的理解？如何实现？应用场景？"},{"link":"BinarySearch","text":"说说你对二分查找的理解？如何实现？应用场景？"},{"link":"design1","text":"说说说你对分而治之、动态规划的理解？区别？"},{"link":"design2","text":"说说你对贪心算法、回溯算法的理解？应用场景？"}]},{"text":"小程序系列","icon":"pen-to-square","prefix":"applet/","children":[{"link":"applet","text":"说说你对微信小程序的理解？优缺点？"},{"link":"lifecycle","text":"说说微信小程序的生命周期函数有哪些？"},{"link":"navigate","text":"说说微信小程序中路由跳转的方式有哪些？区别？"},{"link":"optimization","text":"说说提高微信小程序的应用速度的手段有哪些？"},{"link":"login","text":"说说微信小程序的登录流程？"},{"link":"publish","text":"说说微信小程序的发布流程？"},{"link":"requestPayment","text":"说说微信小程序的支付流程？"},{"link":"WebView_jscore","text":"说说微信小程序的实现原理？"}]},{"text":"设计模式系列","icon":"pen-to-square","prefix":"design/","children":[{"link":"design","text":"说说对设计模式的理解？常见的设计模式有哪些？"},{"link":"Singleton Pattern","text":"说说你对单例模式的理解？如何实现？"},{"link":"Factory  Pattern","text":"说说你对工厂模式的理解？应用场景？"},{"link":"Strategy Pattern","text":"说说你对策略模式的理解？应用场景？"},{"link":"Proxy Pattern","text":"说说你对代理模式的理解？应用场景？"},{"link":"Observer  Pattern","text":"说说你对发布订阅、观察者模式的理解？区别？"}]}]}],"sidebar":{"/":["",{"text":"文章","icon":"book","prefix":"posts/","children":"structure"},"intro"]}}}}')},8123:(e,i,t)=>{t.d(i,{v:()=>a});const a={"/posts/":[{text:"Algorithm",prefix:"algorithm/",collapsible:!0,children:["BinarySearch","bubbleSort","design1","graph","Heap","mergeSort","quickSort","insertionSort","structure","stack_queue","tree","time_space","Algorithm","design2","selectionSort","Linked List","set","sort"]},{text:"Applet",prefix:"applet/",collapsible:!0,children:["applet","navigate","publish","WebView_jscore","requestPayment","lifecycle","login","optimization"]},{text:"Css",prefix:"css/",collapsible:!0,children:["animation","css3_features","hide_attributes","triangle","selector","responsive_layout","grid","center","visual_scrolling","column_layout","single_multi_line","css_performance","layout_painting","less_12px","em_px_rem_vh_vw","flexbox","box","sass_less_stylus","dp_px_dpr_ppi","BFC"]},{text:"Design",prefix:"design/",collapsible:!0,children:["Proxy Pattern","Singleton Pattern","Observer  Pattern","Factory  Pattern","Strategy Pattern","design"]},{text:"Es6",prefix:"es6/",collapsible:!0,children:["array","decorator","generator","module","proxy","set_map","var_let_const","promise","function","object"]},{text:"Git",prefix:"git/",collapsible:!0,children:["conflict","HEAD_tree_index","fork_clone_branch","command","git rebase_ git merge","git reset_ git revert","git stash","Git","Version control","git pull _git fetch"]},{text:"Http",prefix:"http/",collapsible:!0,children:["DNS","HTTPS","HTTP_HTTPS","CDN","OSI","TCP_IP","UDP_TCP","GET_POST","headers","1.0_1.1_2.0","status","handshakes_waves","after_url","WebSocket"]},{text:"Javascript",prefix:"javascript/",collapsible:!0,children:["data_type","array_api","string_api","type_conversion","/posts/javascript/%20____.html","copy","closure","scope","prototype","inherit","this","context_stack","event_Model","typeof_instanceof","event_agent","new","ajax","bind_call_apply","regexp","event_loop","Dom","BOM","tail_recursion","memory_leak","cache","functional_programming","function_cache","loss_accuracy","debounce_throttle","visible","continue_to_upload","pull_up_loading_pull_down_refresh","single_sign","security","js_data_structure"]},{text:"Linux",prefix:"linux/",collapsible:!0,children:["vim","file","thread_process","linux users","shell","linux","redirect_pipe"]},{text:"Node JS",prefix:"NodeJS/",collapsible:!0,children:["performance","jwt","file_upload","paging","require_order","global","EventEmitter","nodejs","Buffer","fs","process","Stream","event_loop","middleware"]},{text:"React",prefix:"React/",collapsible:!0,children:["key","communication","Binding events","Building components","state_props","super()_super(props)","how to use redux","animation","Improve performance","life cycle","setState","Real DOM_Virtual DOM","diff","JSX to DOM","render","React Router model","import css","server side rendering","SyntheticEvent","capture error","summary","immutable","React Router","redux","improve_render","React","Fiber","React Hooks","React refs","class_function component","Redux Middleware","controlled_Uncontrolled","High order components"]},{text:"Typescript",prefix:"typescript/",collapsible:!0,children:["data_type","function","interface","enum","generic","class","high type","typescript_javascript","decorator","react","vue","namespace_module"]},{text:"Vue",prefix:"vue/",collapsible:!0,children:["first_page_time","ssr","if_for","show_if","observable","vue3_vue2","nexttick","filter","components_plugin","new_vue","modifier","communication","permission","cors","axios","404","data","vnode","axiosCode","diff","spa","error","directive","key","data_object_add_attrs","vue","structure","keepalive","slot","mixin","bind","lifecycle"]},{text:"Vue3",prefix:"vue3/",collapsible:!0,children:["composition","performance","goal","proxy","modal_component","treeshaking"]},{text:"Webpack",prefix:"webpack/",collapsible:!0,children:["Rollup_Parcel_snowpack_Vite","improve_build","Loader_Plugin","proxy","Loader","Plugin","build_process","HMR","webpack","performance"]}]}},8164:(e,i,t)=>{t.d(i,{J:()=>s,c:()=>a});const a=JSON.parse('{"/posts/javascript/==%20_===.html":"/posts/javascript/%20____.html"}'),s=Object.fromEntries([["/",{loader:()=>t.e(4470).then(t.bind(t,2668)),meta:{title:"博客主页",icon:"house"}}],["/intro.html",{loader:()=>t.e(3912).then(t.bind(t,3155)),meta:{date:1747842185e3,cover:"/assets/images/cover3.jpg",excerpt:"\n<p>将你的个人介绍和档案放置在此处。</p>\n",readingTime:{minutes:.08,words:23},title:"介绍页",icon:"circle-info",type:"article"}}],["/demo/",{loader:()=>t.e(3320).then(t.bind(t,5351)),meta:{date:1747842185e3,category:["使用指南"],readingTime:{minutes:.07,words:22},title:"主要功能与配置演示",icon:"laptop-code",type:"article"}}],["/demo/disable.html",{loader:()=>t.e(2756).then(t.bind(t,4139)),meta:{date:1747842185e3,category:["使用指南"],tag:["禁用"],excerpt:"<p>你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。</p>\n",readingTime:{minutes:.43,words:128},title:"布局与功能禁用",icon:"gears",order:4,type:"article"}}],["/demo/encrypt.html",{loader:()=>t.e(2581).then(t.bind(t,1314)),meta:{date:1747842185e3,category:["使用指南"],tag:["加密"],isEncrypted:!0,readingTime:{minutes:.51,words:154},title:"密码加密的文章",icon:"lock",type:"article"}}],["/demo/layout.html",{loader:()=>t.e(6216).then(t.bind(t,4087)),meta:{date:1747842185e3,category:["指南"],tag:["布局"],excerpt:'<p>布局包括:</p>\n<ul>\n<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/navbar.html" target="_blank" rel="noopener noreferrer">导航栏</a></li>\n<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/sidebar.html" target="_blank" rel="noopener noreferrer">侧边栏</a></li>\n<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/footer.html" target="_blank" rel="noopener noreferrer">页脚</a></li>\n</ul>',readingTime:{minutes:.53,words:159},title:"布局",icon:"object-group",order:2,type:"article"}}],["/demo/markdown.html",{loader:()=>t.e(8711).then(t.bind(t,5529)),meta:{date:1747842185e3,category:["使用指南"],tag:["Markdown"],excerpt:"<p>VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。</p>\n<p>你需要创建并编写 Markdown，以便 VuePress 可以根据文件结构将它们转换为不同的页面。</p>\n",readingTime:{minutes:3.48,words:1043},title:"Markdown 展示",icon:"fa6-brands:markdown",order:2,type:"article"}}],["/demo/page.html",{loader:()=>t.e(645).then(t.bind(t,5397)),meta:{author:"Ms.Hope",date:15778368e5,category:["使用指南"],tag:["页面配置","使用指南"],sticky:!0,cover:"/assets/images/cover1.jpg",excerpt:"<p><code>more</code> 注释之前的内容被视为文章摘要。</p>\n",readingTime:{minutes:1.77,words:531},title:"页面配置",icon:"file",order:3,type:"article"}}],["/posts/NodeJS/Buffer.html",{loader:()=>t.e(4904).then(t.bind(t,5905)),meta:{date:1747872e6,category:["-NodeJS系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/176d02b0-c69c-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>在<code>Node</code>应用中，需要处理网络协议、操作数据库、处理图片、接收上传文件等，在网络流和文件的操作中，要处理大量二进制数据，而<code>Buffer</code>就是在内存中开辟一片区域（初次初始化为8KB），用来存放二进制数据</p>',readingTime:{minutes:3.61,words:1082},title:"说说对 Node 中的 Buffer 的理解？应用场景？",type:"article"}}],["/posts/NodeJS/EventEmitter.html",{loader:()=>t.e(344).then(t.bind(t,9773)),meta:{date:1747872e6,category:["-NodeJS系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/16b10390-c83a-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>我们了解到，<code>Node </code>采用了事件驱动机制，而<code>EventEmitter </code>就是<code>Node</code>实现事件驱动的基础</p>\n<p>在<code>EventEmitter</code>的基础上，<code>Node </code>几乎所有的模块都继承了这个类，这些模块拥有了自己的事件，可以绑定／触发监听器，实现了异步操作</p>',readingTime:{minutes:3.53,words:1059},title:"说说Node中的EventEmitter? 如何实现一个EventEmitter?",type:"article"}}],["/posts/NodeJS/Stream.html",{loader:()=>t.e(4734).then(t.bind(t,459)),meta:{date:1747872e6,category:["-NodeJS系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/a5df3c60-c76f-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>流（Stream），是一个数据传输手段，是端到端信息交换的一种方式，而且是有顺序的,是逐块读取数据、处理内容，用于顺序读取输入或写入输出</p>\n<p><code>Node.js</code>中很多对象都实现了流，总之它是会冒数据（以 <code>Buffer</code> 为单位）</p>',readingTime:{minutes:3.34,words:1002},title:"说说对 Node 中的 Stream 的理解？应用场景？",type:"article"}}],["/posts/NodeJS/event_loop.html",{loader:()=>t.e(1205).then(t.bind(t,7047)),meta:{date:1747872e6,category:["-NodeJS系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/e0faf3c0-c90e-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>在<a href="https://github.com/febobo/web-interview/issues/73" target="_blank" rel="noopener noreferrer">浏览器事件循环</a>中，我们了解到<code>javascript</code>在浏览器中的事件循环机制，其是根据<code>HTML5</code>定义的规范来实现</p>',readingTime:{minutes:4.25,words:1276},title:"说说对Nodejs中的事件循环机制理解?",type:"article"}}],["/posts/NodeJS/file_upload.html",{loader:()=>t.e(494).then(t.bind(t,5797)),meta:{date:1747872e6,category:["-NodeJS系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/248a5580-ce60-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>文件上传在日常开发中应用很广泛，我们发微博、发微信朋友圈都会用到了图片上传功能</p>\n<p>因为浏览器限制，浏览器不能直接操作文件系统的，需要通过浏览器所暴露出来的统一接口，由用户主动授权发起来访问文件动作，然后读取文件内容进指定内存里，最后执行提交请求操作，将内存里的文件内容数据上传到服务端，服务端解析前端传来的数据信息后存入文件里</p>',readingTime:{minutes:3.15,words:944},title:"如何实现文件上传？说说你的思路",type:"article"}}],["/posts/NodeJS/fs.html",{loader:()=>t.e(8977).then(t.bind(t,5608)),meta:{date:1747872e6,category:["-NodeJS系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/a141e5c0-c46a-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>fs（filesystem），该模块提供本地文件的读写能力，基本上是<code>POSIX</code>文件操作命令的简单包装</p>\n<p>可以说，所有与文件的操作都是通过<code>fs</code>核心模块实现</p>\n<p>导入模块如下：</p>',readingTime:{minutes:5.1,words:1531},title:"说说对 Node 中的 fs模块的理解? 有哪些常用方法",type:"article"}}],["/posts/NodeJS/global.html",{loader:()=>t.e(5141).then(t.bind(t,4509)),meta:{date:1747872e6,category:["-NodeJS系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/79c7b100-c2a3-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>在浏览器 <code>JavaScript</code> 中，通常<code> window</code> 是全局对象， 而 <code>Nodejs </code>中的全局对象是 <code>global</code></p>\n<p>在<code>NodeJS</code>里，是不可能在最外层定义一个变量，因为所有的用户代码都是当前模块的，只在当前模块里可用，但可以通过<code>exports</code>对象的使用将其传递给模块外部</p>',readingTime:{minutes:2.98,words:893},title:"说说 Node. js 有哪些全局对象？",type:"article"}}],["/posts/NodeJS/jwt.html",{loader:()=>t.e(8461).then(t.bind(t,8788)),meta:{date:1747872e6,category:["-NodeJS系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/efff62b0-cd88-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>JWT（JSON Web Token），本质就是一个字符串书写规范，如下图，作用是用来在用户和服务器之间传递安全可靠的信息</p>\n<figure><img src="https://static.vue-js.com/052904c0-cd89-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',readingTime:{minutes:4.23,words:1269},title:"如何实现jwt鉴权机制？说说你的思路",type:"article"}}],["/posts/NodeJS/middleware.html",{loader:()=>t.e(2326).then(t.bind(t,1338)),meta:{date:1747872e6,category:["-NodeJS系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/614ae480-cce4-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>中间件（Middleware）是介于应用系统和系统软件之间的一类软件，它使用系统软件所提供的基础服务（功能），衔接网络上应用系统的各个部分或不同的应用，能够达到资源共享、功能共享的目的</p>\n<p>在<code>NodeJS</code>中，中间件主要是指封装<code>http</code>请求细节处理的方法</p>',readingTime:{minutes:4.05,words:1215},title:"说说对中间件概念的理解，如何封装 node 中间件？",type:"article"}}],["/posts/NodeJS/nodejs.html",{loader:()=>t.e(2021).then(t.bind(t,4004)),meta:{date:1747872e6,category:["-NodeJS系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/b565d240-c1e6-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p><code>Node.js</code> 是一个开源与跨平台的 <code>JavaScript</code> 运行时环境</p>\n<p>在浏览器外运行 V8 JavaScript 引擎（Google Chrome 的内核），利用事件驱动、非阻塞和异步输入输出模型等技术提高性能</p>',readingTime:{minutes:2.52,words:756},title:"说说你对Node.js 的理解？优缺点？应用场景？",type:"article"}}],["/posts/NodeJS/paging.html",{loader:()=>t.e(710).then(t.bind(t,1634)),meta:{date:1747872e6,category:["-NodeJS系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/54b0a390-cf14-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>在我们做数据查询的时候，如果数据量很大，比如几万条数据，放在一个页面显示的话显然不友好，这时候就需要采用分页显示的形式，如每次只显示10条数据</p>\n<figure><img src="https://static.vue-js.com/6070e8c0-cf14-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',readingTime:{minutes:2.5,words:750},title:"如果让你来设计一个分页功能, 你会怎么设计? 前后端如何交互?",type:"article"}}],["/posts/NodeJS/performance.html",{loader:()=>t.e(1618).then(t.bind(t,7886)),meta:{date:1747872e6,category:["-NodeJS系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/bb37dae0-d179-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、 是什么</h2>\n<p><code>Node</code>作为一门服务端语言，性能方面尤为重要，其衡量指标一般有如下：</p>\n<ul>\n<li>CPU</li>\n<li>内存</li>\n<li>I/O</li>\n<li>网络</li>\n</ul>\n<h3>CPU</h3>',readingTime:{minutes:4.7,words:1411},title:"Node性能如何进行监控以及优化？",type:"article"}}],["/posts/NodeJS/process.html",{loader:()=>t.e(8341).then(t.bind(t,3641)),meta:{date:1747872e6,category:["-NodeJS系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/4f7866b0-c2b2-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p><code>process</code> 对象是一个全局变量，提供了有关当前 <code>Node.js </code>进程的信息并对其进行控制，作为一个全局变量</p>\n<p>我们都知道，进程计算机系统进行资源分配和调度的基本单位，是操作系统结构的基础，是线程的容器</p>',readingTime:{minutes:2.93,words:879},title:"说说对 Node 中的 process 的理解？有哪些常用方法？",type:"article"}}],["/posts/NodeJS/require_order.html",{loader:()=>t.e(2612).then(t.bind(t,2992)),meta:{date:1747872e6,category:["-NodeJS系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/15913530-c9ba-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、模块规范</h2>\n<p><code>NodeJS</code>对<code>CommonJS</code>进行了支持和实现，让我们在开发<code>node</code>的过程中可以方便的进行模块化开发：</p>\n<ul>\n<li>在Node中每一个js文件都是一个单独的模块</li>\n<li>模块中包括CommonJS规范的核心变量：exports、module.exports、require</li>\n<li>通过上述变量进行模块化开发</li>\n</ul>',readingTime:{minutes:3.19,words:958},title:"说说 Node 文件查找的优先级以及 Require 方法的文件查找策略?",type:"article"}}],["/posts/React/Binding%20events.html",{loader:()=>t.e(5022).then(t.bind(t,3793)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/e21f5560-d8fa-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>在<code>react</code>应用中，事件名都是用小驼峰格式进行书写，例如<code>onclick</code>要改写成<code>onClick</code></p>\n<p>最简单的事件绑定如下：</p>\n<div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ShowAlert</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B"> React</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Component</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  showAlert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Hi"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">button</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic"> onClick</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">{</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">showAlert</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;show&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">button</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:2.22,words:666},title:"React事件绑定的方式有哪些？区别？",type:"article"}}],["/posts/React/Building%20components.html",{loader:()=>t.e(1638).then(t.bind(t,8962)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/04355cb0-da10-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>组件就是把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式</p>\n<p>在<code>React</code>中，一个类、一个函数都可以视为一个组件</p>\n<p>在<a href="https://mp.weixin.qq.com/s/Wi0r38LBopsyQ9HesMID0g" target="_blank" rel="noopener noreferrer">之前文章</a>中，我们了解到组件所存在的优势：</p>',readingTime:{minutes:3,words:901},title:"React构建组件的方式有哪些？区别？",type:"article"}}],["/posts/React/Fiber.html",{loader:()=>t.e(840).then(t.bind(t,8832)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/554da6d0-ed24-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、问题</h2>\n<p><code>JavaScript </code>引擎和页面渲染引擎两个线程是互斥的，当其中一个线程执行时，另一个线程只能挂起等待</p>\n<p>如果 <code>JavaScript</code> 线程长时间地占用了主线程，那么渲染层面的更新就不得不长时间地等待，界面长时间不更新，会导致页面响应度变差，用户可能会感觉到卡顿</p>',readingTime:{minutes:4.81,words:1442},title:"说说对Fiber架构的理解？解决了什么问题？",type:"article"}}],["/posts/React/High%20order%20components.html",{loader:()=>t.e(5706).then(t.bind(t,9805)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/c8901850-e197-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>高阶函数（Higher-order function），至少满足下列一个条件的函数</p>\n<ul>\n<li>接受一个或多个函数作为输入</li>\n<li>输出一个函数</li>\n</ul>\n<p>在<code>React</code>中，高阶组件即接受一个或多个组件作为参数并且返回一个组件，本质也就是一个函数，并不是一个组件</p>',readingTime:{minutes:3.33,words:998},title:"说说对高阶组件的理解？应用场景?",type:"article"}}],["/posts/React/Improve%20performance.html",{loader:()=>t.e(8896).then(t.bind(t,7521)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/a9e83b00-f270-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p><code>React</code>凭借<code>virtual DOM</code>和<code>diff</code>算法拥有高效的性能，但是某些情况下，性能明显可以进一步提高</p>\n<p>在前面文章中，我们了解到类组件通过调用<code>setState</code>方法， 就会导致<code>render</code>，父组件一旦发生<code>render</code>渲染，子组件一定也会执行<code>render</code>渲染</p>',readingTime:{minutes:4.21,words:1262},title:"说说 React 性能优化的手段有哪些？",type:"article"}}],["/posts/React/JSX%20to%20DOM.html",{loader:()=>t.e(2182).then(t.bind(t,8401)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/1d340620-f00a-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p><code>react</code>通过将组件编写的<code>JSX</code>映射到屏幕，以及组件中的状态发生了变化之后 <code>React</code>会将这些「变化」更新到屏幕上</p>\n<p>在前面文章了解中，<code>JSX</code>通过<code>babel</code>最终转化成<code>React.createElement</code>这种形式，例如：</p>',readingTime:{minutes:3.62,words:1087},title:"说说React Jsx转换成真实DOM过程？",type:"article"}}],["/posts/React/React%20Hooks.html",{loader:()=>t.e(6117).then(t.bind(t,7994)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/8d357c50-e12e-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p><code>Hook</code> 是 React 16.8 的新增特性。它可以让你在不编写 <code>class</code> 的情况下使用 <code>state</code> 以及其他的 <code>React</code> 特性</p>\n<p>至于为什么引入<code>hook</code>，官方给出的动机是解决长时间使用和维护<code>react</code>过程中常遇到的问题，例如：</p>',readingTime:{minutes:4.4,words:1320},title:"说说对React Hooks的理解？解决了什么问题？",type:"article"}}],["/posts/React/React%20Router%20model.html",{loader:()=>t.e(5765).then(t.bind(t,1473)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/065f7a80-e978-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>在单页应用中，一个<code>web</code>项目只有一个<code>html</code>页面，一旦页面加载完成之后，就不用因为用户的操作而进行页面的重新加载或者跳转，其特性如下：</p>\n<ul>\n<li>\n<p>改变 url 且不让浏览器像服务器发送请求</p>\n</li>\n<li>\n<p>在不刷新页面的前提下动态改变浏览器地址栏中的URL地址</p>\n</li>\n</ul>',readingTime:{minutes:2.47,words:742},title:"说说React Router有几种模式？实现原理？",type:"article"}}],["/posts/React/React%20Router.html",{loader:()=>t.e(664).then(t.bind(t,4613)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/c6635670-e8ac-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p><code>react-router</code>等前端路由的原理大致相同，可以实现无刷新的条件下切换显示不同的页面</p>\n<p>路由的本质就是页面的<code>URL</code>发生改变时，页面的显示结果可以根据<code>URL</code>的变化而变化，但是页面不会刷新</p>',readingTime:{minutes:4.29,words:1288},title:"说说你对React Router的理解？常用的Router组件有哪些？",type:"article"}}],["/posts/React/React%20refs.html",{loader:()=>t.e(1903).then(t.bind(t,1154)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/25162040-de02-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p><code>Refs</code> 在计算机中称为弹性文件系统（英语：Resilient File System，简称ReFS）</p>\n<p><code>React</code> 中的 <code>Refs</code>提供了一种方式，允许我们访问 <code>DOM </code>节点或在 <code>render </code>方法中创建的 <code>React </code>元素</p>',readingTime:{minutes:2.8,words:840},title:"说说对React refs 的理解？应用场景？",type:"article"}}],["/posts/React/React.html",{loader:()=>t.e(1377).then(t.bind(t,6355)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/671f5a90-d265-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>React，用于构建用户界面的 JavaScript 库，只提供了 UI 层面的解决方案</p>\n<p>遵循组件设计模式、声明式编程范式和函数式编程概念，以使前端应用程序更高效</p>\n<p>使用虚拟 <code>DOM</code> 来有效地操作 <code>DOM</code>，遵循从高阶组件到低阶组件的单向数据流</p>',readingTime:{minutes:2.75,words:826},title:"说说对 React 的理解？有哪些特性？",type:"article"}}],["/posts/React/Real%20DOM_Virtual%20DOM.html",{loader:()=>t.e(7660).then(t.bind(t,3342)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/f1d36350-d302-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>Real DOM，真实 <code>DOM</code>，意思为文档对象模型，是一个结构化文本的抽象，在页面渲染出的每一个结点都是一个真实 <code>DOM</code> 结构，如下：</p>\n<figure><img src="https://static.vue-js.com/fc7ba8d0-d302-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',readingTime:{minutes:3.22,words:966},title:"说说 Real DOM 和 Virtual DOM 的区别？优缺点？",type:"article"}}],["/posts/React/Redux%20Middleware.html",{loader:()=>t.e(3238).then(t.bind(t,1420)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/4520bbd0-e699-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>中间件（Middleware）是介于应用系统和系统软件之间的一类软件，它使用系统软件所提供的基础服务（功能），衔接网络上应用系统的各个部分或不同的应用，能够达到资源共享、功能共享的目的</p>\n<p>在上篇文章中，了解到了<code>Redux</code>整个工作流程，当<code>action</code>发出之后，<code>reducer</code>立即算出<code>state</code>，整个过程是一个同步的操作</p>',readingTime:{minutes:2.67,words:802},title:"说说对Redux中间件的理解？常用的中间件有哪些？实现原理？",type:"article"}}],["/posts/React/SyntheticEvent.html",{loader:()=>t.e(3301).then(t.bind(t,1213)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/f054f080-d86f-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p><code>React</code>基于浏览器的事件机制自身实现了一套事件机制，包括事件注册、事件的合成、事件冒泡、事件派发等</p>\n<p>在<code>React</code>中这套事件机制被称之为合成事件</p>\n<h4>合成事件（SyntheticEvent）</h4>',readingTime:{minutes:3.68,words:1104},title:"说说React的事件机制？",type:"article"}}],["/posts/React/animation.html",{loader:()=>t.e(2180).then(t.bind(t,8251)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/294f1e00-e4b0-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>在日常开发中，页面切换时的转场动画是比较基础的一个场景</p>\n<p>当一个组件在显示与消失过程中存在过渡动画，可以很好的增加用户的体验</p>\n<p>在<code>react</code>中实现过渡动画效果会有很多种选择，如<code>react-transition-group</code>，<code>react-motion</code>，<code>Animated</code>，以及原生的<code>CSS</code>都能完成切换动画</p>',readingTime:{minutes:3.42,words:1027},title:"在react中组件间过渡动画如何实现？",type:"article"}}],["/posts/React/capture%20error.html",{loader:()=>t.e(8438).then(t.bind(t,6605)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/8db1b5c0-f288-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>错误在我们日常编写代码是非常常见的</p>\n<p>举个例子，在<code>react</code>项目中去编写组件内<code>JavaScript</code>代码错误会导致 <code>React</code> 的内部状态被破坏，导致整个应用崩溃，这是不应该出现的现象</p>',readingTime:{minutes:2.36,words:709},title:"说说你在React项目是如何捕获错误的？",type:"article"}}],["/posts/React/class_function%20component.html",{loader:()=>t.e(8274).then(t.bind(t,2678)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/6c196d80-de39-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、类组件</h2>\n<p>类组件，顾名思义，也就是通过使用<code>ES6</code>类的编写形式去编写组件，该类必须继承<code>React.Component</code></p>\n<p>如果想要访问父组件传递过来的参数，可通过<code>this.props</code>的方式去访问</p>',readingTime:{minutes:3.45,words:1034},title:"说说对React中类组件和函数组件的理解？有什么区别？",type:"article"}}],["/posts/React/communication.html",{loader:()=>t.e(14).then(t.bind(t,3245)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/767a2800-dc9f-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>我们将组件间通信可以拆分为两个词：</p>\n<ul>\n<li>组件</li>\n<li>通信</li>\n</ul>\n<p>回顾<a href="https://mp.weixin.qq.com/s/uFjMz6BByA5eknBgkvgdeQ" target="_blank" rel="noopener noreferrer">Vue系列</a>的文章，组件是<code>vue</code>中最强大的功能之一，同样组件化是<code>React</code>的核心思想</p>',readingTime:{minutes:3.31,words:994},title:"React中组件之间如何通信？",type:"article"}}],["/posts/React/controlled_Uncontrolled.html",{loader:()=>t.e(4072).then(t.bind(t,117)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/12990fd0-df2f-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、受控组件</h2>\n<p>受控组件，简单来讲，就是受我们控制的组件，组件的状态全程响应外部数据</p>\n<p>举个简单的例子：</p>\n<div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> TestComponent</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B"> React</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Component</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">    super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">state</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">username</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> \'lindaidai\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> };</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> () {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">input</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"username"</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">{</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">username</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> /&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:1.83,words:549},title:"说说对受控组件和非受控组件的理解？应用场景？",type:"article"}}],["/posts/React/diff.html",{loader:()=>t.e(4411).then(t.bind(t,4054)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/967e6150-ec91-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>跟<code>Vue</code>一致，<code>React</code>通过引入<code>Virtual DOM</code>的概念，极大地避免无效的<code>Dom</code>操作，使我们的页面的构建效率提到了极大的提升</p>\n<p>而<code>diff</code>算法就是更高效地通过对比新旧<code>Virtual DOM</code>来找出真正的<code>Dom</code>变化之处</p>',readingTime:{minutes:4.27,words:1280},title:"说说React diff的原理是什么？",type:"article"}}],["/posts/React/how%20to%20use%20redux.html",{loader:()=>t.e(9346).then(t.bind(t,3098)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/31a4aff0-e7dc-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、背景</h2>\n<p>在前面文章了解中，我们了解到<code>redux</code>是用于数据状态管理，而<code>react</code>是一个视图层面的库</p>\n<p>如果将两者连接在一起，可以使用官方推荐<code>react-redux</code>库，其具有高效且灵活的特性</p>',readingTime:{minutes:2.84,words:852},title:"你在React项目中是如何使用Redux的? 项目结构是如何划分的？",type:"article"}}],["/posts/React/immutable.html",{loader:()=>t.e(6426).then(t.bind(t,4656)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/797e9470-ea3f-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>Immutable，不可改变的，在计算机中，即指一旦创建，就不能再被更改的数据</p>\n<p>对 <code>Immutable </code>对象的任何修改或添加删除操作都会返回一个新的 <code>Immutable </code>对象</p>\n',readingTime:{minutes:3.34,words:1002},title:"说说你对immutable的理解？如何应用在react项目中？",type:"article"}}],["/posts/React/import%20css.html",{loader:()=>t.e(6646).then(t.bind(t,4994)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/7d825230-e217-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>组件式开发选择合适的<code>css</code>解决方案尤为重要</p>\n<p>通常会遵循以下规则：</p>\n<ul>\n<li>可以编写局部css，不会随意污染其他组件内的原生；</li>\n<li>可以编写动态的css，可以获取当前组件的一些状态，根据状态的变化生成不同的css样式；</li>\n<li>支持所有的css特性：伪类、动画、媒体查询等；</li>\n<li>编写起来简洁方便、最好符合一贯的css风格特点</li>\n</ul>',readingTime:{minutes:4.29,words:1287},title:"说说react中引入css的方式有哪几种？区别？",type:"article"}}],["/posts/React/improve_render.html",{loader:()=>t.e(2129).then(t.bind(t,8167)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/de2d7e20-ecf8-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p><code>react</code> 基于虚拟 <code>DOM</code> 和高效 <code>Diff </code>算法的完美配合，实现了对 <code>DOM </code>最小粒度的更新，大多数情况下，<code>React </code>对 <code>DOM </code>的渲染效率足以我们的业务日常</p>',readingTime:{minutes:2.78,words:835},title:"说说你是如何提高组件的渲染效率的？在React中如何避免不必要的render？",type:"article"}}],["/posts/React/key.html",{loader:()=>t.e(7473).then(t.bind(t,8576)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/31677360-dd69-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>首先，先给出<code>react</code>组件中进行列表渲染的一个示例：</p>\n<div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> data</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">id</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> \'abc\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> },</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">id</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> \'def\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> },</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">id</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> \'ghi\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> },</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">id</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> \'jkl\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">];</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> ListItem</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">li</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD">{</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">li</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> List</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">ul</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD">      {</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">ListItem</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">{</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">ListItem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      ))</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD">}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">ul</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  );</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:2.41,words:724},title:"React中的key有什么作用？",type:"article"}}],["/posts/React/life%20cycle.html",{loader:()=>t.e(4288).then(t.bind(t,1619)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/5c717010-d373-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>在<a href="https://mp.weixin.qq.com/s?__biz=MzU1OTgxNDQ1Nw==&amp;mid=2247484176&amp;idx=1&amp;sn=5623421ed2678046ed9e438aadf6e26f&amp;chksm=fc10c146cb67485015f24f7e9f5862c4c685fc33485fe30e1b375a534b4031978439c554e0c0&amp;scene=178&amp;cur_album_id=1711105826272116736#rd" target="_blank" rel="noopener noreferrer">以前文章</a>中，我们了解到生命周期定义</p>',readingTime:{minutes:3.67,words:1102},title:"说说 React 生命周期有哪些不同阶段？每个阶段对应的方法是？",type:"article"}}],["/posts/React/redux.html",{loader:()=>t.e(448).then(t.bind(t,3278)),meta:{date:1747998214e3,excerpt:'\n<figure><img src="https://static.vue-js.com/52394be0-e2a5-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p><code>React</code>是用于构建用户界面的，帮助我们解决渲染<code>DOM</code>的过程</p>\n<p>而在整个应用中会存在很多个组件，每个组件的<code>state</code>是由自身进行管理，包括组件定义自身的<code>state</code>、组件之间的通信通过<code>props</code>传递、使用<code>Context</code>实现数据共享</p>',readingTime:{minutes:3.68,words:1103},title:"说说你对Redux的理解？其工作原理？",type:"article"}}],["/posts/React/render.html",{loader:()=>t.e(3604).then(t.bind(t,4641)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/3d855230-ec6d-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、原理</h2>\n<p>首先，<code>render</code>函数在<code>react</code>中有两种形式：</p>\n<p>在类组件中，指的是<code>render</code>方法：</p>\n<div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Foo</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B"> React</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Component</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">h1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; Foo &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">h1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:2.78,words:835},title:"说说React render方法的原理？在什么时候会被触发？",type:"article"}}],["/posts/React/server%20side%20rendering.html",{loader:()=>t.e(7180).then(t.bind(t,1665)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/8c93cbe0-f3f7-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>在<a href="https://mp.weixin.qq.com/s/vvUtC_aAprUjoJRnfFjA1A" target="_blank" rel="noopener noreferrer">SSR中</a>，我们了解到<code>Server-Side Rendering</code> ，简称<code>SSR</code>，意为服务端渲染</p>',readingTime:{minutes:5.75,words:1726},title:"说说React服务端渲染怎么做？原理是什么？",type:"article"}}],["/posts/React/setState.html",{loader:()=>t.e(5849).then(t.bind(t,9457)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/3acb8ca0-d825-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>一个组件的显示形态可以由数据状态和外部参数所决定，而数据状态就是<code>state</code></p>\n<p>当需要修改里面的值的状态需要通过调用<code>setState</code>来改变，从而达到更新组件内部数据的作用</p>\n<p>如下例子：</p>',readingTime:{minutes:2.99,words:896},title:"说说 React中的setState执行机制",type:"article"}}],["/posts/React/state_props.html",{loader:()=>t.e(5194).then(t.bind(t,1400)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/7f272780-d440-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、state</h2>\n<p>一个组件的显示形态可以由数据状态和外部参数所决定，而数据状态就是 <code>state</code>，一般在 <code>constructor</code> 中初始化</p>\n<p>当需要修改里面的值的状态需要通过调用 <code>setState</code> 来改变，从而达到更新组件内部数据的作用，并且重新调用组件 <code>render</code> 方法，如下面的例子：</p>',readingTime:{minutes:1.93,words:580},title:"state 和 props 有什么区别？",type:"article"}}],["/posts/React/summary.html",{loader:()=>t.e(9454).then(t.bind(t,1893)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/7efcd400-f47d-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、前言</h2>\n<p>在使用<code>react</code>开发项目过程中，每个人或多或少都会遇到一些"奇怪"的问题，本质上都是我们对其理解的不够透彻</p>\n<p><code>react</code> 系列，33个工作日，33次凌晨还在亮起的台灯，到今天就圆满画上句号了，比心</p>',readingTime:{minutes:7.83,words:2349},title:"说说你在使用React 过程中遇到的常见问题？如何解决?",type:"article"}}],["/posts/React/super()_super(props).html",{loader:()=>t.e(9377).then(t.bind(t,6532)),meta:{date:1747872e6,category:["-React系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/618abaf0-d71c-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、ES6 类</h2>\n<p>在 <code>ES6</code> 中，通过 <code>extends</code> 关键字实现类的继承，方式如下：</p>\n<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> sup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  printName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> sub</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> sup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">    super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// super代表的事父类的构造函数</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">age</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  printAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> jack</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> sub</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"jack"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">jack</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">printName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//输出 : jack</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">jack</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">printAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//输出 : 20</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:2.31,words:692},title:"super() 和 super(props) 有什么区别？",type:"article"}}],["/posts/algorithm/Algorithm.html",{loader:()=>t.e(4309).then(t.bind(t,4035)),meta:{date:1747872e6,category:["算法与数据结构"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/eca03690-1620-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>算法（Algorithm）是指解题方案的准确而完整的描述，是一系列解决问题的清晰指令，算法代表着用系统的方法描述解决问题的策略机制</p>\n<p>也就是说，能够对一定规范的输入，在有限时间内获得所要求的输出</p>\n<p>如果一个算法有缺陷，或不适合于某个问题，执行这个算法将不会解决这个问题</p>',readingTime:{minutes:3.02,words:906},title:"说说你对算法的理解？应用场景？",type:"article"}}],["/posts/algorithm/BinarySearch.html",{loader:()=>t.e(1455).then(t.bind(t,4751)),meta:{date:1747872e6,category:["算法与数据结构"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/d43ca230-2987-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>在计算机科学中，二分查找算法，也称折半搜索算法，是一种在有序数组中查找某一特定元素的搜索算法</p>\n<p>想要应用二分查找法，则这一堆数应有如下特性：</p>\n<ul>\n<li>存储在数组中</li>\n<li>有序排序</li>\n</ul>\n<p>搜索过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜索过程结束</p>',readingTime:{minutes:4.25,words:1274},title:"说说你对二分查找的理解？如何实现？应用场景？",type:"article"}}],["/posts/algorithm/Heap.html",{loader:()=>t.e(9932).then(t.bind(t,8655)),meta:{date:1747872e6,category:["算法与数据结构"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/dd12c700-1ed7-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>堆(Heap)是计算机科学中一类特殊的数据结构的统称</p>\n<p>堆通常是一个可以被看做一棵完全二叉树的数组对象，如下图：</p>\n<figure><img src="https://static.vue-js.com/ea0fd1f0-1ed7-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',readingTime:{minutes:3.7,words:1109},title:"说说你对堆的理解？如何实现？应用场景？",type:"article"}}],["/posts/algorithm/Linked%20List.html",{loader:()=>t.e(3567).then(t.bind(t,3169)),meta:{date:1747872e6,category:["算法与数据结构"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/d6638dd0-1c76-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>链表（Linked List）是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的，由一系列结点（链表中每一个元素称为结点）组成</p>\n<p>每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域</p>',readingTime:{minutes:4.16,words:1249},title:"说说你对链表的理解？常见的操作有哪些？",type:"article"}}],["/posts/algorithm/bubbleSort.html",{loader:()=>t.e(375).then(t.bind(t,2112)),meta:{date:1747872e6,category:["算法与数据结构"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/6f5e0850-2652-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法</p>\n<p>冒泡排序的思想就是在每次遍历一遍未排序的数列之后，将一个数据元素浮上去（也就是排好了一个数据）</p>\n<p>如同碳酸饮料中二氧化碳的气泡最终会上浮到顶端一样，故名“冒泡排序”</p>',readingTime:{minutes:4.3,words:1289},title:"说说你对冒泡排序的理解？如何实现？应用场景？",type:"article"}}],["/posts/algorithm/design1.html",{loader:()=>t.e(7989).then(t.bind(t,6338)),meta:{date:1747872e6,category:["算法与数据结构"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/298437b0-29d0-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、分而治之</h2>\n<p>分而治之是算法设计中的一种方法，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并</p>\n<p>关于分而治之的实现，都会经历三个步骤：</p>\n<ul>\n<li>分解：将原问题分解为若干个规模较小，相对独立，与原问题形式相同的子问题</li>\n<li>解决：若子问题规模较小且易于解决时，则直接解。否则，递归地解决各子问题</li>\n<li>合并：将各子问题的解合并为原问题的解</li>\n</ul>',readingTime:{minutes:3.84,words:1152},title:"说说你对分而治之、动态规划的理解？区别？",type:"article"}}],["/posts/algorithm/design2.html",{loader:()=>t.e(3040).then(t.bind(t,3327)),meta:{date:1747872e6,category:["算法与数据结构"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/1d49eae0-2e8e-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、贪心算法</h2>\n<p>贪心算法，又称贪婪算法，是算法设计中的一种思想</p>\n<p>其期待每一个阶段都是局部最优的选择，从而达到全局最优，但是结果并不一定是最优的</p>\n<p>举个零钱兑换的例子，如果你有1元、2元、5元的钱币数张，用于兑换一定的金额，但是要求兑换的钱币张数最少</p>',readingTime:{minutes:3.39,words:1018},title:"说说你对贪心算法、回溯算法的理解？应用场景？",type:"article"}}],["/posts/algorithm/graph.html",{loader:()=>t.e(9e3).then(t.bind(t,7522)),meta:{date:1747872e6,category:["算法与数据结构"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/7876c2f0-2059-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>在计算机科学中，图是一种抽象的数据类型，在图中的数据元素通常称为结点，<code>V</code>是所有顶点的集合，<code>E</code>是所有边的集合</p>\n<p>如果两个顶点<code>v</code>,<code> w</code>，只能由<code>v</code>向<code>w</code>，而不能由<code>w</code>向<code>v</code>，那么我们就把这种情况叫做一个从 <code>v</code> 到 <code>w</code> 的有向边。<code>v </code>也被称做初始点，<code>w</code>也被称为终点。这种图就被称做有向图</p>',readingTime:{minutes:3.31,words:993},title:"说说你对图的理解？相关操作有哪些？",type:"article"}}],["/posts/algorithm/insertionSort.html",{loader:()=>t.e(8205).then(t.bind(t,5812)),meta:{date:1747872e6,category:["算法与数据结构"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/912adc10-267f-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>插入排序（Insertion Sort），一般也被称为直接插入排序。对于少量元素的排序，它是一个有效、简单的算法</p>\n<p>其主要的实现思想是将数据按照一定的顺序一个一个的插入到有序的表中，最终得到的序列就是已经排序好的数据</p>\n<p>插入排序的工作方式像许多人排序一手扑克牌，开始时，我们的左手为空并且桌子上的牌面向下</p>',readingTime:{minutes:2.7,words:811},title:"说说你对插入排序的理解？如何实现？应用场景？",type:"article"}}],["/posts/algorithm/mergeSort.html",{loader:()=>t.e(436).then(t.bind(t,324)),meta:{date:1747872e6,category:["算法与数据结构"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/fa1d5720-26ac-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>归并排序（Merge Sort）是建立归并操作上的一种有效，稳定的排序算法，该算法是采用分治法的一个非常典型的应用</p>\n<p>将已有序的子序列合并，得到完全有序的序列，即先使每个子序列有序，再使子序列段间有序</p>\n<p>例如对于含有 <code>n</code> 个记录的无序表，首先默认表中每个记录各为一个有序表（只不过表的长度都为 1）</p>',readingTime:{minutes:3.99,words:1198},title:"说说你对归并排序的理解？如何实现？应用场景？",type:"article"}}],["/posts/algorithm/quickSort.html",{loader:()=>t.e(2503).then(t.bind(t,5643)),meta:{date:1747872e6,category:["算法与数据结构"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/bafae570-268a-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>快速排序（Quick Sort）算法是在冒泡排序的基础上进行改进的一种算法，从名字上看就知道该排序算法的特点是快、效率高，是处理大数据最快的排序算法之一</p>\n<p>实现的基本思想是：通过一次排序将整个无序表分成相互独立的两部分，其中一部分中的数据都比另一部分中包含的数据的值小</p>',readingTime:{minutes:2.94,words:882},title:"说说你对快速排序的理解？如何实现？应用场景？",type:"article"}}],["/posts/algorithm/selectionSort.html",{loader:()=>t.e(5322).then(t.bind(t,7730)),meta:{date:1747872e6,category:["算法与数据结构"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/50a05ed0-2671-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>选择排序（Selection sort）是一种简单直观的排序算法，无论什么数据进去都是 <code>O(n²) </code>的时间复杂度，所以用到它的时候，数据规模越小越好</p>\n<p>其基本思想是：首先在未排序的数列中找到最小(or最大)元素，然后将其存放到数列的起始位置</p>',readingTime:{minutes:2.71,words:814},title:"说说你对选择排序的理解？如何实现？应用场景？",type:"article"}}],["/posts/algorithm/set.html",{loader:()=>t.e(3288).then(t.bind(t,7187)),meta:{date:1747872e6,category:["算法与数据结构"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/e3de7810-1d36-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>集合（Set），指具有某种特定性质的事物的总体，里面的每一项内容称作元素</p>\n<p>在数学中，我们经常会遇到集合的概念：</p>\n<ul>\n<li>有限集合：例如一个班集所有的同学构成的集合</li>\n<li>无限集合：例如全体自然数集合</li>\n</ul>',readingTime:{minutes:2.56,words:768},title:"说说你对集合的理解？常见的操作有哪些？",type:"article"}}],["/posts/algorithm/sort.html",{loader:()=>t.e(4102).then(t.bind(t,7256)),meta:{date:1747872e6,category:["算法与数据结构"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/63eb7920-211c-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>排序是程序开发中非常常见的操作，对一组任意的数据元素经过排序操作后，就可以把他们变成一组一定规则排序的有序序列</p>\n<p>排序算法属于算法中的一种，而且是覆盖范围极小的一种，彻底掌握排序算法对程序开发是有很大的帮助的</p>\n<p>对与排序算法的好坏衡量，主要是从时间复杂度、空间复杂度、稳定性</p>',readingTime:{minutes:4.7,words:1410},title:"说说常见的排序算法有哪些？区别？",type:"article"}}],["/posts/algorithm/stack_queue.html",{loader:()=>t.e(2880).then(t.bind(t,4810)),meta:{date:1747872e6,category:["算法与数据结构"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/bc57f530-1b99-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、栈</h2>\n<p>栈（stack）又名堆栈，它是一种运算受限的线性表，限定仅在表尾进行插入和删除操作的线性表</p>\n<p>表尾这一端被称为栈顶，相反地另一端被称为栈底，向栈顶插入元素被称为进栈、入栈、压栈，从栈顶删除元素又称作出栈</p>\n<p>所以其按照先进后出的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据，具有记忆作用</p>',readingTime:{minutes:4.39,words:1316},title:"说说你对栈、队列的理解？应用场景？",type:"article"}}],["/posts/algorithm/structure.html",{loader:()=>t.e(5501).then(t.bind(t,131)),meta:{date:1747872e6,category:["算法与数据结构"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/3d87b540-1aa6-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>数据结构是计算机存储、组织数据的方式，是指相互之间存在一种或多种特定关系的数据元素的集合</p>\n<p>前面讲到，一个程序 = 算法 + 数据结构，数据结构是实现算法的基础，选择合适的数据结构可以带来更高的运行或者存储效率</p>\n<p>数据元素相互之间的关系称为结构，根据数据元素之间关系的不同特性，通常有如下四类基本的结构：</p>',readingTime:{minutes:3.52,words:1056},title:"说说你对数据结构的理解？有哪些？区别？",type:"article"}}],["/posts/algorithm/time_space.html",{loader:()=>t.e(9398).then(t.bind(t,5042)),meta:{date:1747872e6,category:["算法与数据结构"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/07fd4050-16fc-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、前言</h2>\n<p>算法（Algorithm）是指用来操作数据、解决程序问题的一组方法。对于同一个问题，使用不同的算法，也许最终得到的结果是一样的，但在过程中消耗的资源和时间却会有很大的区别</p>\n<p>衡量不同算法之间的优劣主要是通过<strong>时间</strong>和<strong>空间</strong>两个维度去考量：</p>',readingTime:{minutes:4.61,words:1383},title:"说说你对算法中时间复杂度，空间复杂度的理解？如何计算？",type:"article"}}],["/posts/algorithm/tree.html",{loader:()=>t.e(4666).then(t.bind(t,6467)),meta:{date:1747872e6,category:["算法与数据结构"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/5a7616f0-1dfe-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>在计算机领域，树形数据结构是一类重要的非线性数据结构，可以表示数据之间一对多的关系。以树与二叉树最为常用，直观看来，树是以分支关系定义的层次结构</p>\n<p>二叉树满足以下两个条件：</p>\n<ul>\n<li>本身是有序树</li>\n<li>树中包含的各个结点的不能超过 2，即只能是 0、1 或者 2</li>\n</ul>',readingTime:{minutes:3.47,words:1041},title:"说说你对树的理解？相关的操作有哪些？",type:"article"}}],["/posts/applet/WebView_jscore.html",{loader:()=>t.e(6995).then(t.bind(t,7853)),meta:{date:1747872e6,category:["微信小程序"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/4407cb60-3722-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、背景</h2>\n<p>网页开发，渲染线程和脚本是互斥的，这也是为什么长时间的脚本运行可能会导致页面失去响应的原因，本质就是我们常说的 <code>JS</code> 是单线程的</p>\n<p>而在小程序中，选择了 <code>Hybrid</code> 的渲染方式，将视图层和逻辑层是分开的，双线程同时运行，视图层的界面使用 <code>WebView</code> 进行渲染，逻辑层运行在 <code>JSCore</code> 中</p>',readingTime:{minutes:3.48,words:1045},title:"说说微信小程序的实现原理？",type:"article"}}],["/posts/applet/applet.html",{loader:()=>t.e(6019).then(t.bind(t,3369)),meta:{date:1747872e6,category:["微信小程序"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/be367c80-300e-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>2017年，微信正式推出了小程序，允许外部开发者在微信内部运行自己的代码，开展业务</p>\n<p>截至目前，小程序已经成为国内前端的一个重要业务，跟 <code>Web</code> 和手机 <code>App</code> 有着同等的重要性</p>',readingTime:{minutes:3.08,words:923},title:"说说你对微信小程序的理解？优缺点？",type:"article"}}],["/posts/applet/lifecycle.html",{loader:()=>t.e(4427).then(t.bind(t,5202)),meta:{date:1747872e6,category:["微信小程序"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/1df64890-30e0-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>跟<code>vue</code>、<code>react</code>框架一样，微信小程序框架也存在生命周期，实质也是一堆会在特定时期执行的函数</p>\n<p>小程序中，生命周期主要分成了三部分：</p>\n<ul>\n<li>应用的生命周期</li>\n<li>页面的生命周期</li>\n<li>组件的生命周期</li>\n</ul>',readingTime:{minutes:4.2,words:1260},title:"说说微信小程序的生命周期函数有哪些？",type:"article"}}],["/posts/applet/login.html",{loader:()=>t.e(8974).then(t.bind(t,1254)),meta:{date:1747872e6,category:["微信小程序"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/aa3ccbd0-3428-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、背景</h2>\n<p>传统的<code>web</code>开发实现登陆功能，一般的做法是输入账号密码、或者输入手机号及短信验证码进行登录</p>\n<p>服务端校验用户信息通过之后，下发一个代表登录态的 <code>token</code> 给客户端，以便进行后续的交互,每当<code>token</code>过期，用户都需要重新登录</p>',readingTime:{minutes:2.9,words:871},title:"说说微信小程序的登录流程？",type:"article"}}],["/posts/applet/navigate.html",{loader:()=>t.e(5788).then(t.bind(t,3784)),meta:{date:1747872e6,category:["微信小程序"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/52bd3820-31a5-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>微信小程序拥有<code>web</code>网页和<code>Application</code>共同的特征，我们的页面都不是孤立存在的，而是通过和其他页面进行交互，来共同完成系统的功能</p>\n<p>在微信小程序中，每个页面可以看成是一个<code> pageModel</code>，<code>pageModel </code>全部以栈的形式进行管理</p>',readingTime:{minutes:2.57,words:770},title:"说说微信小程序中路由跳转的方式有哪些？区别？",type:"article"}}],["/posts/applet/optimization.html",{loader:()=>t.e(110).then(t.bind(t,7018)),meta:{date:1747872e6,category:["微信小程序"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/f606d530-3278-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>小程序启动会常常遇到如下图场景：</p>\n<figure><img src="https://static.vue-js.com/03941230-3279-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',readingTime:{minutes:3.23,words:970},title:"说说提高微信小程序的应用速度的手段有哪些？",type:"article"}}],["/posts/applet/publish.html",{loader:()=>t.e(7404).then(t.bind(t,7103)),meta:{date:1747872e6,category:["微信小程序"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/d5cccdf0-3652-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、背景</h2>\n<p>在中大型的公司里，人员的分工非常仔细，一般会有不同岗位角色的员工同时参与同一个小程序项目。为此，小程序平台设计了不同的权限管理使得项目管理者可以更加高效管理整个团队的协同工作</p>\n<figure><img src="https://static.vue-js.com/e76aff50-3652-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',readingTime:{minutes:2.21,words:664},title:"说说微信小程序的发布流程？",type:"article"}}],["/posts/applet/requestPayment.html",{loader:()=>t.e(378).then(t.bind(t,1350)),meta:{date:1747872e6,category:["微信小程序"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/2266fff0-34a0-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、前言</h2>\n<p>微信小程序为电商类小程序，提供了非常完善、优秀、安全的支付功能</p>\n<p>在小程序内可调用微信的<code>API</code>完成支付功能，方便、快捷</p>\n<p>场景如下图所示：</p>\n<figure><img src="https://static.vue-js.com/6e0cff40-34a0-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',readingTime:{minutes:2.45,words:736},title:"说说微信小程序的支付流程？",type:"article"}}],["/posts/css/BFC.html",{loader:()=>t.e(5107).then(t.bind(t,9796)),meta:{date:1747872e6,category:["css"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/c3d68290-9511-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>我们在页面布局的时候，经常出现以下情况：</p>\n<ul>\n<li>这个元素高度怎么没了？</li>\n<li>这两栏布局怎么没法自适应？</li>\n<li>这两个元素的间距怎么有点奇怪的样子？</li>\n<li>......</li>\n</ul>\n<p>原因是元素之间相互的影响，导致了意料之外的情况，这里就涉及到<code>BFC</code>概念</p>',readingTime:{minutes:3.47,words:1040},title:"谈谈你对BFC的理解？",type:"article"}}],["/posts/css/animation.html",{loader:()=>t.e(3416).then(t.bind(t,6465)),meta:{date:1747872e6,category:["css"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/d12e2380-9c0a-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>CSS动画（CSS Animations）是为层叠样式表建议的允许可扩展标记语言（XML）元素使用CSS的动画的模块</p>\n<p>即指元素从一种样式逐渐过渡为另一种样式的过程</p>\n<p>常见的动画效果有很多，如平移、旋转、缩放等等，复杂动画则是多个简单动画的组合</p>',readingTime:{minutes:3.67,words:1100},title:"css3动画有哪些？",type:"article"}}],["/posts/css/box.html",{loader:()=>t.e(8263).then(t.bind(t,9624)),meta:{date:1747872e6,category:["css"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/8d0e9ca0-8f9b-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>当对一个文档进行布局（layout）的时候，浏览器的渲染引擎会根据标准之一的 CSS 基础框盒模型（CSS basic box model），将所有元素表示为一个个矩形的盒子（box）</p>\n<p>一个盒子由四个部分组成：<code>content</code>、<code>padding</code>、<code>border</code>、<code>margin</code></p>',readingTime:{minutes:2.34,words:702},title:"说说你对盒子模型的理解?",type:"article"}}],["/posts/css/center.html",{loader:()=>t.e(9629).then(t.bind(t,1264)),meta:{date:1747872e6,category:["css"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/7b64c8d0-95f9-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、背景</h2>\n<p>在开发中经常遇到这个问题，即让某个元素的内容在水平和垂直方向上都居中，内容不仅限于文字，可能是图片或其他元素</p>\n<p>居中是一个非常基础但又是非常重要的应用场景，实现居中的方法存在很多，可以将这些方法分成两个大类：</p>\n<ul>\n<li>居中元素（子元素）的宽高已知</li>\n<li>居中元素宽高未知</li>\n</ul>',readingTime:{minutes:4.18,words:1253},title:"元素水平垂直居中的方法有哪些？如果元素不定宽高呢？",type:"article"}}],["/posts/css/column_layout.html",{loader:()=>t.e(7931).then(t.bind(t,2197)),meta:{date:1747872e6,category:["css"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/f335d400-976e-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、背景</h2>\n<p>在日常布局中，无论是两栏布局还是三栏布局，使用的频率都非常高</p>\n<h3>两栏布局</h3>\n<p>两栏布局实现效果就是将页面分割成左右宽度不等的两列，宽度较小的列设置为固定宽度，剩余宽度由另一列撑满，</p>\n<p>比如 <code>Ant Design</code> 文档，蓝色区域为主要内容布局容器，侧边栏为次要内容布局容器</p>',readingTime:{minutes:5.54,words:1661},title:"如何实现两栏布局，右侧自适应？三栏布局中间自适应呢？",type:"article"}}],["/posts/css/css3_features.html",{loader:()=>t.e(984).then(t.bind(t,1816)),meta:{date:1747872e6,category:["css"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/d58f6df0-9b5e-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p><code>css</code>，即层叠样式表（Cascading Style Sheets）的简称，是一种标记语言，由浏览器解释执行用来使页面变得更美观</p>\n<p><code>css3</code>是<code>css</code>的最新标准，是向后兼容的，<code>CSS1/2 </code>的特性在<code> CSS3</code> 里都是可以使用的</p>',readingTime:{minutes:4.87,words:1460},title:"CSS3新增了哪些新特性？",type:"article"}}],["/posts/css/css_performance.html",{loader:()=>t.e(1448).then(t.bind(t,5589)),meta:{date:1747872e6,category:["css"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/c071c820-9fa3-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、前言</h2>\n<p>每一个网页都离不开<code>css</code>，但是很多人又认为，<code>css</code>主要是用来完成页面布局的，像一些细节或者优化，就不需要怎么考虑，实际上这种想法是不正确的</p>\n<p>作为页面渲染和内容展现的重要环节，<code>css</code>影响着用户对整个网站的第一体验</p>',readingTime:{minutes:4.02,words:1205},title:"如果要做优化，CSS提高性能的方法有哪些？",type:"article"}}],["/posts/css/dp_px_dpr_ppi.html",{loader:()=>t.e(5782).then(t.bind(t,8443)),meta:{date:1747872e6,category:["css"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/c4d9bfd0-91f2-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、背景</h2>\n<p>在<code>css</code>中我们通常使用px作为单位，在PC浏览器中<code>css</code>的1个像素都是对应着电脑屏幕的1个物理像素</p>\n<p>这会造成一种错觉，我们会认为<code>css</code>中的像素就是设备的物理像素</p>',readingTime:{minutes:5.02,words:1507},title:"说说设备像素、css像素、设备独立像素、dpr、ppi 之间的区别？",type:"article"}}],["/posts/css/em_px_rem_vh_vw.html",{loader:()=>t.e(2353).then(t.bind(t,7252)),meta:{date:1747872e6,category:["css"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/51b036e0-9131-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、介绍</h2>\n<p>传统的项目开发中，我们只会用到<code>px</code>、<code>%</code>、<code>em</code>这几个单位，它可以适用于大部分的项目开发，且拥有比较良好的兼容性</p>\n<p>从<code>CSS3</code>开始，浏览器对计量单位的支持又提升到了另外一个境界，新增了<code>rem</code>、<code>vh</code>、<code>vw</code>、<code>vm</code>等一些新的计量单位</p>',readingTime:{minutes:3.58,words:1073},title:"说说em/px/rem/vh/vw区别?",type:"article"}}],["/posts/css/flexbox.html",{loader:()=>t.e(9462).then(t.bind(t,7517)),meta:{date:1747872e6,category:["css"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/ef25b0a0-9837-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p><code>Flexible Box</code> 简称 <code>flex</code>，意为”弹性布局”，可以简便、完整、响应式地实现各种页面布局</p>\n<p>采用Flex布局的元素，称为<code>flex</code>容器<code>container</code></p>',readingTime:{minutes:5.86,words:1757},title:"说说flexbox（弹性盒布局模型）,以及适用场景？",type:"article"}}],["/posts/css/grid.html",{loader:()=>t.e(60).then(t.bind(t,5769)),meta:{date:1747872e6,category:["css"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/4d73e3d0-9a94-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p><code>Grid</code> 布局即网格布局，是一个二维的布局方式，由纵横相交的两组网格线形成的框架性布局结构，能够同时处理行与列</p>\n<p>擅长将一个页面划分为几个主要区域，以及定义这些区域的大小、位置、层次等关系</p>\n<figure><img src="https://static.vue-js.com/59680a40-9a94-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',readingTime:{minutes:7.57,words:2272},title:"介绍一下grid网格布局",type:"article"}}],["/posts/css/hide_attributes.html",{loader:()=>t.e(2730).then(t.bind(t,2931)),meta:{date:1747872e6,category:["css"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/ccf96f50-929a-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、前言</h2>\n<p>在平常的样式排版中，我们经常遇到将某个模块隐藏的场景</p>\n<p>通过<code>css</code>隐藏元素的方法有很多种，它们看起来实现的效果是一致的</p>\n<p>但实际上每一种方法都有一丝轻微的不同，这些不同决定了在一些特定场合下使用哪一种方法</p>',readingTime:{minutes:3.1,words:930},title:"css中，有哪些方式可以隐藏页面元素？区别?",type:"article"}}],["/posts/css/layout_painting.html",{loader:()=>t.e(85).then(t.bind(t,3459)),meta:{date:1747872e6,category:["css"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/1ed5d340-9cdc-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>在<code>HTML</code>中，每个元素都可以理解成一个盒子，在浏览器解析过程中，会涉及到回流与重绘：</p>\n<ul>\n<li>\n<p>回流：布局引擎会根据各种样式计算每个盒子在页面上的大小与位置</p>\n</li>\n<li>\n<p>重绘：当计算好盒模型的位置、大小及其他属性后，浏览器根据每个盒子特性进行绘制</p>\n</li>\n</ul>',readingTime:{minutes:5.69,words:1708},title:"怎么理解回流跟重绘？什么场景下会触发？",type:"article"}}],["/posts/css/less_12px.html",{loader:()=>t.e(8951).then(t.bind(t,4183)),meta:{date:1747872e6,category:["css"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/62945fd0-a334-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、背景</h2>\n<p>Chrome 中文版浏览器会默认设定页面的最小字号是12px，英文版没有限制</p>\n<p>原由 Chrome 团队认为汉字小于12px就会增加识别难度</p>\n<ul>\n<li>中文版浏览器</li>\n</ul>\n<p>与网页语言无关，取决于用户在Chrome的设置里（chrome://settings/languages）把哪种语言设置为默认显示语言</p>',readingTime:{minutes:2.87,words:861},title:"让Chrome支持小于12px 的文字方式有哪些？区别？",type:"article"}}],["/posts/css/responsive_layout.html",{loader:()=>t.e(6271).then(t.bind(t,9770)),meta:{date:1747872e6,category:["css"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/a57e2e40-9dba-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>响应式网站设计（Responsive Web design）是一种网络页面设计布局，页面的设计与开发应当根据用户行为以及设备环境(系统平台、屏幕尺寸、屏幕定向等)进行相应的响应和调整</p>\n<p>描述响应式界面最著名的一句话就是“Content is like water”</p>',readingTime:{minutes:5.25,words:1576},title:"什么是响应式设计？响应式设计的基本原理是什么？如何做？",type:"article"}}],["/posts/css/sass_less_stylus.html",{loader:()=>t.e(8469).then(t.bind(t,4099)),meta:{date:1747872e6,category:["css"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/81cca1c0-a42c-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p><code>Css</code> 作为一门标记性语言，语法相对简单，对使用者的要求较低，但同时也带来一些问题</p>\n<p>需要书写大量看似没有逻辑的代码，不方便维护及扩展，不利于复用，尤其对于非前端开发工程师来讲，往往会因为缺少 <code>Css</code> 编写经验而很难写出组织良好且易于维护的 <code>Css</code> 代码</p>',readingTime:{minutes:4.91,words:1474},title:"说说对Css预编语言的理解？有哪些区别?",type:"article"}}],["/posts/css/selector.html",{loader:()=>t.e(4781).then(t.bind(t,1083)),meta:{date:1747872e6,category:["css"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/f7dcd330-8fe1-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、选择器</h2>\n<p>CSS选择器是CSS规则的第一部分</p>\n<p>它是元素和其他部分组合起来告诉浏览器哪个HTML元素应当是被选为应用规则中的CSS属性值的方式</p>\n<p>选择器所选择的元素，叫做“选择器的对象”</p>\n<p>我们从一个<code>Html</code>结构开始</p>',readingTime:{minutes:5.53,words:1660},title:"css选择器有哪些？优先级？哪些属性可以继承？",type:"article"}}],["/posts/css/single_multi_line.html",{loader:()=>t.e(9547).then(t.bind(t,595)),meta:{date:1747872e6,category:["css"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/ada8d840-a0e9-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、前言</h2>\n<p>在日常开发展示页面，如果一段文本的数量过长，受制于元素宽度的因素，有可能不能完全显示，为了提高用户的使用体验，这个时候就需要我们把溢出的文本显示成省略号</p>\n<p>对于文本的溢出，我们可以分成两种形式：</p>\n<ul>\n<li>单行文本溢出</li>\n<li>多行文本溢出</li>\n</ul>',readingTime:{minutes:4.43,words:1330},title:"如何实现单行／多行文本溢出的省略样式？",type:"article"}}],["/posts/css/triangle.html",{loader:()=>t.e(2632).then(t.bind(t,3218)),meta:{date:1747872e6,category:["css"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/bd310120-a279-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、前言</h2>\n<p>在前端开发的时候，我们有时候会需要用到一个三角形的形状，比如地址选择或者播放器里面播放按钮</p>\n<figure><img src="https://static.vue-js.com/d6d8ff60-a279-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',readingTime:{minutes:3.12,words:935},title:"CSS如何画一个三角形？原理是什么？",type:"article"}}],["/posts/css/visual_scrolling.html",{loader:()=>t.e(8560).then(t.bind(t,4629)),meta:{date:1747872e6,category:["css"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/1b2d33e0-a18d-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>视差滚动（Parallax Scrolling）是指多层背景以不同的速度移动，形成立体的运动效果，带来非常出色的视觉体验</p>\n<p>我们可以把网页解刨成：背景层、内容层、悬浮层</p>\n<figure><img src="https://static.vue-js.com/57c942a0-a1cc-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',readingTime:{minutes:2.83,words:848},title:"如何使用css完成视差滚动效果?",type:"article"}}],["/posts/design/Factory%20%20Pattern.html",{loader:()=>t.e(9997).then(t.bind(t,5648)),meta:{date:1747872e6,category:["-设计模式"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/27a84d10-3bea-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>工厂模式是用来创建对象的一种最常用的设计模式，不暴露创建对象的具体逻辑，而是将将逻辑封装在一个函数中，那么这个函数就可以被视为一个工厂</p>\n<p>其就像工厂一样重复的产生类似的产品，工厂模式只需要我们传入正确的参数，就能生产类似的产品</p>\n<p>举个例子：</p>',readingTime:{minutes:5.64,words:1691},title:"说说你对工厂模式的理解？应用场景？",type:"article"}}],["/posts/design/Observer%20%20Pattern.html",{loader:()=>t.e(5313).then(t.bind(t,9627)),meta:{date:1747872e6,category:["-设计模式"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/342739f0-3fb1-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、观察者模式</h2>\n<p>观察者模式定义了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知，并自动更新</p>\n<p>观察者模式属于行为型模式，行为型模式关注的是对象之间的通讯，观察者模式就是观察者和被观察者之间的通讯</p>\n<figure><img src="https://static.vue-js.com/d3a80020-3f7c-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',readingTime:{minutes:4,words:1201},title:"说说你对发布订阅、观察者模式的理解？区别？",type:"article"}}],["/posts/design/Proxy%20Pattern.html",{loader:()=>t.e(1215).then(t.bind(t,2928)),meta:{date:1747872e6,category:["-设计模式"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/899a6ef0-3d6a-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>代理模式（Proxy Pattern）是为一个对象提供一个代用品或占位符，以便控制对它的访问</p>\n<p>代理模式的关键是，当客户不方便直接访问一个对象或者不满足需要时，提供一个替身对象来控制这个对象的访问，客户实际上访问的是替身对象</p>\n<figure><img src="https://static.vue-js.com/951c99b0-3d6a-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',readingTime:{minutes:4.29,words:1287},title:"说说你对代理模式的理解？应用场景？",type:"article"}}],["/posts/design/Singleton%20Pattern.html",{loader:()=>t.e(3562).then(t.bind(t,5072)),meta:{date:1747872e6,category:["-设计模式"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/7df7d830-3b2b-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>单例模式（Singleton Pattern）：创建型模式，提供了一种创建对象的最佳方式，这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建</p>\n<p>在应用程序运行期间，单例模式只会在全局作用域下创建一次实例对象，让所有需要调用的地方都共享这一单例对象，如下图所示：</p>',readingTime:{minutes:2.72,words:816},title:"说说你对单例模式的理解？如何实现？",type:"article"}}],["/posts/design/Strategy%20Pattern.html",{loader:()=>t.e(1790).then(t.bind(t,1559)),meta:{date:1747872e6,category:["-设计模式"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/e4aad950-3cb2-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>策略模式（Strategy Pattern）指的是定义一系列的算法，把它们一个个封装起来，目的就是将算法的使用与算法的实现分离开来</p>\n<p>一个基于策略模式的程序至少由两部分组成：</p>\n<ul>\n<li>策略类，策略类封装了具体的算法，并负责具体的计算过程</li>\n<li>环境类Context，Context 接受客户的请求，随后 把请求委托给某一个策略类</li>\n</ul>',readingTime:{minutes:3.76,words:1129},title:"说说你对策略模式的理解？应用场景？",type:"article"}}],["/posts/design/design.html",{loader:()=>t.e(4443).then(t.bind(t,1589)),meta:{date:1747872e6,category:["-设计模式"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/065bc170-37ce-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>在软件工程中，设计模式是对软件设计中普遍存在的各种问题所提出的解决方案</p>\n<p>设计模式并不直接用来完成代码的编写，而是描述在各种不同情况下，要怎么解决问题的一种方案</p>\n<p>设计模式能使不稳定依赖于相对稳定、具体依赖于相对抽象，避免会引起麻烦的紧耦合，以增强软件设计面对并适应变化的能力</p>',readingTime:{minutes:4.15,words:1245},title:"说说对设计模式的理解？常见的设计模式有哪些？",type:"article"}}],["/posts/es6/array.html",{loader:()=>t.e(8350).then(t.bind(t,2222)),meta:{date:1747872e6,category:["-es6系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/a156b8d0-53c5-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、扩展运算符的应用</h2>\n<p>ES6通过扩展元素符<code>...</code>，好比 <code>rest</code> 参数的逆运算，将一个数组转为用逗号分隔的参数序列</p>\n<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">])</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 1 2 3</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 1 2 3 4 5</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">...</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">querySelectorAll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'div\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)]</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;]</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:5.81,words:1742},title:"ES6中数组新增了哪些扩展？",type:"article"}}],["/posts/es6/decorator.html",{loader:()=>t.e(2114).then(t.bind(t,6147)),meta:{date:1747872e6,category:["-es6系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/7df43560-5ba5-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、介绍</h2>\n<p>Decorator，即装饰器，从名字上很容易让我们联想到装饰者模式</p>\n<p>简单来讲，装饰者模式就是一种在不改变原类和使用继承的情况下，动态地扩展对象功能的设计理论。</p>\n<p><code>ES6</code>中<code>Decorator</code>功能亦如此，其本质也不是什么高大上的结构，就是一个普通的函数，用于扩展类属性和类方法</p>',readingTime:{minutes:3.5,words:1050},title:"你是怎么理解ES6中 Decorator 的？使用场景？",type:"article"}}],["/posts/es6/function.html",{loader:()=>t.e(8935).then(t.bind(t,246)),meta:{date:1747998214e3,excerpt:'\n<figure><img src="https://static.vue-js.com/54a04a10-5569-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、参数</h2>\n<p><code>ES6</code>允许为函数的参数设置默认值</p>\n<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">y</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> \'World\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'Hello\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// Hello World</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'Hello\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'China\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// Hello China</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'Hello\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// Hello</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:3.46,words:1039},title:"面试官：对象新增了哪些扩展？",type:"article"}}],["/posts/es6/generator.html",{loader:()=>t.e(4490).then(t.bind(t,2877)),meta:{date:1747872e6,category:["-es6系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/7db499b0-5947-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、介绍</h2>\n<p>Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同</p>\n<p>回顾下上文提到的解决异步的手段：</p>\n<ul>\n<li>回调函数</li>\n<li>promise</li>\n</ul>\n<p>那么，上文我们提到<code>promsie</code>已经是一种比较流行的解决异步方案，那么为什么还出现<code>Generator</code>？甚至<code>async/await</code>呢？</p>',readingTime:{minutes:5.12,words:1536},title:"你是怎么理解ES6中 Generator的？使用场景？",type:"article"}}],["/posts/es6/module.html",{loader:()=>t.e(287).then(t.bind(t,9534)),meta:{date:1747872e6,category:["-es6系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/b6d19be0-5adb-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、介绍</h2>\n<p>模块，（Module），是能够单独命名并独立地完成一定功能的程序语句的<strong>集合（即程序代码和数据结构的集合体）</strong>。</p>\n<p>两个基本的特征：外部特征和内部特征</p>\n<ul>\n<li>\n<p>外部特征是指模块跟外部环境联系的接口（即其他模块或程序调用该模块的方式，包括有输入输出参数、引用的全局变量）和模块的功能</p>\n</li>\n<li>\n<p>内部特征是指模块的内部环境具有的特点（即该模块的局部数据和程序代码）</p>\n</li>\n</ul>',readingTime:{minutes:6.24,words:1871},title:"你是怎么理解ES6中Module的？使用场景？",type:"article"}}],["/posts/es6/object.html",{loader:()=>t.e(9488).then(t.bind(t,4884)),meta:{date:1747998214e3,excerpt:'\n<figure><img src="https://static.vue-js.com/4da4dd40-5427-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、属性的简写</h2>\n<p>ES6中，当对象键名与对应值名相等的时候，可以进行简写</p>\n<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> baz</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">foo</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 等同于</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> baz</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:4.28,words:1285},title:"面试官：对象新增了哪些扩展？",type:"article"}}],["/posts/es6/promise.html",{loader:()=>t.e(4686).then(t.bind(t,2752)),meta:{date:1747998214e3,excerpt:'\n<figure><img src="https://static.vue-js.com/f033b160-5811-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、介绍</h2>\n<p><code>Promise </code>，译为承诺，是异步编程的一种解决方案，比传统的解决方案（回调函数）更加合理和更加强大</p>\n<p>在以往我们如果处理多层异步操作，我们往往会像下面那样编写我们的代码</p>\n<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">doSomething</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  doSomethingElse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">newResult</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    doThirdThing</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">newResult</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">finalResult</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">      console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'得到最终结果: \'</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> finalResult</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">failureCallback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">failureCallback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">failureCallback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:6.43,words:1929},title:"面试官：你是怎么理解ES6中 Promise的？使用场景？",type:"article"}}],["/posts/es6/proxy.html",{loader:()=>t.e(2287).then(t.bind(t,4153)),meta:{date:1747872e6,category:["-es6系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/6f656e30-59f5-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、介绍</h2>\n<p><strong>定义：</strong> 用于定义基本操作的自定义行为</p>\n<p><strong>本质：</strong> 修改的是程序默认形为，就形同于在编程语言层面上做修改，属于元编程<code>(meta programming)</code></p>',readingTime:{minutes:6.06,words:1817},title:"你是怎么理解ES6中Proxy的？使用场景?",type:"article"}}],["/posts/es6/set_map.html",{loader:()=>t.e(8370).then(t.bind(t,524)),meta:{date:1747872e6,category:["-es6系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/2b947d00-560c-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<p>如果要用一句来描述，我们可以说</p>\n<p><code>Set</code>是一种叫做集合的数据结构，<code>Map</code>是一种叫做字典的数据结构</p>\n<p>什么是集合？什么又是字典？</p>\n<ul>\n<li>\n<p>集合<br>\n是由一堆无序的、相关联的，且不重复的内存结构【数学中称为元素】组成的组合</p>\n</li>\n<li>\n<p>字典<br>\n是一些元素的集合。每个元素有一个称作key 的域，不同元素的key 各不相同</p>\n</li>\n</ul>',readingTime:{minutes:6.22,words:1865},title:"你是怎么理解ES6新增Set、Map两种数据结构的？",type:"article"}}],["/posts/es6/var_let_const.html",{loader:()=>t.e(4524).then(t.bind(t,7925)),meta:{date:1747872e6,category:["-es6系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/d2aba2e0-50f7-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、var</h2>\n<p>在ES5中，顶层对象的属性和全局变量是等价的，用<code>var</code>声明的变量既是全局变量，也是顶层变量</p>\n<p>注意：顶层对象，在浏览器环境指的是<code>window</code>对象，在 <code>Node</code> 指的是<code>global</code>对象</p>',readingTime:{minutes:4.34,words:1303},title:"说说var、let、const之间的区别",type:"article"}}],["/posts/git/Git.html",{loader:()=>t.e(6125).then(t.bind(t,4648)),meta:{date:1747872e6,category:["-git"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/213eba50-f79c-11eb-bc6f-3f06e1491664.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>git，是一个分布式版本控制软件，最初目的是为更好地管理<code>Linux</code>内核开发而设计</p>\n<p>分布式版本控制系统的客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复</p>',readingTime:{minutes:2.95,words:886},title:"说说你对Git的理解？",type:"article"}}],["/posts/git/HEAD_tree_index.html",{loader:()=>t.e(7285).then(t.bind(t,3495)),meta:{date:1747872e6,category:["-git"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/2de056a0-fa40-11eb-991d-334fd31f0201.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、HEAD</h2>\n<p>在<code>git</code>中，可以存在很多分支，其本质上是一个指向<code>commit</code>对象的可变指针，而<code>Head</code>是一个特别的指针，是一个指向你正在工作中的本地分支的指针</p>\n<p>简单来讲，就是你现在在哪儿，HEAD 就指向哪儿</p>',readingTime:{minutes:2.42,words:725},title:"说说Git 中 HEAD、工作树和索引之间的区别？",type:"article"}}],["/posts/git/Version%20control.html",{loader:()=>t.e(3272).then(t.bind(t,1191)),meta:{date:1747872e6,category:["-git"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/f0e8a2d0-f5ac-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>版本控制（Version control），是维护工程蓝图的标准作法，能追踪工程蓝图从诞生一直到定案的过程。此外，版本控制也是一种软件工程技巧，借此能在软件开发的过程中，确保由不同人所编辑的同一程序文件都得到同步</p>\n<p>透过文档控制，能记录任何工程项目内各个模块的改动历程，并为每次改动编上序号</p>',readingTime:{minutes:3.63,words:1089},title:"说说你对版本管理的理解？常用的版本管理工具有哪些？",type:"article"}}],["/posts/git/command.html",{loader:()=>t.e(2824).then(t.bind(t,2256)),meta:{date:1747872e6,category:["-git"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/f66b3290-f7af-11eb-bc6f-3f06e1491664.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、前言</h2>\n<p><code>git </code>的操作可以通过命令的形式如执行，日常使用就如下图6个命令即可</p>\n<figure><img src="https://static.vue-js.com/fe150520-f7af-11eb-991d-334fd31f0201.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',readingTime:{minutes:4.71,words:1412},title:"说说Git常用的命令有哪些？",type:"article"}}],["/posts/git/conflict.html",{loader:()=>t.e(2267).then(t.bind(t,3505)),meta:{date:1747872e6,category:["-git"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/8aeccc40-fdb3-11eb-bc6f-3f06e1491664.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>一般情况下，出现分支的场景有如下：</p>\n<ul>\n<li>多个分支代码合并到一个分支时</li>\n<li>多个分支向同一个远端分支推送</li>\n</ul>\n<p>具体情况就是，多个分支修改了同一个文件（任何地方）或者多个分支修改了同一个文件的名称</p>',readingTime:{minutes:3.06,words:917},title:"说说 git 发生冲突的场景？如何解决？",type:"article"}}],["/posts/git/fork_clone_branch.html",{loader:()=>t.e(5294).then(t.bind(t,4724)),meta:{date:1747872e6,category:["-git"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/9c4eb9a0-f7ad-11eb-bc6f-3f06e1491664.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<h3>fork</h3>\n<p><code>fork</code>，英语翻译过来就是叉子，动词形式则是分叉，如下图，从左到右，一条直线变成多条直线</p>\n<figure><img src="https://static.vue-js.com/ad04ade0-f7ad-11eb-991d-334fd31f0201.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',readingTime:{minutes:3.32,words:996},title:"说说Git中 fork, clone,branch这三个概念，有什么区别?",type:"article"}}],["/posts/git/git%20pull%20_git%20fetch.html",{loader:()=>t.e(9383).then(t.bind(t,6633)),meta:{date:1747998214e3,excerpt:'\n<figure><img src="https://static.vue-js.com/cc90c050-fac2-11eb-991d-334fd31f0201.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>先回顾两个命令的定义</p>\n<ul>\n<li>git fetch 命令用于从另一个存储库下载对象和引用</li>\n<li>git pull 命令用于从另一个存储库或本地分支获取并集成(整合)</li>\n</ul>\n<p>再来看一次<code>git</code>的工作流程图，如下所示：</p>',readingTime:{minutes:2.74,words:822},title:"说说对git pull 和 git fetch 的理解？有什么区别？",type:"article"}}],["/posts/git/git%20rebase_%20git%20merge.html",{loader:()=>t.e(928).then(t.bind(t,9799)),meta:{date:1747872e6,category:["-git"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/77590970-fdd4-11eb-bc6f-3f06e1491664.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>在使用 <code>git</code> 进行版本管理的项目中，当完成一个特性的开发并将其合并到 <code>master</code> 分支时，会有两种方式：</p>\n<ul>\n<li>git merge</li>\n<li>git rebase</li>\n</ul>',readingTime:{minutes:3.09,words:926},title:"说说你对git rebase 和 git merge的理解？区别？",type:"article"}}],["/posts/git/git%20reset_%20git%20revert.html",{loader:()=>t.e(8567).then(t.bind(t,4305)),meta:{date:1747872e6,category:["-git"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/046b4440-ff74-11eb-bc6f-3f06e1491664.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<h3>git reset</h3>\n<p><code>reset</code>用于回退版本，可以遗弃不再使用的提交</p>\n<p>执行遗弃时，需要根据影响的范围而指定不同的参数，可以指定是否复原索引或工作树内容</p>\n<figure><img src="https://static.vue-js.com/ab4d0c00-ff72-11eb-bc6f-3f06e1491664.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',readingTime:{minutes:2.85,words:855},title:"说说你对git reset 和 git revert 的理解？区别？",type:"article"}}],["/posts/git/git%20stash.html",{loader:()=>t.e(6400).then(t.bind(t,3863)),meta:{date:1747872e6,category:["-git"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/83ddf210-fd6f-11eb-bc6f-3f06e1491664.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>stash，译为存放，在 git 中，可以理解为保存当前工作进度，会把暂存区和工作区的改动进行保存，这些修改会保存在一个栈上</p>\n<p>后续你可以在任何时候任何分支重新将某次的修改推出来，重新应用这些更改的代码</p>\n<p>默认情况下，<code>git stash</code>会缓存下列状态的文件：</p>',readingTime:{minutes:3.78,words:1135},title:"说说你对git stash 的理解？应用场景？",type:"article"}}],["/posts/http/1.0_1.1_2.0.html",{loader:()=>t.e(6176).then(t.bind(t,3631)),meta:{date:1747872e6,category:["-HTTP系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/e167a580-b93a-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、HTTP1.0</h2>\n<p><code>HTTP</code>协议的第二个版本，第一个在通讯中指定版本号的HTTP协议版本</p>\n<p><code>HTTP 1.0</code> 浏览器与服务器只保持短暂的连接，每次请求都需要与服务器建立一个<code>TCP</code>连接</p>',readingTime:{minutes:4.89,words:1466},title:"说说 HTTP1.0/1.1/2.0 的区别?",type:"article"}}],["/posts/http/CDN.html",{loader:()=>t.e(6616).then(t.bind(t,9985)),meta:{date:1747872e6,category:["-HTTP系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/437ae0f0-b86b-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>CDN (全称 Content Delivery Network)，即内容分发网络</p>\n<p>构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。<code>CDN</code> 的关键技术主要有内容存储和分发技术</p>',readingTime:{minutes:3.28,words:985},title:"如何理解CDN？说说实现原理？",type:"article"}}],["/posts/http/DNS.html",{loader:()=>t.e(4140).then(t.bind(t,6386)),meta:{date:1747872e6,category:["-HTTP系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/88081710-b78f-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>DNS（Domain Names System），域名系统，是互联网一项服务，是进行域名和与之相对应的 IP 地址进行转换的服务器</p>\n<p>简单来讲，<code>DNS</code>相当于一个翻译官，负责将域名翻译成<code>ip</code>地址</p>',readingTime:{minutes:3.14,words:941},title:"DNS协议 是什么？说说DNS 完整的查询过程?",type:"article"}}],["/posts/http/GET_POST.html",{loader:()=>t.e(9740).then(t.bind(t,9153)),meta:{date:1747872e6,category:["-HTTP系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/6e8d19e0-bc3d-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p><code>GET</code>和<code>POST</code>，两者是<code>HTTP</code>协议中发送请求的方法</p>\n<h4>GET</h4>\n<p><code>GET</code>方法请求一个指定资源的表示形式，使用GET的请求应该只被用于获取数据</p>',readingTime:{minutes:3.1,words:930},title:"说一下 GET 和 POST 的区别？",type:"article"}}],["/posts/http/HTTPS.html",{loader:()=>t.e(2774).then(t.bind(t,3018)),meta:{date:1747872e6,category:["-HTTP系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/b5512250-b2ff-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、安全特性</h2>\n<p>在上篇文章中，我们了解到<code>HTTP</code>在通信过程中，存在以下问题：</p>\n<ul>\n<li>通信使用明文（不加密），内容可能被窃听</li>\n<li>不验证通信方的身份，因此有可能遭遇伪装</li>\n</ul>\n<p>而<code>HTTPS</code>的出现正是解决这些问题，<code>HTTPS</code>是建立在<code>SSL</code>之上，其安全性由<code>SSL</code>来保证</p>',readingTime:{minutes:5.63,words:1688},title:"为什么说HTTPS比HTTP安全? HTTPS是如何保证安全的？",type:"article"}}],["/posts/http/HTTP_HTTPS.html",{loader:()=>t.e(2073).then(t.bind(t,7042)),meta:{date:1747872e6,category:["-HTTP系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/f50c71f0-b20b-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、HTTP</h2>\n<p><code>HTTP</code> (HyperText Transfer Protocol)，即超文本运输协议，是实现网络通信的一种规范</p>\n<figure><img src="https://static.vue-js.com/fda119b0-b20b-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',readingTime:{minutes:3.07,words:922},title:"什么是HTTP? HTTP 和 HTTPS 的区别?",type:"article"}}],["/posts/http/OSI.html",{loader:()=>t.e(9578).then(t.bind(t,3736)),meta:{date:1747872e6,category:["-HTTP系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/e2e1b910-b61e-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>OSI （Open System Interconnect）模型全称为开放式通信系统互连参考模型，是国际标准化组织 ( ISO ) 提出的一个试图使各种计算机在世界范围内互连为网络的标准框架</p>\n<p><code>OSI </code>将计算机网络体系结构划分为七层，每一层实现各自的功能和协议，并完成与相邻层的接口通信。即每一层扮演固定的角色，互不打扰</p>',readingTime:{minutes:4.72,words:1415},title:"如何理解OSI七层模型?",type:"article"}}],["/posts/http/TCP_IP.html",{loader:()=>t.e(9870).then(t.bind(t,7399)),meta:{date:1747872e6,category:["-HTTP系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/4f69a930-b647-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>TCP/IP，<strong>传输控制协议</strong>/<strong>网际协议</strong>，是指能够在多个不同网络间实现信息传输的协议簇</p>\n<ul>\n<li>TCP（传输控制协议）</li>\n</ul>\n<p>一种面向连接的、可靠的、基于字节流的传输层通信协议</p>',readingTime:{minutes:4.07,words:1220},title:"如何理解TCP/IP协议?",type:"article"}}],["/posts/http/UDP_TCP.html",{loader:()=>t.e(6480).then(t.bind(t,8179)),meta:{date:1747872e6,category:["-HTTP系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/85ad65b0-b393-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、UDP</h2>\n<p>UDP（User Datagram Protocol），用户数据包协议，是一个简单的<strong>面向数据报的通信协议</strong>，即对应用层交下来的报文，不合并，不拆分，只是在其上面加上首部后就交给了下面的网络层</p>\n<p>也就是说无论应用层交给<code>UDP</code>多长的报文，它统统发送，一次发送一个报文</p>',readingTime:{minutes:3.7,words:1111},title:"如何理解UDP 和 TCP? 区别? 应用场景?",type:"article"}}],["/posts/http/WebSocket.html",{loader:()=>t.e(4636).then(t.bind(t,7289)),meta:{date:1747872e6,category:["-HTTP系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/a358a8c0-c0f1-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>WebSocket，是一种网络传输协议，位于<code>OSI</code>模型的应用层。可在单个<code>TCP</code>连接上进行全双工通信，能更好的节省服务器资源和带宽并达到实时通迅</p>\n<p>客户端和服务器只需要完成一次握手，两者之间就可以创建持久性的连接，并进行双向数据传输</p>',readingTime:{minutes:3.45,words:1036},title:"说说对WebSocket的理解？应用场景？",type:"article"}}],["/posts/http/after_url.html",{loader:()=>t.e(303).then(t.bind(t,5206)),meta:{date:1747872e6,category:["-HTTP系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/11bf1f20-bdf4-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、简单分析</h2>\n<p>简单的分析，从输入 <code>URL</code>到回车后发生的行为如下：</p>\n<ul>\n<li>URL解析</li>\n<li>DNS 查询</li>\n<li>TCP 连接</li>\n<li>HTTP 请求</li>\n<li>响应请求</li>\n<li>页面渲染</li>\n</ul>',readingTime:{minutes:2.22,words:665},title:"说说地址栏输入 URL 敲下回车后发生了什么?",type:"article"}}],["/posts/http/handshakes_waves.html",{loader:()=>t.e(4996).then(t.bind(t,3582)),meta:{date:1747872e6,category:["-HTTP系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/ef4696a0-beb9-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、三次握手</h2>\n<p>三次握手（Three-way Handshake）其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包</p>\n<p>主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备</p>\n<p>过程如下：</p>',readingTime:{minutes:3.71,words:1113},title:"说说TCP为什么需要三次握手和四次挥手？",type:"article"}}],["/posts/http/headers.html",{loader:()=>t.e(5997).then(t.bind(t,3114)),meta:{date:1747872e6,category:["-HTTP系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/964abb00-bc69-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>HTTP头字段（HTTP header fields）,是指在超文本传输协议（HTTP）的请求和响应消息中的消息头部分</p>\n<p>它们定义了一个超文本传输协议事务中的操作参数</p>\n<p>HTTP头部字段可以自己根据需要定义，因此可能在 <code>Web </code>服务器和浏览器上发现非标准的头字段</p>',readingTime:{minutes:4.19,words:1257},title:"说说 HTTP 常见的请求头有哪些? 作用？",type:"article"}}],["/posts/http/status.html",{loader:()=>t.e(5697).then(t.bind(t,2476)),meta:{date:1747872e6,category:["-HTTP系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/038831d0-bbc9-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>HTTP状态码（英语：HTTP Status Code），用以表示网页服务器超文本传输协议响应状态的3位数字代码</p>\n<p>它由 RFC 2616规范定义的，并得到 <code>RFC 2518</code>、<code>RFC 2817</code>、<code>RFC 2295</code>、<code>RFC 2774</code>与 <code>RFC 4918</code>等规范扩展</p>',readingTime:{minutes:5.48,words:1643},title:"说说HTTP 常见的状态码有哪些，适用场景？",type:"article"}}],["/posts/javascript/%20____.html",{loader:()=>t.e(3612).then(t.bind(t,6888)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/51b208f0-68df-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、等于操作符</h2>\n<p>等于操作符用两个等于号（ == ）表示，如果操作数相等，则会返回 <code>true</code></p>\n<p>前面文章，我们提到在<code>JavaScript</code>中存在隐式转换。等于操作符（==）在比较中会先进行类型转换，再确定操作数是否相等</p>',readingTime:{minutes:2.75,words:824},title:"5、== 和 ===区别，分别在什么情况使用",type:"article"}}],["/posts/javascript/BOM.html",{loader:()=>t.e(5494).then(t.bind(t,3714)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/3e191c40-8089-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p><code>BOM</code> (Browser Object Model)，浏览器对象模型，提供了独立于内容与浏览器窗口进行交互的对象</p>\n<p>其作用就是跟浏览器做一些交互效果,比如如何进行页面的后退，前进，刷新，浏览器的窗口发生变化，滚动条的滚动，以及获取客户的一些信息如：浏览器品牌版本，屏幕分辨率</p>',readingTime:{minutes:4.07,words:1220},title:"22、说说你对BOM的理解，常见的BOM对象你了解哪些？",type:"article"}}],["/posts/javascript/Dom.html",{loader:()=>t.e(4544).then(t.bind(t,7033)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/a89c99a0-7fdc-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、DOM</h2>\n<p>文档对象模型 (DOM) 是 <code>HTML</code> 和 <code>XML</code> 文档的编程接口</p>\n<p>它提供了对文档的结构化的表述，并定义了一种方式可以使从程序中对该结构进行访问，从而改变文档的结构，样式和内容</p>',readingTime:{minutes:5.66,words:1698},title:"21、DOM常见的操作有哪些？",type:"article"}}],["/posts/javascript/ajax.html",{loader:()=>t.e(7692).then(t.bind(t,992)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/a35a2950-7b2a-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p><code>AJAX </code>全称(Async Javascript and XML)</p>\n<p>即异步的<code> JavaScript</code> 和<code> XML</code>，是一种创建交互式网页应用的网页开发技术，可以在不重新加载整个网页的情况下，与服务器交换数据，并且更新部分网页</p>',readingTime:{minutes:3.33,words:1e3},title:"17、ajax原理是什么？如何实现？",type:"article"}}],["/posts/javascript/array_api.html",{loader:()=>t.e(6050).then(t.bind(t,795)),meta:{date:1743552e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/5842e560-67b6-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、操作方法</h2>\n<p>数组基本操作可以归纳为 增、删、改、查，需要留意的是哪些方法会对原数组产生影响，哪些方法不会</p>\n<p>下面对数组常用的操作方法做一个归纳</p>\n<h3>增</h3>\n<p>下面前三种是对原数组产生影响的增添方法，第四种则不会对原数组产生影响</p>',readingTime:{minutes:4.6,words:1380},title:"2、数组的常用方法有哪些？",type:"article"}}],["/posts/javascript/bind_call_apply.html",{loader:()=>t.e(159).then(t.bind(t,7292)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/a900e460-7be4-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、作用</h2>\n<p><code>call </code>、<code>apply </code>、<code>bind </code>作用是改变函数执行时的上下文，简而言之就是改变函数运行时的<code>this</code>指向</p>\n<p>那么什么情况下需要改变<code>this</code>的指向呢？下面举个例子</p>',readingTime:{minutes:3.28,words:984},title:"18、bind、call、apply 区别？如何实现一个bind?",type:"article"}}],["/posts/javascript/cache.html",{loader:()=>t.e(8386).then(t.bind(t,6939)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/68dccf20-849f-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、方式</h2>\n<p><code>javaScript</code>本地缓存的方法我们主要讲述以下四种：</p>\n<ul>\n<li>cookie</li>\n<li>sessionStorage</li>\n<li>localStorage</li>\n<li>indexedDB</li>\n</ul>',readingTime:{minutes:5.05,words:1515},title:"25、Javascript本地存储的方式有哪些？区别及应用场景？",type:"article"}}],["/posts/javascript/closure.html",{loader:()=>t.e(9777).then(t.bind(t,2944)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/c141a030-6a7a-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包（closure）</p>\n<p>也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域</p>\n<p>在 <code>JavaScript </code>中，每当创建一个函数，闭包就会在函数创建的同时被创建出来，作为函数内部与外部连接起来的一座桥梁</p>',readingTime:{minutes:3.5,words:1049},title:"7、说说你对闭包的理解？闭包使用场景",type:"article"}}],["/posts/javascript/context_stack.html",{loader:()=>t.e(2152).then(t.bind(t,7180)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/8652b710-74c1-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、执行上下文</h2>\n<p>简单的来说，执行上下文是一种对<code>Javascript</code>代码执行环境的抽象概念，也就是说只要有<code>Javascript</code>代码运行，那么它就一定是运行在执行上下文中</p>\n<p>执行上下文的类型分为三种：</p>',readingTime:{minutes:5.29,words:1588},title:"12、JavaScript中执行上下文和执行栈是什么？",type:"article"}}],["/posts/javascript/continue_to_upload.html",{loader:()=>t.e(8371).then(t.bind(t,6791)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/3ccb0e90-8ba4-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>不管怎样简单的需求，在量级达到一定层次时，都会变得异常复杂</p>\n<p>文件上传简单，文件变大就复杂</p>\n<p>上传大文件时，以下几个变量会影响我们的用户体验</p>\n<ul>\n<li>服务器处理数据的能力</li>\n<li>请求超时</li>\n<li>网络波动</li>\n</ul>',readingTime:{minutes:5.92,words:1777},title:"31、大文件上传如何做断点续传？",type:"article"}}],["/posts/javascript/copy.html",{loader:()=>t.e(6491).then(t.bind(t,4841)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/cdf952e0-69b8-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、数据类型存储</h2>\n<p>前面文章我们讲到，<code>JavaScript</code>中存在两大数据类型：</p>\n<ul>\n<li>基本类型</li>\n<li>引用类型</li>\n</ul>\n<p>基本类型数据保存在在栈内存中</p>\n<p>引用类型数据保存在堆内存中，引用数据类型的变量是一个指向堆内存中实际对象的引用，存在栈中</p>',readingTime:{minutes:3.72,words:1117},title:"6、深拷贝浅拷贝的区别？如何实现一个深拷贝？",type:"article"}}],["/posts/javascript/data_type.html",{loader:()=>t.e(5369).then(t.bind(t,6498)),meta:{date:17434656e5,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/6d133f90-6463-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>前言</h2>\n<p>在<code>JavaScript</code>中，我们可以分成两种类型：</p>\n<ul>\n<li>基本类型</li>\n<li>复杂类型</li>\n</ul>\n<p>两种类型的区别是：存储位置不同</p>\n<h2>一、基本类型</h2>\n<p>基本类型主要为以下6种：</p>',readingTime:{minutes:4.89,words:1467},title:"1、说说JavaScript中的数据类型？存储上的差别？",type:"article"}}],["/posts/javascript/debounce_throttle.html",{loader:()=>t.e(3252).then(t.bind(t,9098)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/912f1a10-8787-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>本质上是优化高频率执行代码的一种手段</p>\n<p>如：浏览器的 <code>resize</code>、<code>scroll</code>、<code>keypress</code>、<code>mousemove</code> 等事件在触发时，会不断地调用绑定在事件上的回调函数，极大地浪费资源，降低前端性能</p>',readingTime:{minutes:3.5,words:1050},title:"29、什么是防抖和节流？有什么区别？如何实现？",type:"article"}}],["/posts/javascript/event_Model.html",{loader:()=>t.e(9474).then(t.bind(t,9052)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/32a182f0-74cf-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、事件与事件流</h2>\n<p><code>javascript</code>中的事件，可以理解就是在<code>HTML</code>文档或者浏览器中发生的一种交互操作，使得网页具备互动性， 常见的有加载事件、鼠标事件、自定义事件等</p>\n<p>由于<code>DOM</code>是一个树结构，如果在父子节点绑定事件时候，当触发子节点的时候，就存在一个顺序问题，这就涉及到了事件流的概念</p>',readingTime:{minutes:4.43,words:1329},title:"13、说说JavaScript中的事件模型",type:"article"}}],["/posts/javascript/event_agent.html",{loader:()=>t.e(4794).then(t.bind(t,9774)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/a33f0ab0-797e-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>事件代理，俗地来讲，就是把一个元素响应事件（<code>click</code>、<code>keydown</code>......）的函数委托到另一个元素</p>\n<p>前面讲到，事件流的都会经过三个阶段： 捕获阶段 -&gt; 目标阶段 -&gt; 冒泡阶段，而事件委托就是在冒泡阶段完成</p>',readingTime:{minutes:3.81,words:1144},title:"15、解释下什么是事件代理？应用场景？",type:"article"}}],["/posts/javascript/event_loop.html",{loader:()=>t.e(9965).then(t.bind(t,2135)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/50f062d0-7cb8-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>首先，<code>JavaScript </code>是一门单线程的语言，意味着同一时间内只能做一件事，但是这并不意味着单线程就是阻塞，而实现单线程非阻塞的方法就是事件循环</p>\n<p>在<code>JavaScript</code>中，所有的任务都可以分为</p>',readingTime:{minutes:5.21,words:1563},title:"20、说说你对事件循环的理解",type:"article"}}],["/posts/javascript/function_cache.html",{loader:()=>t.e(831).then(t.bind(t,669)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/2ae9dda0-85fa-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>函数缓存，就是将函数运算过的结果进行缓存</p>\n<p>本质上就是用空间（缓存存储）换时间（计算过程）</p>\n<p>常用于缓存数据计算结果和缓存对象</p>\n<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> add</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> a</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> calc</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> memoize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 函数缓存</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">calc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 30</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">calc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 30 缓存</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:2.79,words:836},title:"27、Javascript中如何实现函数缓存？函数缓存有哪些应用场景？",type:"article"}}],["/posts/javascript/functional_programming.html",{loader:()=>t.e(6293).then(t.bind(t,3790)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/ec0f6e80-8534-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>函数式编程是一种"编程范式"（programming paradigm），一种编写程序的方法论</p>\n<p>主要的编程范式有三种：命令式编程，声明式编程和函数式编程</p>\n<p>相比命令式编程，函数式编程更加强调程序执行的结果而非执行的过程，倡导利用若干简单的执行单元让计算结果不断渐进，逐层推导复杂的运算，而非设计一个复杂的执行过程</p>',readingTime:{minutes:5.45,words:1634},title:"26、说说你对函数式编程的理解？优缺点？",type:"article"}}],["/posts/javascript/inherit.html",{loader:()=>t.e(8739).then(t.bind(t,1952)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/5d9c4450-72a3-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>继承（inheritance）是面向对象软件技术当中的一个概念。</p>\n<p>如果一个类别B“继承自”另一个类别A，就把这个B称为“A的子类”，而把A称为“B的父类别”也可以称“A是B的超类”</p>\n<ul>\n<li>继承的优点</li>\n</ul>',readingTime:{minutes:5.89,words:1768},title:"10、Javascript如何实现继承？",type:"article"}}],["/posts/javascript/js_data_structure.html",{loader:()=>t.e(8050).then(t.bind(t,8642)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:"\n<h2>什么是数据结构？</h2>\n<p>数据结构是计算机存储、组织数据的方式。<br>\n数据结构意味着接口或封装：一个数据结构可被视为两个函数之间的接口，或者是由数据类型联合组成的存储内容的访问方法封装。</p>\n<p>我们每天的编码中都会用到数据结构<br>\n数组是最简单的内存数据结构<br>\n下面是常见的数据结构：</p>\n<ol>\n<li>数组（Array）</li>\n<li>栈（Stack）</li>\n<li>队列（Queue）</li>\n<li>链表（Linked List）</li>\n<li>字典</li>\n<li>散列表（Hash table）</li>\n<li>树（Tree）</li>\n<li>图（Graph）</li>\n<li>堆（Heap）</li>\n</ol>",readingTime:{minutes:3.55,words:1064},title:"说说你了解的js数据结构？",type:"article"}}],["/posts/javascript/loss_accuracy.html",{loader:()=>t.e(285).then(t.bind(t,8991)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/09646a10-86f4-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、场景复现</h2>\n<p>一个经典的面试题</p>\n<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0.1</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0.2</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> ===</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0.3</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // false</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',readingTime:{minutes:5.1,words:1529},title:"28、说说 Javascript 数字精度丢失的问题，如何解决？",type:"article"}}],["/posts/javascript/memory_leak.html",{loader:()=>t.e(9219).then(t.bind(t,4875)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/19f76b30-824d-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>内存泄漏（Memory leak）是在计算机科学中，由于疏忽或错误造成程序未能释放已经不再使用的内存</p>\n<p>并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，从而造成了内存的浪费</p>',readingTime:{minutes:4.51,words:1352},title:"24、说说 JavaScript 中内存泄漏的几种情况？",type:"article"}}],["/posts/javascript/new.html",{loader:()=>t.e(7678).then(t.bind(t,6652)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/880d0010-7a39-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>在<code>JavaScript</code>中，<code>new</code>操作符用于创建一个给定构造函数的实例对象</p>\n<p>例子</p>\n<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">){</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">age</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">prototype</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sayName</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> () {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> person1</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'Tom\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">person1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// Person {name: "Tom", age: 20}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sayName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// \'Tom\'</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:2.18,words:654},title:"16、说说new操作符具体干了什么？",type:"article"}}],["/posts/javascript/prototype.html",{loader:()=>t.e(5682).then(t.bind(t,3826)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/4500e170-725e-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、原型</h2>\n<p><code>JavaScript</code> 常被描述为一种基于原型的语言——每个对象拥有一个原型对象</p>\n<p>当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾</p>',readingTime:{minutes:2.97,words:892},title:"9、JavaScript原型，原型链 ? 有什么特点？",type:"article"}}],["/posts/javascript/pull_up_loading_pull_down_refresh.html",{loader:()=>t.e(2241).then(t.bind(t,5690)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/89cd1850-8adc-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、前言</h2>\n<p>下拉刷新和上拉加载这两种交互方式通常出现在移动端中</p>\n<p>本质上等同于PC网页中的分页，只是交互形式不同</p>\n<p>开源社区也有很多优秀的解决方案，如<code>iscroll</code>、<code>better-scroll</code>、<code>pulltorefresh.js</code>库等等</p>',readingTime:{minutes:5.18,words:1554},title:"32、如何实现上拉加载，下拉刷新？",type:"article"}}],["/posts/javascript/regexp.html",{loader:()=>t.e(855).then(t.bind(t,4697)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/55388a40-7f1d-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>正则表达式是一种用来匹配字符串的强有力的武器</p>\n<p>它的设计思想是用一种描述性的语言定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的</p>\n<p>在 <code>JavaScript</code>中，正则表达式也是对象，构建正则表达式有两种方式：</p>',readingTime:{minutes:8.16,words:2449},title:"19、说说你对正则表达式的理解？应用场景？",type:"article"}}],["/posts/javascript/scope.html",{loader:()=>t.e(6256).then(t.bind(t,292)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/16f614a0-718f-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、作用域</h2>\n<p>作用域，即变量（变量作用域又称上下文）和函数生效（能被访问）的区域或集合</p>\n<p>换句话说，作用域决定了代码区块中变量和其他资源的可见性</p>\n<p>举个例子</p>\n<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> myFunction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> inVariable</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "函数内部变量"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">myFunction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//要先执行这个函数，否则根本不知道里面是啥</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">inVariable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// Uncaught ReferenceError: inVariable is not defined</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:3.66,words:1099},title:"8、说说你对作用域链的理解",type:"article"}}],["/posts/javascript/security.html",{loader:()=>t.e(9836).then(t.bind(t,8998)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/d0892930-8d1d-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>Web攻击（WebAttack）是针对用户上网行为或网站服务器等设备进行攻击的行为</p>\n<p>如植入恶意代码，修改网站权限，获取网站用户隐私信息等等</p>\n<p>Web应用程序的安全性是任何基于Web业务的重要组成部分</p>\n<p>确保Web应用程序安全十分重要，即使是代码中很小的 bug 也有可能导致隐私信息被泄露</p>',readingTime:{minutes:9.2,words:2759},title:"34、web常见的攻击方式有哪些？如何防御？",type:"article"}}],["/posts/javascript/single_sign.html",{loader:()=>t.e(1396).then(t.bind(t,9838)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/8a25a760-8c83-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>单点登录（Single Sign On），简称为 SSO，是目前比较流行的企业业务整合的解决方案之一</p>\n<p>SSO的定义是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统</p>\n<p>SSO 一般都需要一个独立的认证中心（passport），子系统的登录均得通过<code>passport</code>，子系统本身将不参与登录操作</p>',readingTime:{minutes:6.32,words:1896},title:"33、什么是单点登录？如何实现？",type:"article"}}],["/posts/javascript/string_api.html",{loader:()=>t.e(499).then(t.bind(t,6806)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/ceb6ebc0-65c1-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、操作方法</h2>\n<p>我们也可将字符串常用的操作方法归纳为增、删、改、查，需要知道字符串的特点是一旦创建了，就不可变</p>\n<h3>增</h3>\n<p>这里增的意思并不是说直接增添内容，而是创建字符串的一个副本，再进行操作</p>\n<p>除了常用<code>+</code>以及<code>${}</code>进行字符串拼接之外，还可通过<code>concat</code></p>',readingTime:{minutes:2.92,words:875},title:"3、JavaScript字符串的常用方法有哪些？",type:"article"}}],["/posts/javascript/tail_recursion.html",{loader:()=>t.e(9223).then(t.bind(t,2644)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/74db8fe0-815d-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、递归</h2>\n<p>递归（英语：Recursion）</p>\n<p>在数学与计算机科学中，是指在函数的定义中使用函数自身的方法</p>\n<p>在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数</p>\n<p>其核心思想是把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解</p>',readingTime:{minutes:3.76,words:1127},title:"23、举例说明你对尾递归的理解，有哪些应用场景",type:"article"}}],["/posts/javascript/this.html",{loader:()=>t.e(4374).then(t.bind(t,527)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/46c820d0-74b7-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、定义</h2>\n<p>函数的 <code>this</code> 关键字在 <code>JavaScript</code> 中的表现略有不同，此外，在严格模式和非严格模式之间也会有一些差别</p>\n<p>在绝大多数情况下，函数的调用方式决定了 <code>this</code> 的值（运行时绑定）</p>',readingTime:{minutes:4.94,words:1483},title:"11、谈谈this对象的理解",type:"article"}}],["/posts/javascript/type_conversion.html",{loader:()=>t.e(9625).then(t.bind(t,8296)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/2abd00a0-6692-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、概述</h2>\n<p>前面我们讲到，<code>JS </code>中有六种简单数据类型：<code>undefined</code>、<code>null</code>、<code>boolean</code>、<code>string</code>、<code>number</code>、<code>symbol</code>，以及引用类型：<code>object</code></p>',readingTime:{minutes:3.64,words:1091},title:"4、谈谈 JavaScript 中的类型转换机制",type:"article"}}],["/posts/javascript/typeof_instanceof.html",{loader:()=>t.e(6872).then(t.bind(t,420)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/3fc158f0-7710-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、typeof</h2>\n<p><code>typeof</code> 操作符返回一个字符串，表示未经计算的操作数的类型</p>\n<p>使用方法如下：</p>\n<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> operand</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">operand</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:3.38,words:1013},title:"14、typeof 与 instanceof 区别",type:"article"}}],["/posts/javascript/visible.html",{loader:()=>t.e(3778).then(t.bind(t,4522)),meta:{date:1747872e6,category:["javascript"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/d848c790-8a05-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、用途</h2>\n<p>可视区域即我们浏览网页的设备肉眼可见的区域，如下图</p>\n<figure><img src="https://static.vue-js.com/9c5bbb10-8a56-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',readingTime:{minutes:4.6,words:1379},title:"30、如何判断一个元素是否在可视区域中？",type:"article"}}],["/posts/linux/file.html",{loader:()=>t.e(4577).then(t.bind(t,9177)),meta:{date:1747872e6,category:["-操作系统"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/6cb38ac0-03c1-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p><code>Linux</code> 是一个开源的操作系统（OS），是一系列Linux内核基础上开发的操作系统的总称（常见的有Ubuntu、centos）</p>\n<p>系统通常会包含以下4个主要部分</p>\n<ul>\n<li>内核</li>\n<li>shell</li>\n<li>文件系统</li>\n<li>应用程序</li>\n</ul>',readingTime:{minutes:5.69,words:1708},title:"说说 linux系统下 文件操作常用的命令有哪些？",type:"article"}}],["/posts/linux/linux%20users.html",{loader:()=>t.e(5365).then(t.bind(t,3516)),meta:{date:1747872e6,category:["-操作系统"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/8d8d9d70-0417-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>Linux是一个多用户的系统，允许使用者在系统上通过规划不同类型、不同层级的用户，并公平地分配系统资源与工作环境</p>\n<p>而与 <code>Windows</code> 系统最大的不同， <code>Linux</code> 允许不同的用户同时登录主机，同时使用主机的资源</p>',readingTime:{minutes:6.73,words:2019},title:"说说你对 linux 用户管理的理解？相关的命令有哪些？",type:"article"}}],["/posts/linux/linux.html",{loader:()=>t.e(4261).then(t.bind(t,1790)),meta:{date:1747872e6,category:["-操作系统"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/0f06bf30-008a-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>操作系统（Operating System，缩写：OS）是一组主管并控制计算机操作、运用和运行硬件、软件资源和提供公共服务来组织用户交互的相互关联的系统软件程序，同时也是计算机系统的内核与基石</p>\n<p>简单来讲，操作系统就是一种复杂的软件，相当于软件管家</p>',readingTime:{minutes:4.91,words:1473},title:"说说你对操作系统的理解？核心概念有哪些？",type:"article"}}],["/posts/linux/redirect_pipe.html",{loader:()=>t.e(138).then(t.bind(t,8883)),meta:{date:1747872e6,category:["-操作系统"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/1036dde0-0634-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p><code>linux</code>中有三种标准输入输出，分别是<code>STDIN</code>，<code>STDOUT</code>，<code>STDERR</code>，对应的数字是0、1、2：</p>\n<ul>\n<li>STDIN 是标准输入，默认从键盘读取信息</li>\n<li>STDOUT 是标准输出，默认将输出结果输出至终端</li>\n<li>STDERR 是标准错误，默认将输出结果输出至终端</li>\n</ul>',readingTime:{minutes:3.18,words:955},title:"说说你对输入输出重定向和管道的理解？应用场景？",type:"article"}}],["/posts/linux/shell.html",{loader:()=>t.e(8897).then(t.bind(t,6372)),meta:{date:1747872e6,category:["-操作系统"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/71003620-0883-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p><code>Shell </code>是一个由<code>c</code>语言编写的应用程序，它是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言</p>\n<p>它连接了用户和<code>Linux</code>内核，让用户能够更加高效、安全、低成本地使用 <code>Linux</code> 内核</p>',readingTime:{minutes:4.16,words:1247},title:"说说你对 shell 的理解？常见的命令？",type:"article"}}],["/posts/linux/thread_process.html",{loader:()=>t.e(3661).then(t.bind(t,9723)),meta:{date:1747872e6,category:["-操作系统"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/f414d8a0-02f6-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、进程</h2>\n<p>操作系统中最核心的概念就是进程，进程是对正在运行中的程序的一个抽象，是系统进行资源分配和调度的基本单位</p>\n<p>操作系统的其他所有内容都是围绕着进程展开的，负责执行这些任务的是<code>CPU</code></p>\n<figure><img src="https://static.vue-js.com/3ff146b0-02f6-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',readingTime:{minutes:4.08,words:1224},title:"说说什么是进程？什么是线程？区别？",type:"article"}}],["/posts/linux/vim.html",{loader:()=>t.e(5663).then(t.bind(t,7193)),meta:{date:1747872e6,category:["-操作系统"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/1062b8b0-049b-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p><code>Vim</code>是从 <code>vi</code> 发展出来的一个文本编辑器，代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p>\n<p>简单的来说， <code>vi</code> 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方</p>',readingTime:{minutes:3.1,words:929},title:"说说 linux 系统下 文本编辑常用的命令有哪些？",type:"article"}}],["/posts/typescript/class.html",{loader:()=>t.e(9916).then(t.bind(t,8887)),meta:{date:1747872e6,category:["-TypeScript系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/e4c19060-0cb4-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>类（Class）是面向对象程序设计（OOP，Object-Oriented Programming）实现信息封装的基础</p>\n<blockquote>\n<p>类是一种用户定义的引用数据类型，也称类类型</p>\n</blockquote>\n<p>传统的面向对象语言基本都是基于类的，<code>JavaScript</code> 基于原型的方式让开发者多了很多理解成本</p>',readingTime:{minutes:4.53,words:1360},title:"说说你对 TypeScript 中类的理解？应用场景？",type:"article"}}],["/posts/typescript/data_type.html",{loader:()=>t.e(4377).then(t.bind(t,1639)),meta:{date:1747872e6,category:["-TypeScript系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/d88f9450-0998-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p><code>typescript</code> 和 <code>javascript</code>几乎一样，拥有相同的数据类型，另外在<code>javascript</code>基础上提供了更加实用的类型供开发使用</p>\n<p>在开发阶段，可以为明确的变量定义为某种类型，这样<code>typescript</code>就能在编译阶段进行类型检查，当类型不合符预期结果的时候则会出现错误提示</p>',readingTime:{minutes:3.63,words:1089},title:"说说 typescript 的数据类型有哪些？",type:"article"}}],["/posts/typescript/decorator.html",{loader:()=>t.e(6457).then(t.bind(t,1421)),meta:{date:1747872e6,category:["-TypeScript系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/f8905dd0-111c-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>装饰器是一种特殊类型的声明，它能够被附加到类声明，方法， 访问符，属性或参数上</p>\n<p>是一种在不改变原类和使用继承的情况下，动态地扩展对象功能</p>\n<p>同样的，本质也不是什么高大上的结构，就是一个普通的函数，<code>@expression</code> 的形式其实是<code>Object.defineProperty</code>的语法糖</p>',readingTime:{minutes:3.32,words:995},title:"说说你对 TypeScript 装饰器的理解？应用场景？",type:"article"}}],["/posts/typescript/enum.html",{loader:()=>t.e(9819).then(t.bind(t,7792)),meta:{date:1747872e6,category:["-TypeScript系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/76173bf0-0b0c-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>枚举是一个被命名的整型常数的集合，用于声明一组命名的常数,当一个变量有几种可能的取值时,可以将它定义为枚举类型</p>\n<p>通俗来说，枚举就是一个对象的所有可能取值的集合</p>\n<p>在日常生活中也很常见，例如表示星期的SUNDAY、MONDAY、TUESDAY、WEDNESDAY、THURSDAY、FRIDAY、SATURDAY就可以看成是一个枚举</p>',readingTime:{minutes:3.11,words:934},title:"说说你对 TypeScript 中枚举类型的理解？应用场景？",type:"article"}}],["/posts/typescript/function.html",{loader:()=>t.e(2414).then(t.bind(t,6447)),meta:{date:1747872e6,category:["-TypeScript系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/3f1c1390-0d42-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>函数是<code> JavaScript</code> 应用程序的基础，帮助我们实现抽象层、模拟类、信息隐藏和模块</p>\n<p>在<code> TypeScript</code> 里，虽然已经支持类、命名空间和模块，但函数仍然是主要定义行为的方式，<code>TypeScript</code> 为 <code>JavaScript</code> 函数添加了额外的功能，丰富了更多的应用场景</p>',readingTime:{minutes:3.37,words:1012},title:"说说你对 TypeScript 中函数的理解？与 JavaScript 函数的区别？",type:"article"}}],["/posts/typescript/generic.html",{loader:()=>t.e(5073).then(t.bind(t,858)),meta:{date:1747872e6,category:["-TypeScript系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/5bb5f1d0-0e17-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>泛型程序设计（generic programming）是程序设计语言的一种风格或范式</p>\n<p>泛型允许我们在强类型程序设计语言中编写代码时使用一些以后才指定的类型，在实例化时作为参数指明这些类型<br>\n在<code>typescript</code>中，定义函数，接口或者类的时候，不预先定义好具体的类型，而在使用的时候在指定类型的一种特性</p>',readingTime:{minutes:3.7,words:1109},title:"说说你对 TypeScript 中泛型的理解？应用场景？",type:"article"}}],["/posts/typescript/high%20type.html",{loader:()=>t.e(8236).then(t.bind(t,3009)),meta:{date:1747872e6,category:["-TypeScript系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/bda521e0-1065-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>除了<code>string</code>、<code>number</code>、<code>boolean</code> 这种基础类型外，在 <code>typescript</code> 类型声明中还存在一些高级的类型应用</p>\n<p>这些高级类型，是<code>typescript</code>为了保证语言的灵活性，所使用的一些语言特性。这些特性有助于我们应对复杂多变的开发场景</p>',readingTime:{minutes:3.78,words:1133},title:"说说你对 TypeScript 中高级类型的理解？有哪些？",type:"article"}}],["/posts/typescript/interface.html",{loader:()=>t.e(3891).then(t.bind(t,4555)),meta:{date:1747872e6,category:["-TypeScript系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/193389b0-0b2b-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p><strong>接口</strong>是一系列抽象方法的声明，是一些方法特征的集合，这些方法都应该是抽象的，需要由具体的<strong>类</strong>去实现，然后第三方就可以通过这组抽象方法调用，让具体的类执行具体的方法</p>\n<p>简单来讲，一个接口所描述的是一个对象相关的属性和方法，但并不提供具体创建此对象实例的方法</p>',readingTime:{minutes:2.59,words:777},title:"说说你对 TypeScript 中接口的理解？应用场景？",type:"article"}}],["/posts/typescript/namespace_module.html",{loader:()=>t.e(8714).then(t.bind(t,2496)),meta:{date:1747872e6,category:["-TypeScript系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/9378d760-137e-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、模块</h2>\n<p><code>TypeScript</code> 与<code> ECMAScript</code> 2015 一样，任何包含顶级 <code>import</code> 或者 <code>export</code> 的文件都被当成一个模块</p>\n<p>相反地，如果一个文件不带有顶级的<code>import</code>或者<code>export</code>声明，那么它的内容被视为全局可见的</p>',readingTime:{minutes:2.51,words:753},title:"说说对 TypeScript 中命名空间与模块的理解？区别？",type:"article"}}],["/posts/typescript/react.html",{loader:()=>t.e(2668).then(t.bind(t,5301)),meta:{date:1747872e6,category:["-TypeScript系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/a98974e0-13bc-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、前言</h2>\n<p>单独的使用 <code>TypeScript</code> 并不会导致学习成本很高，但是绝大部分前端开发者的项目都是依赖于框架的</p>\n<p>例如与 <code>Vue</code>、<code>React</code> 这些框架结合使用的时候，会有一定的门槛</p>',readingTime:{minutes:3.4,words:1021},title:"说说如何在 React 项目中应用 TypeScript？",type:"article"}}],["/posts/typescript/typescript_javascript.html",{loader:()=>t.e(6239).then(t.bind(t,160)),meta:{date:1747872e6,category:["-TypeScript系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/58cd3580-0950-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p><code>TypeScript</code> 是 <code>JavaScript</code> 的类型的超集，支持<code>ES6</code>语法，支持面向对象编程的概念，如类、接口、继承、泛型等</p>\n<blockquote>\n<p>超集，不得不说另外一个概念，子集，怎么理解这两个呢，举个例子，如果一个集合 A 里面的的所有元素集合 B 里面都存在，那么我们可以理解集合 B 是集合 A 的超集，集合 A 为集合 B 的子集</p>\n</blockquote>',readingTime:{minutes:2.9,words:870},title:"说说你对 TypeScript 的理解？与 JavaScript 的区别？",type:"article"}}],["/posts/typescript/vue.html",{loader:()=>t.e(3832).then(t.bind(t,3067)),meta:{date:1747872e6,category:["-TypeScript系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/cc658c10-1565-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、前言</h2>\n<p>与link类似</p>\n<p>在<code>VUE</code>项目中应用<code>typescript</code>，我们需要引入一个库<code>vue-property-decorator</code>，</p>\n<p>其是基于<code>vue-class-component</code>库而来，这个库<code>vue</code>官方推出的一个支持使用<code>class</code>方式来开发<code>vue</code>单文件组件的库</p>',readingTime:{minutes:2.43,words:728},title:"说说如何在Vue项目中应用TypeScript？",type:"article"}}],["/posts/vue/404.html",{loader:()=>t.e(7037).then(t.bind(t,8348)),meta:{date:1747872e6,category:["-vue系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/002c9320-4f3e-11eb-ab90-d9ae814b240d.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>\n<h2>一、如何部署</h2>\n<p>前后端分离开发模式下，前后端是独立布署的，前端只需要将最后的构建物上传至目标服务器的<code>web</code>容器指定的静态目录下即可</p>\n<p>我们知道<code>vue</code>项目在构建后，是生成一系列的静态文件</p>',readingTime:{minutes:3.6,words:1081},title:"vue项目本地开发完成后部署到服务器后报404是什么原因呢？",type:"article"}}],["/posts/vue/axios.html",{loader:()=>t.e(3227).then(t.bind(t,1085)),meta:{date:1747872e6,category:["-vue系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/2bf1e460-45a7-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、axios是什么</h2>\n<p><code>axios</code> 是一个轻量的 <code>HTTP</code>客户端</p>\n<p>基于 <code>XMLHttpRequest</code> 服务来执行 <code>HTTP</code> 请求，支持丰富的配置，支持 <code>Promise</code>，支持浏览器端和 <code>Node.js</code> 端。自<code>Vue</code>2.0起，尤大宣布取消对 <code>vue-resource</code> 的官方推荐，转而推荐 <code>axios</code>。现在 <code>axios</code> 已经成为大部分 <code>Vue</code> 开发者的首选</p>',readingTime:{minutes:5.66,words:1698},title:"Vue项目中有封装过axios吗？主要是封装哪方面的？",type:"article"}}],["/posts/vue/axiosCode.html",{loader:()=>t.e(2226).then(t.bind(t,965)),meta:{date:1747872e6,category:["-vue系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/1564f7d0-4662-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、axios的使用</h2>\n<p>关于<code>axios</code>的基本使用，上篇文章已经有所涉及，这里再稍微回顾下：</p>\n<p><strong>发送请求</strong></p>\n<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> axios</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> \'axios\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">axios</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 直接传入配置</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">axios</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 传入url和配置</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">axios</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">method</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">](</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">option</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 直接调用请求方式方法，传入url和配置</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">axios</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">method</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">](</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">option</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]]) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 直接调用请求方式方法，传入data、url和配置</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">axios</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">option</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 调用 request 方法</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> axiosInstance</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> axios</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">create</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// axiosInstance 也具有以上 axios 的能力</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">axios</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">all</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">([</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">axiosInstance1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">axiosInstance2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">axios</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">spread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">response1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">response2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">))</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 调用 all 和传入 spread 回调</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:10.02,words:3007},title:"你了解axios的原理吗？有看过它的源码吗？",type:"article"}}],["/posts/vue/bind.html",{loader:()=>t.e(6874).then(t.bind(t,3694)),meta:{date:1747998214e3,excerpt:'\n<figure><img src="https://static.vue-js.com/cef7dcc0-3ac9-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、什么是双向绑定</h2>\n<p>我们先从单向绑定切入单向绑定非常简单，就是把<code>Model</code>绑定到<code>View</code>，当我们用<code>JavaScript</code>代码更新<code>Model</code>时，<code>View</code>就会自动更新双向绑定就很容易联想到了，在单向绑定的基础上，用户更新了<code>View</code>，<code>Model</code>的数据也自动被更新了，这种情况就是双向绑定举个栗子</p>',readingTime:{minutes:4.56,words:1368},title:"面试官：双向数据绑定是什么",type:"article"}}],["/posts/vue/communication.html",{loader:()=>t.e(9497).then(t.bind(t,9566)),meta:{date:1747872e6,category:["-vue系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/7de50d20-3aca-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、组件间通信的概念</h2>\n<p>开始之前，我们把<strong>组件间通信</strong>这个词进行拆分</p>\n<ul>\n<li>组件</li>\n<li>通信</li>\n</ul>\n<p>都知道组件是<code>vue</code>最强大的功能之一，<code>vue</code>中每一个<code>.vue</code>我们都可以视之为一个组件通信指的是发送者通过某种媒体以某种格式来传递信息到收信者以达到某个目的。广义上，任何信息的交通都是通信<strong>组件间通信</strong>即指组件(<code>.vue</code>)通过某种方式来传递信息以达到某个目的举个栗子我们在使用<code>UI</code>框架中的<code>table</code>组件，可能会往<code>table</code>组件中传入某些数据，这个本质就形成了组件之间的通信</p>',readingTime:{minutes:5.49,words:1648},title:"Vue组件之间的通信方式都有哪些？",type:"article"}}],["/posts/vue/components_plugin.html",{loader:()=>t.e(6095).then(t.bind(t,6716)),meta:{date:1747872e6,category:["-vue系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/683475e0-3acc-11eb-ab90-d9ae814b240d.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>\n<h2>一、组件是什么</h2>\n<p>回顾以前对组件的定义：</p>\n<p>组件就是把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式，在<code>Vue</code>中每一个<code>.vue</code>文件都可以视为一个组件</p>',readingTime:{minutes:3.64,words:1091},title:"Vue中组件和插件有什么区别？",type:"article"}}],["/posts/vue/cors.html",{loader:()=>t.e(600).then(t.bind(t,6847)),meta:{date:1747872e6,category:["-vue系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/db3045b0-4e31-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、跨域是什么</h2>\n<p>跨域本质是浏览器基于<strong>同源策略</strong>的一种安全手段</p>\n<p>同源策略（Sameoriginpolicy），是一种约定，它是浏览器最核心也最基本的安全功能</p>\n<p>所谓同源（即指在同一个域）具有以下三个相同点</p>',readingTime:{minutes:3.16,words:948},title:"Vue项目中你是如何解决跨域的呢？",type:"article"}}],["/posts/vue/data.html",{loader:()=>t.e(7525).then(t.bind(t,2987)),meta:{date:1747872e6,category:["-vue系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/83e51560-3acc-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、实例和组件定义data的区别</h2>\n<p><code>vue</code>实例的时候定义<code>data</code>属性既可以是一个对象，也可以是一个函数</p>\n<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> app</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Vue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">({</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    el</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"#app"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 对象格式</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    data</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">        foo</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"foo"</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    },</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 函数格式</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(){</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">             foo</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"foo"</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">})</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:2.85,words:856},title:"为什么data属性是一个函数而不是一个对象？",type:"article"}}],["/posts/vue/data_object_add_attrs.html",{loader:()=>t.e(4016).then(t.bind(t,3392)),meta:{date:1747872e6,category:["-vue系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/a502dde0-3acc-11eb-ab90-d9ae814b240d.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>\n<h2>一、直接添加属性的问题</h2>\n<p>我们从一个例子开始</p>\n<p>定义一个<code>p</code>标签，通过<code>v-for</code>指令进行遍历</p>\n<p>然后给<code>botton</code>标签绑定点击事件，我们预期点击按钮时，数据新增一个属性，界面也 新增一行</p>',readingTime:{minutes:2.89,words:866},title:"动态给vue的data添加一个新的属性时会发生什么？怎样解决？",type:"article"}}],["/posts/vue/diff.html",{loader:()=>t.e(5258).then(t.bind(t,2281)),meta:{date:1747872e6,category:["-vue系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/5e858e30-4585-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p><code>diff</code> 算法是一种通过同层的树节点进行比较的高效算法</p>\n<p>其有两个特点：</p>\n<ul>\n<li>比较只会在同层级进行, 不会跨层级比较</li>\n<li>在diff比较的过程中，循环从两边向中间比较</li>\n</ul>',readingTime:{minutes:9.74,words:2923},title:"你了解vue的diff算法吗？说说看",type:"article"}}],["/posts/vue/directive.html",{loader:()=>t.e(8636).then(t.bind(t,2778)),meta:{date:1747872e6,category:["-vue系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/bd85a970-4345-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、什么是指令</h2>\n<p>开始之前我们先学习一下指令系统这个词</p>\n<p><strong>指令系统</strong>是计算机硬件的语言系统，也叫机器语言，它是系统程序员看到的计算机的主要属性。因此指令系统表征了计算机的基本功能决定了机器所要求的能力</p>\n<p>在<code>vue</code>中提供了一套为数据驱动视图更为方便的操作，这些操作被称为指令系统</p>',readingTime:{minutes:5.95,words:1785},title:"你有写过自定义指令吗？自定义指令的应用场景有哪些？",type:"article"}}],["/posts/vue/error.html",{loader:()=>t.e(5183).then(t.bind(t,214)),meta:{date:1747872e6,category:["-vue系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/3cafe4f0-4fd9-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、错误类型</h2>\n<p>任何一个框架，对于错误的处理都是一种必备的能力</p>\n<p>在<code>Vue</code> 中，则是定义了一套对应的错误处理规则给到使用者，且在源代码级别，对部分必要的过程做了一定的错误处理。</p>\n<p>主要的错误来源包括：</p>\n<ul>\n<li>后端接口错误</li>\n<li>代码中本身逻辑错误</li>\n</ul>',readingTime:{minutes:6.33,words:1898},title:"你是怎么处理vue项目中的错误的？",type:"article"}}],["/posts/vue/filter.html",{loader:()=>t.e(459).then(t.bind(t,8705)),meta:{date:1747872e6,category:["-vue系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/fe68eea0-440f-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>过滤器（<code>filter</code>）是输送介质管道上不可缺少的一种装置</p>\n<p>大白话，就是把一些不必要的东西过滤掉</p>\n<p>过滤器实质不改变原始数据，只是对数据进行加工处理后返回过滤后的数据再进行调用处理，我们也可以理解其为一个纯函数</p>',readingTime:{minutes:5.64,words:1693},title:"Vue中的过滤器了解吗？过滤器的应用场景有哪些？",type:"article"}}],["/posts/vue/first_page_time.html",{loader:()=>t.e(6833).then(t.bind(t,8191)),meta:{date:1747872e6,category:["-vue系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/24617c00-3acc-11eb-ab90-d9ae814b240d.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>\n<h2>一、什么是首屏加载</h2>\n<p>首屏时间（First Contentful Paint），指的是浏览器从响应用户输入网址地址，到首屏内容渲染完成的时间，此时整个网页不一定要全部渲染完成，但需要展示当前视窗需要的内容</p>\n<p>首屏加载可以说是用户体验中<strong>最重要</strong>的环节</p>',readingTime:{minutes:4.02,words:1206},title:"SPA首屏加载速度慢的怎么解决？",type:"article"}}],["/posts/vue/if_for.html",{loader:()=>t.e(4650).then(t.bind(t,2975)),meta:{date:1747872e6,category:["-vue系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/e8764810-3acb-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、作用</h2>\n<p><code>v-if</code> 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 <code>true</code>值的时候被渲染</p>\n<p><code>v-for</code> 指令基于一个数组来渲染一个列表。<code>v-for</code> 指令需要使用 <code>item in items</code> 形式的特殊语法，其中 <code>items</code> 是源数据数组或者对象，而 <code>item</code> 则是被迭代的数组元素的别名</p>',readingTime:{minutes:2.6,words:779},title:"v-if和v-for的优先级是什么？",type:"article"}}],["/posts/vue/keepalive.html",{loader:()=>t.e(2571).then(t.bind(t,5120)),meta:{date:1747872e6,category:["-vue系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9nSDMxdUY5VklpYlRaSXdpY3ZmUkR3STRiamRBVGlhVEpFZDNzamRoeTd3MDlVM0k5ZERjNUVVSUNFVk1WSVE2aDFYMjVpY1NRT3lraWFwWEpEUFM0VGJST0l3LzY0MA?x-oss-process=image/format,png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',readingTime:{minutes:5.81,words:1744},title:"说说你对keep-alive的理解是什么？",type:"article"}}],["/posts/vue/key.html",{loader:()=>t.e(4450).then(t.bind(t,1831)),meta:{date:1747872e6,category:["-vue系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/bc6e9540-3f41-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、Key是什么</h2>\n<p>开始之前，我们先还原两个实际工作场景</p>\n<ol>\n<li>当我们在使用<code>v-for</code>时，需要给单元加上<code>key</code></li>\n</ol>\n<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">ul</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">li</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic"> v-for</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"item in items"</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF"> :key="item.id"&gt;...&lt;/li&gt;</span></span>\n<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF">&lt;/ul&gt;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:4.3,words:1290},title:"你知道vue中key的原理吗？说说你对它的理解",type:"article"}}],["/posts/vue/lifecycle.html",{loader:()=>t.e(4937).then(t.bind(t,3288)),meta:{date:1747998214e3,excerpt:'\n<figure><img src="https://static.vue-js.com/3a119e10-3aca-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、生命周期是什么</h2>\n<p>生命周期<code>（Life Cycle）</code>的概念应用很广泛，特别是在政治、经济、环境、技术、社会等诸多领域经常出现，其基本涵义可以通俗地理解为“从摇篮到坟墓”<code>（Cradle-to-Grave）</code>的整个过程在<code>Vue</code>中实例从创建到销毁的过程就是生命周期，即指从创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程我们可以把组件比喻成工厂里面的一条流水线，每个工人（生命周期）站在各自的岗位，当任务流转到工人身边的时候，工人就开始工作PS：在<code>Vue</code>生命周期钩子会自动绑定 <code>this</code> 上下文到实例中，因此你可以访问数据，对 <code>property</code> 和方法进行运算这意味着<strong>你不能使用箭头函数来定义一个生命周期方法</strong> (例如 <code>created: () =&gt; this.fetchTodos()</code>)</p>',readingTime:{minutes:4.45,words:1334},title:"面试官：请描述下你对vue生命周期的理解？在created和mounted这两个生命周期中请求数据有什么区别呢？",type:"article"}}],["/posts/vue/mixin.html",{loader:()=>t.e(3544).then(t.bind(t,3276)),meta:{date:1747872e6,category:["-vue系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/8a739c90-3b7f-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、mixin是什么</h2>\n<p><code>Mixin</code>是面向对象程序设计语言中的类，提供了方法的实现。其他类可以访问<code>mixin</code>类的方法而不必成为其子类</p>\n<p><code>Mixin</code>类通常作为功能模块使用，在需要该功能时“混入”，有利于代码复用又避免了多继承的复杂</p>',readingTime:{minutes:6.07,words:1822},title:"说说你对vue的mixin的理解，有什么应用场景？",type:"article"}}],["/posts/vue/modifier.html",{loader:()=>t.e(2840).then(t.bind(t,2769)),meta:{date:1747872e6,category:["-vue系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/8f718e30-42c0-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、修饰符是什么</h2>\n<p>在程序世界里，修饰符是用于限定类型以及类型成员的声明的一种符号</p>\n<p>在<code>Vue</code>中，修饰符处理了许多<code>DOM</code>事件的细节，让我们不再需要花大量的时间去处理这些烦恼的事情，而能有更多的精力专注于程序的逻辑处理</p>',readingTime:{minutes:4.68,words:1404},title:"Vue常用的修饰符有哪些有什么应用场景",type:"article"}}],["/posts/vue/new_vue.html",{loader:()=>t.e(1808).then(t.bind(t,9256)),meta:{date:1747872e6,category:["-vue系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/63194810-3a09-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、思考</h2>\n<p>我们都听过知其然知其所以然这句话</p>\n<p>那么不知道大家是否思考过<code>new Vue()</code>这个过程中究竟做了些什么？</p>\n<p>过程中是如何完成数据的绑定，又是如何将数据渲染到视图的等等</p>\n<h2>一、分析</h2>',readingTime:{minutes:8.29,words:2488},title:"Vue实例挂载的过程",type:"article"}}],["/posts/vue/nexttick.html",{loader:()=>t.e(4837).then(t.bind(t,9367)),meta:{date:1747872e6,category:["-vue系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/76484d30-3aba-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、NextTick是什么</h2>\n<p>官方对其的定义</p>\n<blockquote>\n<p>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM</p>\n</blockquote>\n<p>什么意思呢？</p>\n<p>我们可以理解成，<code>Vue</code> 在更新 <code>DOM</code> 时是异步执行的。当数据发生变化，<code>Vue</code>将开启一个异步更新队列，视图需要等队列中所有数据变化完成之后，再统一进行更新</p>',readingTime:{minutes:3.76,words:1127},title:"Vue中的$nextTick有什么作用？",type:"article"}}],["/posts/vue/observable.html",{loader:()=>t.e(4736).then(t.bind(t,8377)),meta:{date:1747872e6,category:["-vue系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/193782e0-3e7b-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、Observable 是什么</h2>\n<p><code>Observable</code> 翻译过来我们可以理解成<strong>可观察的</strong></p>\n<p>我们先来看一下其在<code>Vue</code>中的定义</p>\n<blockquote>\n<p><code>Vue.observable</code>，让一个对象变成响应式数据。<code>Vue</code> 内部会用它来处理 <code>data</code> 函数返回的对象</p>\n</blockquote>',readingTime:{minutes:2.74,words:823},title:"Vue.observable你有了解过吗？说说看",type:"article"}}],["/posts/vue/permission.html",{loader:()=>t.e(8522).then(t.bind(t,1086)),meta:{date:1747872e6,category:["-vue系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/397e1fa0-4dad-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p>权限是对特定资源的访问许可，所谓权限控制，也就是确保用户只能访问到被分配的资源</p>\n<p>而前端权限归根结底是请求的发起权，请求的发起可能有下面两种形式触发</p>\n<ul>\n<li>页面加载触发</li>\n<li>页面上的按钮点击触发</li>\n</ul>',readingTime:{minutes:8.22,words:2465},title:"vue要做权限管理该怎么做？如果控制到按钮级别的权限怎么做？",type:"article"}}],["/posts/vue/show_if.html",{loader:()=>t.e(2164).then(t.bind(t,2151)),meta:{date:1747872e6,category:["-vue系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/d21c3c50-3acb-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、v-show与v-if的共同点</h2>\n<p>我们都知道在 <code>vue</code> 中 <code>v-show </code> 与 <code>v-if</code> 的作用效果是相同的(不含v-else)，都能控制元素在页面是否显示</p>\n<p>在用法上也是相同的</p>',readingTime:{minutes:2.92,words:877},title:"v-show和v-if有什么区别？使用场景分别是什么？",type:"article"}}],["/posts/vue/slot.html",{loader:()=>t.e(8838).then(t.bind(t,3345)),meta:{date:1747872e6,category:["-vue系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/141ca660-3dbc-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、slot是什么</h2>\n<p>在HTML中 <code>slot</code> 元素 ，作为 <code>Web Components</code> 技术套件的一部分，是Web组件内的一个占位符</p>\n<p>该占位符可以在后期使用自己的标记语言填充</p>\n<p>举个栗子</p>',readingTime:{minutes:5.2,words:1559},title:"说说你对slot的理解？slot使用场景有哪些？",type:"article"}}],["/posts/vue/spa.html",{loader:()=>t.e(9543).then(t.bind(t,8495)),meta:{date:1747872e6,category:["-vue系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/cf6aa320-3ac6-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、什么是SPA</h2>\n<p>SPA（single-page application），翻译过来就是单页应用<code>SPA</code>是一种网络应用程序或网站的模型，它通过动态重写当前页面来与用户交互，这种方法避免了页面之间切换打断用户体验在单页应用中，所有必要的代码（<code>HTML</code>、<code>JavaScript</code>和<code>CSS</code>）都通过单个页面的加载而检索，或者根据需要（通常是为响应用户操作）动态装载适当的资源并添加到页面页面在任何时间点都不会重新加载，也不会将控制转移到其他页面举个例子来讲就是一个杯子，早上装的牛奶，中午装的是开水，晚上装的是茶，我们发现，变的始终是杯子里的内容，而杯子始终是那个杯子结构如下图</p>',readingTime:{minutes:4.19,words:1256},title:"你对SPA单页面的理解，它的优缺点分别是什么？如何实现SPA应用呢",type:"article"}}],["/posts/vue/ssr.html",{loader:()=>t.e(7729).then(t.bind(t,4668)),meta:{date:1747872e6,category:["-vue系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/84bd83f0-4986-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p><code>Server-Side Rendering</code> 我们称其为<code>SSR</code>，意为服务端渲染</p>\n<p>指由服务侧完成页面的 <code>HTML</code> 结构拼接的页面处理技术，发送到浏览器，然后为其绑定状态与事件，成为完全可交互页面的过程</p>',readingTime:{minutes:9.3,words:2789},title:"SSR解决了什么问题？有做过SSR吗？你是怎么做的？",type:"article"}}],["/posts/vue/structure.html",{loader:()=>t.e(8340).then(t.bind(t,1080)),meta:{date:1747872e6,category:["-vue系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/b6cd6a60-4aba-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、为什么要划分</h2>\n<p>使用<code>vue</code>构建项目，项目结构清晰会提高开发效率，熟悉项目的各种配置同样会让开发效率更高</p>\n<p>在划分项目结构的时候，需要遵循一些基本的原则：</p>\n<ul>\n<li>文件夹和文件夹内部文件的语义一致性</li>\n<li>单一入口/出口</li>\n<li>就近原则，紧耦合的文件应该放到一起，且应以相对路径引用</li>\n<li>公共的文件应该以绝对路径的方式从根目录引用</li>\n<li><code>/src</code> 外的文件不应该被引入</li>\n</ul>',readingTime:{minutes:4.24,words:1271},title:"说下你的vue项目的目录结构，如果是大型项目你该怎么划分结构和划分组件呢？",type:"article"}}],["/posts/vue/vnode.html",{loader:()=>t.e(8503).then(t.bind(t,3513)),meta:{date:1747872e6,category:["-vue系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/770b9670-442c-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、什么是虚拟DOM</h2>\n<p>虚拟 DOM （<code>Virtual DOM</code> ）这个概念相信大家都不陌生，从 <code>React</code> 到 <code>Vue</code> ，虚拟 <code>DOM</code> 为这两个框架都带来了跨平台的能力（<code>React-Native</code> 和 <code>Weex</code>）</p>',readingTime:{minutes:7.77,words:2332},title:"什么是虚拟DOM？如何实现一个虚拟DOM？说说你的思路",type:"article"}}],["/posts/vue/vue.html",{loader:()=>t.e(109).then(t.bind(t,2895)),meta:{date:1747872e6,category:["-vue系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/02ac1620-3ac6-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、从历史说起</h2>\n<p>Web是World Wide Web的简称，中文译为万维网我们可以将它规划成如下的几个时代来进行理解</p>\n<ul>\n<li>石器时代</li>\n<li>文明时代</li>\n<li>工业革命时代</li>\n<li>百花齐放时代</li>\n</ul>',readingTime:{minutes:6.92,words:2076},title:"有使用过vue吗？说说你对vue的理解",type:"article"}}],["/posts/vue/vue3_vue2.html",{loader:()=>t.e(181).then(t.bind(t,8083)),meta:{date:1747872e6,category:["-vue系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/774b6950-5087-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、Vue3介绍</h2>\n<p>关于<code>vue3</code>的重构背景，尤大是这样说的：</p>\n<p>「Vue 新版本的理念成型于 2018 年末，当时 Vue 2 的代码库已经有两岁半了。比起通用软件的生命周期来这好像也没那么久，但在这段时期，前端世界已经今昔非比了</p>',readingTime:{minutes:5.59,words:1676},title:"vue3有了解过吗？能说说跟vue2的区别吗？",type:"article"}}],["/posts/vue3/composition.html",{loader:()=>t.e(3932).then(t.bind(t,8462)),meta:{date:1747872e6,category:["-vue3系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/8d6dd7b0-6048-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>开始之前</h2>\n<p><code>Composition API</code> 可以说是<code>Vue3</code>的最大特点，那么为什么要推出<code>Composition Api</code>，解决了什么问题？</p>\n<p>通常使用<code>Vue2</code>开发的项目，普遍会存在以下问题：</p>',readingTime:{minutes:3.84,words:1152},title:"Vue3.0 所采用的 Composition Api 与 Vue2.x 使用的 Options Api 有什么不同？",type:"article"}}],["/posts/vue3/goal.html",{loader:()=>t.e(675).then(t.bind(t,6462)),meta:{date:1747872e6,category:["-vue3系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/b93b49c0-5c58-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、设计目标</h2>\n<p>不以解决实际业务痛点的更新都是耍流氓，下面我们来列举一下<code>Vue3</code>之前我们或许会面临的问题</p>\n<ul>\n<li>\n<p>随着功能的增长，复杂组件的代码变得越来越难以维护</p>\n</li>\n<li>\n<p>缺少一种比较「干净」的在多个组件之间提取和复用逻辑的机制</p>\n</li>\n<li>\n<p>类型推断不够友好</p>\n</li>\n<li>\n<p><code>bundle</code>的时间太久了</p>\n</li>\n</ul>',readingTime:{minutes:4.34,words:1303},title:"Vue3.0的设计目标是什么？做了哪些优化",type:"article"}}],["/posts/vue3/modal_component.html",{loader:()=>t.e(7787).then(t.bind(t,399)),meta:{date:1747872e6,category:["-vue3系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/e294c660-6370-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、组件设计</h2>\n<p>组件就是把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式</p>\n<p>现在有一个场景，点击新增与编辑都弹框出来进行填写，功能上大同小异，可能只是标题内容或者是显示的主体内容稍微不同</p>\n<p>这时候就没必要写两个组件，只需要根据传入的参数不同，组件显示不同内容即可</p>',readingTime:{minutes:4.36,words:1309},title:"用Vue3.0 写过组件吗？如果想实现一个 Modal你会怎么设计？",type:"article"}}],["/posts/vue3/performance.html",{loader:()=>t.e(808).then(t.bind(t,1539)),meta:{date:1747872e6,category:["-vue3系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/2aac1020-5ed0-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、编译阶段</h2>\n<p>回顾<code>Vue2</code>，我们知道每个组件实例都对应一个 <code>watcher</code> 实例，它会在组件渲染的过程中把用到的数据<code>property</code>记录为依赖，当依赖发生改变，触发<code>setter</code>，则会通知<code>watcher</code>，从而使关联的组件重新渲染</p>',readingTime:{minutes:4.64,words:1391},title:"Vue3.0性能提升主要是通过哪几方面体现的？",type:"article"}}],["/posts/vue3/proxy.html",{loader:()=>t.e(7162).then(t.bind(t,3852)),meta:{date:1747872e6,category:["-vue3系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/57aa5c80-5f7f-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、Object.defineProperty</h2>\n<p>定义：<code>Object.defineProperty()</code> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象</p>\n<h5>为什么能实现响应式</h5>\n<p>通过<code>defineProperty</code> 两个属性，<code>get</code>及<code>set</code></p>',readingTime:{minutes:4.53,words:1360},title:"Vue3.0里为什么要用 Proxy API 替代 defineProperty API ？",type:"article"}}],["/posts/vue3/treeshaking.html",{loader:()=>t.e(4627).then(t.bind(t,1513)),meta:{date:1747872e6,category:["-vue3系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/5e8bf1d0-6097-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p><code>Tree shaking</code> 是一种通过清除多余代码方式来优化项目打包体积的技术，专业术语叫 <code>Dead code elimination</code></p>\n<p>简单来讲，就是在保持代码运行结果不变的前提下，去除无用的代码</p>',readingTime:{minutes:2.45,words:735},title:"说说Vue 3.0中Treeshaking特性？举例说明一下？",type:"article"}}],["/posts/webpack/HMR.html",{loader:()=>t.e(2857).then(t.bind(t,8643)),meta:{date:1747872e6,category:["-webpack系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/a076da40-acd4-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h3>一、是什么</h3>\n<p><code>HMR </code>全称 <code>Hot Module Replacement</code>，可以理解为模块热替换，指在应用程序运行过程中，替换、添加、删除模块，而无需重新刷新整个应用</p>\n<p>例如，我们在应用运行过程中修改了某个模块，通过自动刷新会导致整个应用的整体刷新，那页面中的状态信息都会丢失</p>',readingTime:{minutes:3.52,words:1057},title:"说说webpack的热更新是如何做到的？原理是什么？",type:"article"}}],["/posts/webpack/Loader.html",{loader:()=>t.e(7603).then(t.bind(t,7411)),meta:{date:1747872e6,category:["-webpack系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/5660fc40-a6ff-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p><code>loader</code> 用于对模块的"源代码"进行转换，在 <code>import</code> 或"加载"模块时预处理文件</p>\n<p><code>webpack</code>做的事情，仅仅是分析出各种模块的依赖关系，然后形成资源列表，最终打包生成到指定的文件中。如下图所示：</p>',readingTime:{minutes:5.19,words:1556},title:"说说webpack中常见的Loader？解决了什么问题？",type:"article"}}],["/posts/webpack/Loader_Plugin.html",{loader:()=>t.e(9953).then(t.bind(t,4663)),meta:{date:1747872e6,category:["-webpack系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/93042280-a894-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、区别</h2>\n<p>前面两节我们有提到<code>Loader</code>与<code>Plugin</code>对应的概念，先来回顾下</p>\n<ul>\n<li>loader 是文件加载器，能够加载资源文件，并对这些文件进行一些处理，诸如编译、压缩等，最终一起打包到指定的文件中</li>\n<li>plugin 赋予了 webpack 各种灵活的功能，例如打包优化、资源管理、环境变量注入等，目的是解决 loader 无法实现的其他事</li>\n</ul>',readingTime:{minutes:3.73,words:1118},title:"说说Loader和Plugin的区别？编写Loader，Plugin的思路？",type:"article"}}],["/posts/webpack/Plugin.html",{loader:()=>t.e(5323).then(t.bind(t,1546)),meta:{date:1747872e6,category:["-webpack系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/8d3978a0-a7c2-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p><code>Plugin</code>（Plug-in）是一种计算机应用程序，它和主应用程序互相交互，以提供特定的功能</p>\n<p>是一种遵循一定规范的应用程序接口编写出来的程序，只能运行在程序规定的系统下，因为其需要调用原纯净系统提供的函数库或者数据</p>',readingTime:{minutes:3.33,words:998},title:"说说webpack中常见的Plugin？解决了什么问题？",type:"article"}}],["/posts/webpack/Rollup_Parcel_snowpack_Vite.html",{loader:()=>t.e(1181).then(t.bind(t,4482)),meta:{date:1747872e6,category:["-webpack系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/8ed8d520-b1a4-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、模块化工具</h2>\n<p>模块化是一种处理复杂系统分解为更好的可管理模块的方式</p>\n<p>可以用来分割，组织和打包应用。每个模块完成一个特定的子功能，所有的模块按某种方法组装起来，成为一个整体(<code>bundle</code>)</p>\n<p>在前端领域中，并非只有<code>webpack</code>这一款优秀的模块打包工具，还有其他类似的工具，例如<code>Rollup</code>、<code>Parcel</code>、<code>snowpack</code>，以及最近风头无两的<code>Vite</code></p>',readingTime:{minutes:5.95,words:1784},title:"与webpack类似的工具还有哪些？区别？",type:"article"}}],["/posts/webpack/build_process.html",{loader:()=>t.e(8992).then(t.bind(t,7888)),meta:{date:1747872e6,category:["-webpack系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/96cf6840-a658-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、运行流程</h2>\n<p><code>webpack</code> 的运行流程是一个串行的过程，它的工作流程就是将各个插件串联起来</p>\n<p>在运行过程中会广播事件，插件只需要监听它所关心的事件，就能加入到这条<code>webpack</code>机制中，去改变<code>webpack</code>的运作，使得整个系统扩展性良好</p>',readingTime:{minutes:4.79,words:1436},title:"说说webpack的构建流程?",type:"article"}}],["/posts/webpack/improve_build.html",{loader:()=>t.e(8801).then(t.bind(t,5584)),meta:{date:1747872e6,category:["-webpack系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/3a1b8620-b01b-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、背景</h2>\n<p>随着我们的项目涉及到页面越来越多，功能和业务代码也会随着越多，相应的 <code>webpack</code> 的构建时间也会越来越久</p>\n<p>构建时间与我们日常开发效率密切相关，当我们本地开发启动 <code>devServer</code> 或者 <code>build</code> 的时候，如果时间过长，会大大降低我们的工作效率</p>',readingTime:{minutes:3.99,words:1197},title:"如何提高webpack的构建速度？",type:"article"}}],["/posts/webpack/performance.html",{loader:()=>t.e(7500).then(t.bind(t,4846)),meta:{date:1747872e6,category:["-webpack系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/15e1ace0-aee4-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、背景</h2>\n<p>随着前端的项目逐渐扩大，必然会带来的一个问题就是性能</p>\n<p>尤其在大型复杂的项目中，前端业务可能因为一个小小的数据依赖，导致整个页面卡顿甚至奔溃</p>\n<p>一般项目在完成后，会通过<code>webpack</code>进行打包，利用<code>webpack</code>对前端项目性能优化是一个十分重要的环节</p>',readingTime:{minutes:5.76,words:1729},title:"说说如何借助webpack来优化前端性能？",type:"article"}}],["/posts/webpack/proxy.html",{loader:()=>t.e(8278).then(t.bind(t,2416)),meta:{date:1747872e6,category:["-webpack系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/5b871600-ace5-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、是什么</h2>\n<p><code>webpack proxy</code>，即<code>webpack</code>提供的代理服务</p>\n<p>基本行为就是接收客户端发送的请求后转发给其他服务器</p>\n<p>其目的是为了便于开发者在开发模式下解决跨域问题（浏览器安全策略限制）</p>',readingTime:{minutes:2.96,words:887},title:"说说webpack proxy工作原理？为什么能解决跨域?",type:"article"}}],["/posts/webpack/webpack.html",{loader:()=>t.e(3441).then(t.bind(t,1881)),meta:{date:1747872e6,category:["-webpack系列"],tag:["面试题"],excerpt:'\n<figure><img src="https://static.vue-js.com/898ed570-a578-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h2>一、背景</h2>\n<p><code>Webpack</code> 最初的目标是实现前端项目的模块化，旨在更高效地管理和维护项目中的每一个资源</p>\n<h4>模块化</h4>\n<p>最早的时候，我们会通过文件划分的形式实现模块化，也就是将每个功能及其相关状态数据各自单独放到不同的<code> JS</code> 文件中</p>',readingTime:{minutes:3.56,words:1069},title:"说说你对webpack的理解？解决了什么问题？",type:"article"}}],["/404.html",{loader:()=>t.e(7490).then(t.bind(t,1489)),meta:{title:""}}],["/posts/NodeJS/",{loader:()=>t.e(280).then(t.bind(t,54)),meta:{title:"Node JS"}}],["/posts/",{loader:()=>t.e(8666).then(t.bind(t,8063)),meta:{title:"Posts"}}],["/posts/React/",{loader:()=>t.e(470).then(t.bind(t,8971)),meta:{title:"React"}}],["/posts/algorithm/",{loader:()=>t.e(944).then(t.bind(t,6945)),meta:{title:"Algorithm"}}],["/posts/applet/",{loader:()=>t.e(5787).then(t.bind(t,6767)),meta:{title:"Applet"}}],["/posts/css/",{loader:()=>t.e(4762).then(t.bind(t,3774)),meta:{title:"Css"}}],["/posts/design/",{loader:()=>t.e(613).then(t.bind(t,8101)),meta:{title:"Design"}}],["/posts/es6/",{loader:()=>t.e(5975).then(t.bind(t,3672)),meta:{title:"Es6"}}],["/posts/git/",{loader:()=>t.e(6249).then(t.bind(t,3231)),meta:{title:"Git"}}],["/posts/http/",{loader:()=>t.e(6599).then(t.bind(t,9354)),meta:{title:"Http"}}],["/posts/javascript/",{loader:()=>t.e(8528).then(t.bind(t,6554)),meta:{title:"Javascript"}}],["/posts/linux/",{loader:()=>t.e(1343).then(t.bind(t,9772)),meta:{title:"Linux"}}],["/posts/typescript/",{loader:()=>t.e(3504).then(t.bind(t,5645)),meta:{title:"Typescript"}}],["/posts/vue/",{loader:()=>t.e(6025).then(t.bind(t,6763)),meta:{title:"Vue"}}],["/posts/vue3/",{loader:()=>t.e(6954).then(t.bind(t,7980)),meta:{title:"Vue3"}}],["/posts/webpack/",{loader:()=>t.e(7446).then(t.bind(t,1957)),meta:{title:"Webpack"}}],["/category/",{loader:()=>t.e(3583).then(t.bind(t,3233)),meta:{title:"分类",index:!1}}],["/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{loader:()=>t.e(4021).then(t.bind(t,7062)),meta:{title:"使用指南 分类",index:!1}}],["/category/%E6%8C%87%E5%8D%97/",{loader:()=>t.e(8622).then(t.bind(t,1659)),meta:{title:"指南 分类",index:!1}}],["/category/-nodejs%E7%B3%BB%E5%88%97/",{loader:()=>t.e(5474).then(t.bind(t,9495)),meta:{title:"-NodeJS系列 分类",index:!1}}],["/category/-react%E7%B3%BB%E5%88%97/",{loader:()=>t.e(3560).then(t.bind(t,5634)),meta:{title:"-React系列 分类",index:!1}}],["/category/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",{loader:()=>t.e(1267).then(t.bind(t,1537)),meta:{title:"算法与数据结构 分类",index:!1}}],["/category/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/",{loader:()=>t.e(5380).then(t.bind(t,9113)),meta:{title:"微信小程序 分类",index:!1}}],["/category/css/",{loader:()=>t.e(7567).then(t.bind(t,2236)),meta:{title:"css 分类",index:!1}}],["/category/-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",{loader:()=>t.e(2914).then(t.bind(t,9106)),meta:{title:"-设计模式 分类",index:!1}}],["/category/-es6%E7%B3%BB%E5%88%97/",{loader:()=>t.e(5985).then(t.bind(t,1022)),meta:{title:"-es6系列 分类",index:!1}}],["/category/-git/",{loader:()=>t.e(5245).then(t.bind(t,4213)),meta:{title:"-git 分类",index:!1}}],["/category/-http%E7%B3%BB%E5%88%97/",{loader:()=>t.e(1033).then(t.bind(t,5073)),meta:{title:"-HTTP系列 分类",index:!1}}],["/category/javascript/",{loader:()=>t.e(1791).then(t.bind(t,438)),meta:{title:"javascript 分类",index:!1}}],["/category/-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/",{loader:()=>t.e(2208).then(t.bind(t,6173)),meta:{title:"-操作系统 分类",index:!1}}],["/category/-typescript%E7%B3%BB%E5%88%97/",{loader:()=>t.e(7858).then(t.bind(t,8710)),meta:{title:"-TypeScript系列 分类",index:!1}}],["/category/-vue%E7%B3%BB%E5%88%97/",{loader:()=>t.e(4859).then(t.bind(t,5214)),meta:{title:"-vue系列 分类",index:!1}}],["/category/-vue3%E7%B3%BB%E5%88%97/",{loader:()=>t.e(3108).then(t.bind(t,4017)),meta:{title:"-vue3系列 分类",index:!1}}],["/category/-webpack%E7%B3%BB%E5%88%97/",{loader:()=>t.e(8760).then(t.bind(t,4802)),meta:{title:"-webpack系列 分类",index:!1}}],["/tag/",{loader:()=>t.e(1797).then(t.bind(t,951)),meta:{title:"标签",index:!1}}],["/tag/%E7%A6%81%E7%94%A8/",{loader:()=>t.e(1331).then(t.bind(t,9753)),meta:{title:"标签: 禁用",index:!1}}],["/tag/%E5%8A%A0%E5%AF%86/",{loader:()=>t.e(8496).then(t.bind(t,5835)),meta:{title:"标签: 加密",index:!1}}],["/tag/%E5%B8%83%E5%B1%80/",{loader:()=>t.e(609).then(t.bind(t,7812)),meta:{title:"标签: 布局",index:!1}}],["/tag/markdown/",{loader:()=>t.e(312).then(t.bind(t,8216)),meta:{title:"标签: Markdown",index:!1}}],["/tag/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/",{loader:()=>t.e(602).then(t.bind(t,9462)),meta:{title:"标签: 页面配置",index:!1}}],["/tag/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{loader:()=>t.e(1431).then(t.bind(t,8210)),meta:{title:"标签: 使用指南",index:!1}}],["/tag/%E9%9D%A2%E8%AF%95%E9%A2%98/",{loader:()=>t.e(3414).then(t.bind(t,4390)),meta:{title:"标签: 面试题",index:!1}}],["/article/",{loader:()=>t.e(7511).then(t.bind(t,2772)),meta:{title:"文章",index:!1}}],["/star/",{loader:()=>t.e(7199).then(t.bind(t,353)),meta:{title:"星标",index:!1}}],["/timeline/",{loader:()=>t.e(5464).then(t.bind(t,4695)),meta:{title:"时间轴",index:!1}}]])},8761:(e,i,t)=>{t.d(i,{U:()=>a});const a=JSON.parse('{"base":"/blog/","lang":"zh-CN","title":"一次元","description":"vuepress-theme-hope 的博客演示","head":[],"locales":{}}')}},e=>{e.O(0,[5527,2107],(()=>e(e.s=8731))),e.O()}]);