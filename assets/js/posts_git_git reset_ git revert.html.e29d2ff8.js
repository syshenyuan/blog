"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8567],{4305:(i,s,e)=>{e.r(s),e.d(s,{comp:()=>n,data:()=>r});var t=e(641);const a={},n=(0,e(6262).A)(a,[["render",function(i,s){return(0,t.uX)(),(0,t.CE)("div",null,s[0]||(s[0]=[(0,t.Fv)('<h1 id="说说你对git-reset-和-git-revert-的理解-区别" tabindex="-1"><a class="header-anchor" href="#说说你对git-reset-和-git-revert-的理解-区别"><span>说说你对git reset 和 git revert 的理解？区别？</span></a></h1><figure><img src="https://static.vue-js.com/046b4440-ff74-11eb-bc6f-3f06e1491664.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="一、是什么" tabindex="-1"><a class="header-anchor" href="#一、是什么"><span>一、是什么</span></a></h2><h3 id="git-reset" tabindex="-1"><a class="header-anchor" href="#git-reset"><span>git reset</span></a></h3><p><code>reset</code>用于回退版本，可以遗弃不再使用的提交</p><p>执行遗弃时，需要根据影响的范围而指定不同的参数，可以指定是否复原索引或工作树内容</p><figure><img src="https://static.vue-js.com/ab4d0c00-ff72-11eb-bc6f-3f06e1491664.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="git-revert" tabindex="-1"><a class="header-anchor" href="#git-revert"><span>git revert</span></a></h3><p>在当前提交后面，新增一次提交，抵消掉上一次提交导致的所有变化，不会改变过去的历史，主要是用于安全地取消过去发布的提交</p><figure><img src="https://static.vue-js.com/bd12c290-ff72-11eb-991d-334fd31f0201.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="二、如何用" tabindex="-1"><a class="header-anchor" href="#二、如何用"><span>二、如何用</span></a></h2><h3 id="git-reset-1" tabindex="-1"><a class="header-anchor" href="#git-reset-1"><span>git reset</span></a></h3><p>当没有指定<code>ID</code>的时候，默认使用<code>HEAD</code>，如果指定<code>ID</code>，那么就是基于指向<code>ID</code>去变动暂存区或工作区的内容</p><div class="language-cmd line-numbers-mode" data-highlighter="shiki" data-ext="cmd" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// 没有指定ID, 暂存区的内容会被当前ID版本号的内容覆盖，工作区不变</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">git reset</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// 指定ID，暂存区的内容会被指定ID版本号的内容覆盖，工作区不变</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">git </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">reset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>日志<code>ID</code>可以通过查询，可以<code>git log</code>进行查询，如下：</p><div class="language-cmd line-numbers-mode" data-highlighter="shiki" data-ext="cmd" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">commit </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">a7700083ace1204ccdff9f71631fb34c9913f7c5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">HEAD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> master</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Author: </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">linguanghui</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">linguanghui</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@baidu.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">com</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">Date</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:   Tue Aug </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">17</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 22</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">34</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">40</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2021</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0800</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    second</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> commit</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">commit e31118663ce66717edd8a179688a7f3dde5a9393</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Author: </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">linguanghui</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">linguanghui</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@baidu.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">com</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">Date</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:   Tue Aug </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">17</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 22</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">01</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2021</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0800</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    first commit</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常见命令如下：</p><ul><li><p>--mixed（默认）：默认的时候，只有暂存区变化</p></li><li><p>--hard参数：如果使用 --hard 参数，那么工作区也会变化</p></li><li><p>--soft：如果使用 --soft 参数，那么暂存区和工作区都不会变化</p></li></ul><figure><img src="https://static.vue-js.com/225b41e0-ff73-11eb-bc6f-3f06e1491664.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="git-revert-1" tabindex="-1"><a class="header-anchor" href="#git-revert-1"><span>git revert</span></a></h3><p>跟<code>git reset</code>用法基本一致，<code>git revert</code> 撤销某次操作，此次操作之前和之后的 <code>commit</code>和<code>history</code>都会保留，并且把这次撤销，作为一次最新的提交，如下：</p><div class="language-cmd line-numbers-mode" data-highlighter="shiki" data-ext="cmd" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">git </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">revert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">commit_id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果撤销前一个版本，可以通过如下命令：</p><div class="language-cmd line-numbers-mode" data-highlighter="shiki" data-ext="cmd" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">git revert HEAD</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>撤销前前一次，如下：</p><div class="language-cmd line-numbers-mode" data-highlighter="shiki" data-ext="cmd" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">git revert HEAD^</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="三、区别" tabindex="-1"><a class="header-anchor" href="#三、区别"><span>三、区别</span></a></h2><p>撤销（revert）被设计为撤销公开的提交（比如已经push）的安全方式，<code>git reset</code>被设计为重设本地更改</p><p>因为两个命令的目的不同，它们的实现也不一样：重设完全地移除了一堆更改，而撤销保留了原来的更改，用一个新的提交来实现撤销</p><p>两者主要区别如下：</p><ul><li>git revert是用一次新的commit来回滚之前的commit，git reset是直接删除指定的commit</li><li>git reset 是把HEAD向后移动了一下，而git revert是HEAD继续前进，只是新的commit的内容和要revert的内容正好相反，能够抵消要被revert的内容</li><li>在回滚这一操作上看，效果差不多。但是在日后继续 merge 以前的老版本时有区别</li></ul><blockquote><p>git revert是用一次逆向的commit“中和”之前的提交，因此日后合并老的branch时，之前提交合并的代码仍然存在，导致不能够重新合并</p><p>但是git reset是之间把某些commit在某个branch上删除，因而和老的branch再次merge时，这些被回滚的commit应该还会被引入</p></blockquote><ul><li>如果回退分支的代码以后还需要的情况则使用<code>git revert</code>， 如果分支是提错了没用的并且不想让别人发现这些错误代码，则使用<code>git reset</code></li></ul><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献"><span>参考文献</span></a></h2><ul><li><a href="https://juejin.cn/post/6844903542931587086" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/6844903542931587086</a></li><li><a href="https://marklodato.github.io/visual-git-guide/index-zh-cn.html#reset" target="_blank" rel="noopener noreferrer">https://marklodato.github.io/visual-git-guide/index-zh-cn.html#reset</a></li></ul>',35)]))}]]),r=JSON.parse('{"path":"/posts/git/git%20reset_%20git%20revert.html","title":"说说你对git reset 和 git revert 的理解？区别？","lang":"zh-CN","frontmatter":{"date":"2025-05-22T00:00:00.000Z","category":"-git","tag":["面试题"],"description":"说说你对git reset 和 git revert 的理解？区别？ 一、是什么 git reset reset用于回退版本，可以遗弃不再使用的提交 执行遗弃时，需要根据影响的范围而指定不同的参数，可以指定是否复原索引或工作树内容 git revert 在当前提交后面，新增一次提交，抵消掉上一次提交导致的所有变化，不会改变过去的历史，主要是用于安全地取...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"说说你对git reset 和 git revert 的理解？区别？\\",\\"image\\":[\\"https://static.vue-js.com/046b4440-ff74-11eb-bc6f-3f06e1491664.png\\",\\"https://static.vue-js.com/ab4d0c00-ff72-11eb-bc6f-3f06e1491664.png\\",\\"https://static.vue-js.com/bd12c290-ff72-11eb-991d-334fd31f0201.png\\",\\"https://static.vue-js.com/225b41e0-ff73-11eb-bc6f-3f06e1491664.png\\"],\\"datePublished\\":\\"2025-05-22T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-23T11:03:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"一次元\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/git/git%20reset_%20git%20revert.html"}],["meta",{"property":"og:site_name","content":"一次元"}],["meta",{"property":"og:title","content":"说说你对git reset 和 git revert 的理解？区别？"}],["meta",{"property":"og:description","content":"说说你对git reset 和 git revert 的理解？区别？ 一、是什么 git reset reset用于回退版本，可以遗弃不再使用的提交 执行遗弃时，需要根据影响的范围而指定不同的参数，可以指定是否复原索引或工作树内容 git revert 在当前提交后面，新增一次提交，抵消掉上一次提交导致的所有变化，不会改变过去的历史，主要是用于安全地取..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://static.vue-js.com/046b4440-ff74-11eb-bc6f-3f06e1491664.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-23T11:03:34.000Z"}],["meta",{"property":"article:tag","content":"面试题"}],["meta",{"property":"article:published_time","content":"2025-05-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-23T11:03:34.000Z"}]]},"git":{"createdTime":1747998214000,"updatedTime":1747998214000,"contributors":[{"name":"shenyuan","username":"shenyuan","email":"13618329369@163.com","commits":1,"url":"https://github.com/shenyuan"}]},"readingTime":{"minutes":2.85,"words":855},"filePathRelative":"posts/git/git reset_ git revert.md","excerpt":"\\n<figure><img src=\\"https://static.vue-js.com/046b4440-ff74-11eb-bc6f-3f06e1491664.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<h2>一、是什么</h2>\\n<h3>git reset</h3>\\n<p><code>reset</code>用于回退版本，可以遗弃不再使用的提交</p>\\n<p>执行遗弃时，需要根据影响的范围而指定不同的参数，可以指定是否复原索引或工作树内容</p>\\n<figure><img src=\\"https://static.vue-js.com/ab4d0c00-ff72-11eb-bc6f-3f06e1491664.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>","autoDesc":true}')},6262:(i,s)=>{s.A=(i,s)=>{const e=i.__vccOpts||i;for(const[i,t]of s)e[i]=t;return e}}}]);