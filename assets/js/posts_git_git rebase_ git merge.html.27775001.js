"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[928],{6262:(e,i)=>{i.A=(e,i)=>{const t=e.__vccOpts||e;for(const[e,a]of i)t[e]=a;return t}},9799:(e,i,t)=>{t.r(i),t.d(i,{comp:()=>d,data:()=>r});var a=t(641);const s={},d=(0,t(6262).A)(s,[["render",function(e,i){return(0,a.uX)(),(0,a.CE)("div",null,i[0]||(i[0]=[(0,a.Fv)('<h1 id="说说你对git-rebase-和-git-merge的理解-区别" tabindex="-1"><a class="header-anchor" href="#说说你对git-rebase-和-git-merge的理解-区别"><span>说说你对git rebase 和 git merge的理解？区别？</span></a></h1><figure><img src="https://static.vue-js.com/77590970-fdd4-11eb-bc6f-3f06e1491664.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="一、是什么" tabindex="-1"><a class="header-anchor" href="#一、是什么"><span>一、是什么</span></a></h2><p>在使用 <code>git</code> 进行版本管理的项目中，当完成一个特性的开发并将其合并到 <code>master</code> 分支时，会有两种方式：</p><ul><li>git merge</li><li>git rebase</li></ul><p><code>git rebase</code> 与 <code>git merge</code>都有相同的作用，都是将一个分支的提交合并到另一分支上，但是在原理上却不相同</p><p>用法上两者也十分的简单：</p><h3 id="git-merge" tabindex="-1"><a class="header-anchor" href="#git-merge"><span>git merge</span></a></h3><p>将当前分支合并到指定分支，命令用法如下：</p><div class="language-cmd line-numbers-mode" data-highlighter="shiki" data-ext="cmd" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">git merge xxx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="git-rebase" tabindex="-1"><a class="header-anchor" href="#git-rebase"><span>git rebase</span></a></h3><p>将当前分支移植到指定分支或指定<code>commit</code>之上，用法如下：</p><div class="language-cmd line-numbers-mode" data-highlighter="shiki" data-ext="cmd" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">git </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">rebase</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">commit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>常见的参数有<code>--continue</code>，用于解决冲突之后，继续执行<code>rebase</code></p><div class="language-cmd line-numbers-mode" data-highlighter="shiki" data-ext="cmd" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">git </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">rebase</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> --</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">continue</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="二、分析" tabindex="-1"><a class="header-anchor" href="#二、分析"><span>二、分析</span></a></h2><h3 id="git-merge-1" tabindex="-1"><a class="header-anchor" href="#git-merge-1"><span>git merge</span></a></h3><p>通过<code>git merge</code>将当前分支与<code>xxx</code>分支合并，产生的新的<code>commit</code>对象有两个父节点</p><p>如果“指定分支”本身是当前分支的一个直接子节点，则会产生快照合并</p><p>举个例子，<code>bugfix</code>分支是从<code>master</code>分支分叉出来的，如下所示：</p><figure><img src="https://static.vue-js.com/88410a30-fdd4-11eb-991d-334fd31f0201.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>合并<code> bugfix</code>分支到<code>master</code>分支时，如果<code>master</code>分支的状态没有被更改过，即 <code>bugfix</code>分支的历史记录包含<code>master</code>分支所有的历史记录</p><p>所以通过把<code>master</code>分支的位置移动到<code>bugfix</code>的最新分支上，就完成合并</p><p>如果<code>master</code>分支的历史记录在创建<code>bugfix</code>分支后又有新的提交，如下情况：</p><figure><img src="https://static.vue-js.com/929eb220-fdd4-11eb-991d-334fd31f0201.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这时候使用<code>git merge</code>的时候，会生成一个新的提交，并且<code>master</code>分支的<code>HEAD</code>会移动到新的分支上，如下：</p><figure><img src="https://static.vue-js.com/9fdfa3e0-fdd4-11eb-991d-334fd31f0201.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从上面可以看到，会把两个分支的最新快照以及二者最近的共同祖先进行三方合并，合并的结果是生成一个新的快照</p><h3 id="git-rebase-1" tabindex="-1"><a class="header-anchor" href="#git-rebase-1"><span>git rebase</span></a></h3><p>同样，<code>master</code>分支的历史记录在创建<code>bugfix</code>分支后又有新的提交，如下情况：</p><figure><img src="https://static.vue-js.com/ab2d5120-fdd4-11eb-bc6f-3f06e1491664.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过<code>git rebase</code>，会变成如下情况：</p><figure><img src="https://static.vue-js.com/b72aed70-fdd4-11eb-991d-334fd31f0201.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在移交过程中，如果发生冲突，需要修改各自的冲突，如下：</p><figure><img src="https://static.vue-js.com/c9ba0e80-fdd4-11eb-bc6f-3f06e1491664.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>rebase</code>之后，<code>master</code>的<code>HEAD</code>位置不变。因此，要合并<code>master</code>分支和<code>bugfix</code>分支</p><figure><img src="https://static.vue-js.com/dc660660-fdd4-11eb-991d-334fd31f0201.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从上面可以看到，<code>rebase</code>会找到不同的分支的最近共同祖先，如上图的<code>B</code></p><p>然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件（老的提交<code>X</code>和<code>Y</code>也没有被销毁，只是简单地不能再被访问或者使用）</p><p>然后将当前分支指向目标最新位置<code>D</code>, 然后将之前另存为临时文件的修改依序应用</p><h2 id="三、区别" tabindex="-1"><a class="header-anchor" href="#三、区别"><span>三、区别</span></a></h2><p>从上面可以看到，<code>merge</code>和<code>rebasea</code>都是合并历史记录，但是各自特性不同：</p><h3 id="merge" tabindex="-1"><a class="header-anchor" href="#merge"><span>merge</span></a></h3><p>通过<code>merge</code>合并分支会新增一个<code>merge commit</code>，然后将两个分支的历史联系起来</p><p>其实是一种非破坏性的操作，对现有分支不会以任何方式被更改，但是会导致历史记录相对复杂</p><h3 id="rebase" tabindex="-1"><a class="header-anchor" href="#rebase"><span>rebase</span></a></h3><p><code>rebase </code>会将整个分支移动到另一个分支上，有效地整合了所有分支上的提交</p><p>主要的好处是历史记录更加清晰，是在原有提交的基础上将差异内容反映进去，消除了 <code>git merge</code>所需的不必要的合并提交</p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献"><span>参考文献</span></a></h2><ul><li><a href="https://zhuanlan.zhihu.com/p/361182707" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/361182707</a></li><li><a href="https://yuweijun.github.io/git-zh/1-git-branching.html#_rebasing" target="_blank" rel="noopener noreferrer">https://yuweijun.github.io/git-zh/1-git-branching.html#_rebasing</a></li><li><a href="https://backlog.com/git-tutorial/cn/stepup/stepup1_4.html" target="_blank" rel="noopener noreferrer">https://backlog.com/git-tutorial/cn/stepup/stepup1_4.html</a></li></ul>',50)]))}]]),r=JSON.parse('{"path":"/posts/git/git%20rebase_%20git%20merge.html","title":"说说你对git rebase 和 git merge的理解？区别？","lang":"zh-CN","frontmatter":{"date":"2025-05-22T00:00:00.000Z","category":"-git","tag":["面试题"],"description":"说说你对git rebase 和 git merge的理解？区别？ 一、是什么 在使用 git 进行版本管理的项目中，当完成一个特性的开发并将其合并到 master 分支时，会有两种方式： git merge git rebase git rebase 与 git merge都有相同的作用，都是将一个分支的提交合并到另一分支上，但是在原理上却不相同 用...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"说说你对git rebase 和 git merge的理解？区别？\\",\\"image\\":[\\"https://static.vue-js.com/77590970-fdd4-11eb-bc6f-3f06e1491664.png\\",\\"https://static.vue-js.com/88410a30-fdd4-11eb-991d-334fd31f0201.png\\",\\"https://static.vue-js.com/929eb220-fdd4-11eb-991d-334fd31f0201.png\\",\\"https://static.vue-js.com/9fdfa3e0-fdd4-11eb-991d-334fd31f0201.png\\",\\"https://static.vue-js.com/ab2d5120-fdd4-11eb-bc6f-3f06e1491664.png\\",\\"https://static.vue-js.com/b72aed70-fdd4-11eb-991d-334fd31f0201.png\\",\\"https://static.vue-js.com/c9ba0e80-fdd4-11eb-bc6f-3f06e1491664.png\\",\\"https://static.vue-js.com/dc660660-fdd4-11eb-991d-334fd31f0201.png\\"],\\"datePublished\\":\\"2025-05-22T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-23T11:03:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"一次元\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/git/git%20rebase_%20git%20merge.html"}],["meta",{"property":"og:site_name","content":"一次元"}],["meta",{"property":"og:title","content":"说说你对git rebase 和 git merge的理解？区别？"}],["meta",{"property":"og:description","content":"说说你对git rebase 和 git merge的理解？区别？ 一、是什么 在使用 git 进行版本管理的项目中，当完成一个特性的开发并将其合并到 master 分支时，会有两种方式： git merge git rebase git rebase 与 git merge都有相同的作用，都是将一个分支的提交合并到另一分支上，但是在原理上却不相同 用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://static.vue-js.com/77590970-fdd4-11eb-bc6f-3f06e1491664.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-23T11:03:34.000Z"}],["meta",{"property":"article:tag","content":"面试题"}],["meta",{"property":"article:published_time","content":"2025-05-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-23T11:03:34.000Z"}]]},"git":{"createdTime":1747998214000,"updatedTime":1747998214000,"contributors":[{"name":"shenyuan","username":"shenyuan","email":"13618329369@163.com","commits":1,"url":"https://github.com/shenyuan"}]},"readingTime":{"minutes":3.09,"words":926},"filePathRelative":"posts/git/git rebase_ git merge.md","excerpt":"\\n<figure><img src=\\"https://static.vue-js.com/77590970-fdd4-11eb-bc6f-3f06e1491664.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<h2>一、是什么</h2>\\n<p>在使用 <code>git</code> 进行版本管理的项目中，当完成一个特性的开发并将其合并到 <code>master</code> 分支时，会有两种方式：</p>\\n<ul>\\n<li>git merge</li>\\n<li>git rebase</li>\\n</ul>","autoDesc":true}')}}]);