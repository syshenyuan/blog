"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6995],{6262:(e,t)=>{t.A=(e,t)=>{const a=e.__vccOpts||e;for(const[e,i]of t)a[e]=i;return a}},7853:(e,t,a)=>{a.r(t),a.d(t,{comp:()=>o,data:()=>p});var i=a(641);const c={},o=(0,a(6262).A)(c,[["render",function(e,t){return(0,i.uX)(),(0,i.CE)("div",null,t[0]||(t[0]=[(0,i.Fv)('<h1 id="说说微信小程序的实现原理" tabindex="-1"><a class="header-anchor" href="#说说微信小程序的实现原理"><span>说说微信小程序的实现原理？</span></a></h1><figure><img src="https://static.vue-js.com/4407cb60-3722-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="一、背景" tabindex="-1"><a class="header-anchor" href="#一、背景"><span>一、背景</span></a></h2><p>网页开发，渲染线程和脚本是互斥的，这也是为什么长时间的脚本运行可能会导致页面失去响应的原因，本质就是我们常说的 <code>JS</code> 是单线程的</p><p>而在小程序中，选择了 <code>Hybrid</code> 的渲染方式，将视图层和逻辑层是分开的，双线程同时运行，视图层的界面使用 <code>WebView</code> 进行渲染，逻辑层运行在 <code>JSCore</code> 中</p><figure><img src="https://static.vue-js.com/4e322e50-3722-11ec-8e64-91fdec0f05a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>渲染层：界面渲染相关的任务全都在 WebView 线程里执行。一个小程序存在多个界面，所以渲染层存在多个 WebView 线程</li><li>逻辑层：采用 JsCore 线程运行 JS 脚本，在这个环境下执行的都是有关小程序业务逻辑的代码</li></ul><h2 id="二、通信" tabindex="-1"><a class="header-anchor" href="#二、通信"><span>二、通信</span></a></h2><p>小程序在渲染层，宿主环境会把<code>wxml</code>转化成对应的<code>JS</code>对象</p><p>在逻辑层发生数据变更的时候，通过宿主环境提供的<code>setData</code>方法把数据从逻辑层传递到渲染层，再经过对比前后差异，把差异应用在原来的<code>Dom</code>树上，渲染出正确的视图</p><figure><img src="https://static.vue-js.com/5948ed10-3722-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当视图存在交互的时候，例如用户点击你界面上某个按钮，这类反馈应该通知给开发者的逻辑层，需要将对应的处理状态呈现给用户</p><p>对于事件的分发处理，微信进行了特殊的处理，将所有的事件拦截后，丢到逻辑层交给<code>JavaScript</code>进行处理</p><figure><img src="https://static.vue-js.com/61f9f670-3722-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>由于小程序是基于双线程的，也就是任何在视图层和逻辑层之间的数据传递都是线程间的通信，会有一定的延时，因此在小程序中，页面更新成了异步操作</p><p>异步会使得各部分的运行时序变得复杂一些，比如在渲染首屏的时候，逻辑层与渲染层会同时开始初始化工作，但是渲染层需要有逻辑层的数据才能把界面渲染出来</p><p>如果渲染层初始化工作较快完成，就要等逻辑层的指令才能进行下一步工作</p><p>因此逻辑层与渲染层需要有一定的机制保证时序正确，在每个小程序页面的生命周期中，存在着若干次页面数据通信</p><figure><img src="https://static.vue-js.com/6cb798b0-3722-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="三、运行机制" tabindex="-1"><a class="header-anchor" href="#三、运行机制"><span>三、运行机制</span></a></h2><p>小程序启动运行两种情况：</p><ul><li>冷启动（重新开始）：用户首次打开或者小程序被微信主动销毁后再次打开的情况，此时小程序需要重新加载启动，即为冷启动</li><li>热启动：用户已经打开过小程序，然后在一定时间内再次打开该小程序，此时无需重新启动，只需要将后台态的小程序切换到前台，这个过程就是热启动</li></ul><h4 id="需要注意" tabindex="-1"><a class="header-anchor" href="#需要注意"><span>需要注意：</span></a></h4><blockquote><p>1.小程序没有重启的概念<br> 2.当小程序进入后台，客户端会维持一段时间的运行状态，超过一定时间后会被微信主动销毁<br> 3.短时间内收到系统两次以上内存警告，也会对小程序进行销毁，这也就为什么一旦页面内存溢出，页面会奔溃的本质原因了</p></blockquote><figure><img src="https://static.vue-js.com/968c8510-3722-11ec-a752-75723a64e8f5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>开发者在后台发布新版本之后，无法立刻影响到所有现网用户，但最差情况下，也在发布之后 24 小时之内下发新版本信息到用户</p><p>每次冷启动时，都会检查是否有更新版本，如果发现有新版本，将会异步下载新版本的代码包，并同时用客户端本地的包进行启动，即新版本的小程序需要等下一次冷启动才会应用上</p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献"><span>参考文献</span></a></h2><ul><li><a href="https://developers.weixin.qq.com/community/develop/article/doc/0008a4c4f28f30fe3eb863b2750813" target="_blank" rel="noopener noreferrer">https://developers.weixin.qq.com/community/develop/article/doc/0008a4c4f28f30fe3eb863b2750813</a></li><li><a href="https://juejin.cn/post/6976805521407868958#heading-5" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/6976805521407868958#heading-5</a></li><li><a href="https://juejin.cn/post/6844903805675388942" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/6844903805675388942</a></li><li><a href="https://juejin.cn/post/6844903999863259144#heading-1" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/6844903999863259144#heading-1</a></li></ul>',29)]))}]]),p=JSON.parse('{"path":"/posts/applet/WebView_jscore.html","title":"说说微信小程序的实现原理？","lang":"zh-CN","frontmatter":{"date":"2025-05-22T00:00:00.000Z","category":["微信小程序"],"tag":["面试题"],"description":"说说微信小程序的实现原理？ 一、背景 网页开发，渲染线程和脚本是互斥的，这也是为什么长时间的脚本运行可能会导致页面失去响应的原因，本质就是我们常说的 JS 是单线程的 而在小程序中，选择了 Hybrid 的渲染方式，将视图层和逻辑层是分开的，双线程同时运行，视图层的界面使用 WebView 进行渲染，逻辑层运行在 JSCore 中 渲染层：界面渲染相关...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"说说微信小程序的实现原理？\\",\\"image\\":[\\"https://static.vue-js.com/4407cb60-3722-11ec-a752-75723a64e8f5.png\\",\\"https://static.vue-js.com/4e322e50-3722-11ec-8e64-91fdec0f05a1.png\\",\\"https://static.vue-js.com/5948ed10-3722-11ec-a752-75723a64e8f5.png\\",\\"https://static.vue-js.com/61f9f670-3722-11ec-a752-75723a64e8f5.png\\",\\"https://static.vue-js.com/6cb798b0-3722-11ec-a752-75723a64e8f5.png\\",\\"https://static.vue-js.com/968c8510-3722-11ec-a752-75723a64e8f5.png\\"],\\"datePublished\\":\\"2025-05-22T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-23T11:03:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"一次元\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/applet/WebView_jscore.html"}],["meta",{"property":"og:site_name","content":"一次元"}],["meta",{"property":"og:title","content":"说说微信小程序的实现原理？"}],["meta",{"property":"og:description","content":"说说微信小程序的实现原理？ 一、背景 网页开发，渲染线程和脚本是互斥的，这也是为什么长时间的脚本运行可能会导致页面失去响应的原因，本质就是我们常说的 JS 是单线程的 而在小程序中，选择了 Hybrid 的渲染方式，将视图层和逻辑层是分开的，双线程同时运行，视图层的界面使用 WebView 进行渲染，逻辑层运行在 JSCore 中 渲染层：界面渲染相关..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://static.vue-js.com/4407cb60-3722-11ec-a752-75723a64e8f5.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-23T11:03:34.000Z"}],["meta",{"property":"article:tag","content":"面试题"}],["meta",{"property":"article:published_time","content":"2025-05-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-23T11:03:34.000Z"}]]},"git":{"createdTime":1747998214000,"updatedTime":1747998214000,"contributors":[{"name":"shenyuan","username":"shenyuan","email":"13618329369@163.com","commits":1,"url":"https://github.com/shenyuan"}]},"readingTime":{"minutes":3.48,"words":1045},"filePathRelative":"posts/applet/WebView_jscore.md","excerpt":"\\n<figure><img src=\\"https://static.vue-js.com/4407cb60-3722-11ec-a752-75723a64e8f5.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<h2>一、背景</h2>\\n<p>网页开发，渲染线程和脚本是互斥的，这也是为什么长时间的脚本运行可能会导致页面失去响应的原因，本质就是我们常说的 <code>JS</code> 是单线程的</p>\\n<p>而在小程序中，选择了 <code>Hybrid</code> 的渲染方式，将视图层和逻辑层是分开的，双线程同时运行，视图层的界面使用 <code>WebView</code> 进行渲染，逻辑层运行在 <code>JSCore</code> 中</p>","autoDesc":true}')}}]);