"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2612],{2992:(e,i,s)=>{s.r(i),s.d(i,{comp:()=>d,data:()=>t});var o=s(641);const a={},d=(0,s(6262).A)(a,[["render",function(e,i){return(0,o.uX)(),(0,o.CE)("div",null,i[0]||(i[0]=[(0,o.Fv)('<h1 id="说说-node-文件查找的优先级以及-require-方法的文件查找策略" tabindex="-1"><a class="header-anchor" href="#说说-node-文件查找的优先级以及-require-方法的文件查找策略"><span>说说 Node 文件查找的优先级以及 Require 方法的文件查找策略?</span></a></h1><figure><img src="https://static.vue-js.com/15913530-c9ba-11eb-ab90-d9ae814b240d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="一、模块规范" tabindex="-1"><a class="header-anchor" href="#一、模块规范"><span>一、模块规范</span></a></h2><p><code>NodeJS</code>对<code>CommonJS</code>进行了支持和实现，让我们在开发<code>node</code>的过程中可以方便的进行模块化开发：</p><ul><li>在Node中每一个js文件都是一个单独的模块</li><li>模块中包括CommonJS规范的核心变量：exports、module.exports、require</li><li>通过上述变量进行模块化开发</li></ul><p>而模块化的核心是导出与导入，在<code>Node</code>中通过<code>exports</code>与<code>module.exports</code>负责对模块中的内容进行导出，通过<code>require</code>函数导入其他模块（自定义模块、系统模块、第三方库模块）中的内容</p><h2 id="二、查找策略" tabindex="-1"><a class="header-anchor" href="#二、查找策略"><span>二、查找策略</span></a></h2><p><code>require</code>方法接收一下几种参数的传递：</p><ul><li>原生模块：http、fs、path等</li><li>相对路径的文件模块：./mod或../mod</li><li>绝对路径的文件模块：/pathtomodule/mod</li><li>目录作为模块：./dirname</li><li>非原生模块的文件模块：mod</li></ul><p><code>require</code>参数较为简单，但是内部的加载却是十分复杂的，其加载优先级也各自不同，如下图：</p><figure><img src="https://static.vue-js.com/33ae8ef0-c9ba-11eb-85f6-6fac77c0c9b3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从上图可以看见，文件模块存在缓存区，寻找模块路径的时候都会优先从缓存中加载已经存在的模块</p><h3 id="原生模块" tabindex="-1"><a class="header-anchor" href="#原生模块"><span>原生模块</span></a></h3><p>而像原生模块这些，通过<code>require </code>方法在解析文件名之后，优先检查模块是否在原生模块列表中，如果在则从原生模块中加载</p><h3 id="绝对路径、相对路径" tabindex="-1"><a class="header-anchor" href="#绝对路径、相对路径"><span>绝对路径、相对路径</span></a></h3><p>如果<code>require</code>绝对路径的文件，则直接查找对应的路径，速度最快</p><p>相对路径的模块则相对于当前调用<code>require</code>的文件去查找</p><p>如果按确切的文件名没有找到模块，则 <code>NodeJs</code> 会尝试带上 <code>.js</code>、<code>.json </code>或 <code>.node </code>拓展名再加载</p><h3 id="目录作为模块" tabindex="-1"><a class="header-anchor" href="#目录作为模块"><span>目录作为模块</span></a></h3><p>默认情况是根据根目录中<code>package.json</code>文件的<code>main</code>来指定目录模块，如：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;some-library&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;main&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;main.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果这是在<code>./some-library node_modules</code>目录中，则 <code>require(&#39;./some-library&#39;)</code> 会试图加载 <code>./some-library/main.js</code></p><p>如果目录里没有 <code>package.json</code>文件，或者 <code>main</code>入口不存在或无法解析，则会试图加载目录下的 <code>index.js</code> 或 <code>index.node</code> 文件</p><h3 id="非原生模块" tabindex="-1"><a class="header-anchor" href="#非原生模块"><span>非原生模块</span></a></h3><p>在每个文件中都存在<code>module.paths</code>，表示模块的搜索路径，<code>require</code>就是根据其来寻找文件</p><p>在<code>window</code>下输出如下：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;c:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">nodejs</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">node_modules&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;c:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">node_modules&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出<code>module path</code>的生成规则为：从当前文件目录开始查找<code>node_modules</code>目录；然后依次进入父目录，查找父目录下的<code>node_modules</code>目录，依次迭代，直到根目录下的<code>node_modules</code>目录</p><p>当都找不到的时候，则会从系统<code>NODE_PATH</code>环境变量查找</p><h4 id="举个例子" tabindex="-1"><a class="header-anchor" href="#举个例子"><span>举个例子：</span></a></h4><p>如果在<code>/home/ry/projects/foo.js</code>文件里调用了 <code>require(&#39;bar.js&#39;)</code>，则 Node.js 会按以下顺序查找：</p><ul><li>/home/ry/projects/node_modules/bar.js</li><li>/home/ry/node_modules/bar.js</li><li>/home/node_modules/bar.js</li><li>/node_modules/bar.js</li></ul><p>这使得程序本地化它们的依赖，避免它们产生冲突</p><h2 id="三、总结" tabindex="-1"><a class="header-anchor" href="#三、总结"><span>三、总结</span></a></h2><p>通过上面模块的文件查找策略之后，总结下文件查找的优先级：</p><ul><li><p>缓存的模块优先级最高</p></li><li><p>如果是内置模块，则直接返回，优先级仅次缓存的模块</p></li><li><p>如果是绝对路径 / 开头，则从根目录找</p></li><li><p>如果是相对路径 ./开头，则从当前require文件相对位置找</p></li><li><p>如果文件没有携带后缀，先从js、json、node按顺序查找</p></li><li><p>如果是目录，则根据 package.json的main属性值决定目录下入口文件，默认情况为 index.js</p></li><li><p>如果文件为第三方模块，则会引入 node_modules 文件，如果不在当前仓库文件中，则自动从上级递归查找，直到根目录</p></li></ul><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献"><span>参考文献</span></a></h2><ul><li><a href="http://nodejs.cn/api/modules.html#modules_file_modules" target="_blank" rel="noopener noreferrer">http://nodejs.cn/api/modules.html#modules_file_modules</a></li><li><a href="https://blog.csdn.net/qq_36801250/article/details/106352686" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/qq_36801250/article/details/106352686</a></li><li><a href="https://www.cnblogs.com/samve/p/10805908.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/samve/p/10805908.html</a></li></ul>',38)]))}]]),t=JSON.parse('{"path":"/posts/NodeJS/require_order.html","title":"说说 Node 文件查找的优先级以及 Require 方法的文件查找策略?","lang":"zh-CN","frontmatter":{"date":"2025-05-22T00:00:00.000Z","category":"-NodeJS系列","tag":["面试题"],"description":"说说 Node 文件查找的优先级以及 Require 方法的文件查找策略? 一、模块规范 NodeJS对CommonJS进行了支持和实现，让我们在开发node的过程中可以方便的进行模块化开发： 在Node中每一个js文件都是一个单独的模块 模块中包括CommonJS规范的核心变量：exports、module.exports、require 通过上述变...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"说说 Node 文件查找的优先级以及 Require 方法的文件查找策略?\\",\\"image\\":[\\"https://static.vue-js.com/15913530-c9ba-11eb-ab90-d9ae814b240d.png\\",\\"https://static.vue-js.com/33ae8ef0-c9ba-11eb-85f6-6fac77c0c9b3.png\\"],\\"datePublished\\":\\"2025-05-22T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-23T11:03:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"一次元\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/NodeJS/require_order.html"}],["meta",{"property":"og:site_name","content":"一次元"}],["meta",{"property":"og:title","content":"说说 Node 文件查找的优先级以及 Require 方法的文件查找策略?"}],["meta",{"property":"og:description","content":"说说 Node 文件查找的优先级以及 Require 方法的文件查找策略? 一、模块规范 NodeJS对CommonJS进行了支持和实现，让我们在开发node的过程中可以方便的进行模块化开发： 在Node中每一个js文件都是一个单独的模块 模块中包括CommonJS规范的核心变量：exports、module.exports、require 通过上述变..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://static.vue-js.com/15913530-c9ba-11eb-ab90-d9ae814b240d.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-23T11:03:34.000Z"}],["meta",{"property":"article:tag","content":"面试题"}],["meta",{"property":"article:published_time","content":"2025-05-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-23T11:03:34.000Z"}]]},"git":{"createdTime":1747998214000,"updatedTime":1747998214000,"contributors":[{"name":"shenyuan","username":"shenyuan","email":"13618329369@163.com","commits":1,"url":"https://github.com/shenyuan"}]},"readingTime":{"minutes":3.19,"words":958},"filePathRelative":"posts/NodeJS/require_order.md","excerpt":"\\n<figure><img src=\\"https://static.vue-js.com/15913530-c9ba-11eb-ab90-d9ae814b240d.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<h2>一、模块规范</h2>\\n<p><code>NodeJS</code>对<code>CommonJS</code>进行了支持和实现，让我们在开发<code>node</code>的过程中可以方便的进行模块化开发：</p>\\n<ul>\\n<li>在Node中每一个js文件都是一个单独的模块</li>\\n<li>模块中包括CommonJS规范的核心变量：exports、module.exports、require</li>\\n<li>通过上述变量进行模块化开发</li>\\n</ul>","autoDesc":true}')},6262:(e,i)=>{i.A=(e,i)=>{const s=e.__vccOpts||e;for(const[e,o]of i)s[e]=o;return s}}}]);